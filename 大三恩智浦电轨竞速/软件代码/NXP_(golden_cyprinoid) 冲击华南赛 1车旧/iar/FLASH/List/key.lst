###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        08/Aug/2016  13:02:54
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\app\ITAC\key.c
#    Command line =  
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\app\ITAC\key.c" -D LPLD_K60 -lCN
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -lB
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -o
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\BSP\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\ITAC\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\CTL\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\MAIN\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\SENSOR\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\CPU\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\HW\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\DEV\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\option\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\driver\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\descriptor\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\class\" -On -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\key.lst
#    Object file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\key.o
#
###############################################################################

C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid) 冲击华南赛 1车\app\ITAC\key.c
      1          #include "include.h"
      2          
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void key_init()
      5          {
   \                     key_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
      6            GPIO_InitTypeDef key_inittype;
      7            
      8            key_inittype.GPIO_PTx = PTB;
   \   00000004   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000006   0x9001             STR      R0,[SP, #+4]
      9            key_inittype.GPIO_Pins = GPIO_Pin17 | GPIO_Pin20 | GPIO_Pin21 | GPIO_Pin22 | GPIO_Pin23; 
   \   00000008   0xF45F 0x0072      MOVS     R0,#+15859712
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     10            key_inittype.GPIO_Dir = DIR_INPUT;        //输入
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0010      STRB     R0,[SP, #+16]
     11            key_inittype.GPIO_PinControl = INPUT_PULL_UP | IRQC_DIS; //上拉 下降沿触发外部中断
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x9003             STR      R0,[SP, #+12]
     12            key_inittype.GPIO_Isr = NULL;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9005             STR      R0,[SP, #+20]
     13            LPLD_GPIO_Init(key_inittype);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
     14            
     15            
     16            key_inittype.GPIO_PTx = PTB;
   \   0000002E   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000030   0x9001             STR      R0,[SP, #+4]
     17            key_inittype.GPIO_Pins = GPIO_Pin16 | GPIO_Pin11 | GPIO_Pin10 | GPIO_Pin9; 
   \   00000032   0xF45F 0x3087      MOVS     R0,#+69120
   \   00000036   0x9002             STR      R0,[SP, #+8]
     18            key_inittype.GPIO_Dir = DIR_INPUT;        //输入
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     19            key_inittype.GPIO_PinControl = INPUT_PULL_UP | IRQC_DIS; //上拉 下降沿触发外部中断
   \   0000003E   0x2003             MOVS     R0,#+3
   \   00000040   0x9003             STR      R0,[SP, #+12]
     20            key_inittype.GPIO_Isr = NULL;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9005             STR      R0,[SP, #+20]
     21            LPLD_GPIO_Init(key_inittype);
   \   00000046   0xA901             ADD      R1,SP,#+4
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x2214             MOVS     R2,#+20
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_GPIO_Init
     22            
     23            key_inittype.GPIO_PTx = PTD;//启停线检测
   \   00000058   0x....             LDR.N    R0,??DataTable2_1  ;; 0x400ff0c0
   \   0000005A   0x9001             STR      R0,[SP, #+4]
     24            key_inittype.GPIO_Pins = GPIO_Pin1 | GPIO_Pin5 | GPIO_Pin6 ;
   \   0000005C   0x2062             MOVS     R0,#+98
   \   0000005E   0x9002             STR      R0,[SP, #+8]
     25            key_inittype.GPIO_Dir =DIR_INPUT;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xF88D 0x0010      STRB     R0,[SP, #+16]
     26            key_inittype.GPIO_PinControl = INPUT_PULL_UP ;//内部上拉/下降沿触发外部中断
   \   00000066   0x2003             MOVS     R0,#+3
   \   00000068   0x9003             STR      R0,[SP, #+12]
     27            key_inittype.GPIO_Isr = NULL;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x9005             STR      R0,[SP, #+20]
     28            LPLD_GPIO_Init(key_inittype);
   \   0000006E   0xA901             ADD      R1,SP,#+4
   \   00000070   0xB084             SUB      SP,SP,#+16
   \   00000072   0x4668             MOV      R0,SP
   \   00000074   0x2214             MOVS     R2,#+20
   \   00000076   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007A   0xBC0F             POP      {R0-R3}
   \   0000007C   0x.... 0x....      BL       LPLD_GPIO_Init
     29          
     30          //  key_inittype.GPIO_PTx = PTD;//中断时间检测
     31          //  key_inittype.GPIO_Pins = GPIO_Pin1;
     32          //  key_inittype.GPIO_Dir = DIR_OUTPUT;
     33          //  key_inittype.GPIO_PinControl = OUTPUT_L ;//内部上拉/下降沿触发外部中断
     34          //  key_inittype.GPIO_Isr = NULL;
     35          //  LPLD_GPIO_Init(key_inittype);
     36          
     37          }
   \   00000080   0xB007             ADD      SP,SP,#+28
   \   00000082   0xBD00             POP      {PC}             ;; return
     38          
     39          

   \                                 In section .text, align 2, keep-with-next
     40          uint8 wait_key()
     41          {
   \                     wait_key: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     42            
     43            if ( !KEY_UP )
   \   00000002   0x....             LDR.N    R0,??DataTable2_2  ;; 0x43fe0a44
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD116             BNE.N    ??wait_key_0
     44            {
     45              BZ_ON;
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x210A             MOVS     R1,#+10
   \   0000000E   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   00000010   0x.... 0x....      BL       LPLD_GPIO_Output_b
     46              LPLD_LPTMR_DelayMs(1);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     47              if ( !KEY_UP )
   \   0000001A   0x....             LDR.N    R0,??DataTable2_2  ;; 0x43fe0a44
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD10A             BNE.N    ??wait_key_0
     48              {
     49                while( !KEY_UP );
   \                     ??wait_key_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable2_2  ;; 0x43fe0a44
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD0FB             BEQ.N    ??wait_key_1
     50                BZ_OFF;
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x210A             MOVS     R1,#+10
   \   0000002E   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Output_b
     51                return ( 1 );
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE071             B.N      ??wait_key_2
     52              }
     53            }
     54              if ( !KEY_LEFT )
   \                     ??wait_key_0: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable2_4  ;; 0x43fe0a5c
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD116             BNE.N    ??wait_key_3
     55            {
     56              BZ_ON;
   \   00000040   0x2201             MOVS     R2,#+1
   \   00000042   0x210A             MOVS     R1,#+10
   \   00000044   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   00000046   0x.... 0x....      BL       LPLD_GPIO_Output_b
     57              LPLD_LPTMR_DelayMs(1);
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     58              if ( !KEY_LEFT )
   \   00000050   0x....             LDR.N    R0,??DataTable2_4  ;; 0x43fe0a5c
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD10A             BNE.N    ??wait_key_3
     59              {
     60                while( !KEY_LEFT );
   \                     ??wait_key_4: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable2_4  ;; 0x43fe0a5c
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD0FB             BEQ.N    ??wait_key_4
     61                BZ_OFF;
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0x210A             MOVS     R1,#+10
   \   00000064   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   00000066   0x.... 0x....      BL       LPLD_GPIO_Output_b
     62                return ( 2 );
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0xE056             B.N      ??wait_key_2
     63              }
     64            }
     65              if ( !KEY_RIGHT )
   \                     ??wait_key_3: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable2_5  ;; 0x43fe0a54
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD116             BNE.N    ??wait_key_5
     66            {
     67              BZ_ON;
   \   00000076   0x2201             MOVS     R2,#+1
   \   00000078   0x210A             MOVS     R1,#+10
   \   0000007A   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   0000007C   0x.... 0x....      BL       LPLD_GPIO_Output_b
     68              LPLD_LPTMR_DelayMs(1);
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     69              if ( !KEY_RIGHT )
   \   00000086   0x....             LDR.N    R0,??DataTable2_5  ;; 0x43fe0a54
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD10A             BNE.N    ??wait_key_5
     70              {  
     71                while( !KEY_RIGHT );
   \                     ??wait_key_6: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable2_5  ;; 0x43fe0a54
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD0FB             BEQ.N    ??wait_key_6
     72                BZ_OFF;
   \   00000096   0x2200             MOVS     R2,#+0
   \   00000098   0x210A             MOVS     R1,#+10
   \   0000009A   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   0000009C   0x.... 0x....      BL       LPLD_GPIO_Output_b
     73                return ( 3 );
   \   000000A0   0x2003             MOVS     R0,#+3
   \   000000A2   0xE03B             B.N      ??wait_key_2
     74              }
     75            }
     76              if ( !KEY_DOWN )
   \                     ??wait_key_5: (+1)
   \   000000A4   0x....             LDR.N    R0,??DataTable2_6  ;; 0x43fe0a58
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD116             BNE.N    ??wait_key_7
     77            {
     78              BZ_ON;
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0x210A             MOVS     R1,#+10
   \   000000B0   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   000000B2   0x.... 0x....      BL       LPLD_GPIO_Output_b
     79              LPLD_LPTMR_DelayMs(1);
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     80              if ( !KEY_DOWN)
   \   000000BC   0x....             LDR.N    R0,??DataTable2_6  ;; 0x43fe0a58
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD10A             BNE.N    ??wait_key_7
     81              {
     82                while( !KEY_DOWN );
   \                     ??wait_key_8: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable2_6  ;; 0x43fe0a58
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD0FB             BEQ.N    ??wait_key_8
     83                BZ_OFF;
   \   000000CC   0x2200             MOVS     R2,#+0
   \   000000CE   0x210A             MOVS     R1,#+10
   \   000000D0   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   000000D2   0x.... 0x....      BL       LPLD_GPIO_Output_b
     84                return ( 4 );
   \   000000D6   0x2004             MOVS     R0,#+4
   \   000000D8   0xE020             B.N      ??wait_key_2
     85              }
     86            }
     87              if ( !KEY_CLICK )
   \                     ??wait_key_7: (+1)
   \   000000DA   0x....             LDR.N    R0,??DataTable2_7  ;; 0x43fe0a50
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD116             BNE.N    ??wait_key_9
     88            {
     89              BZ_ON;
   \   000000E2   0x2201             MOVS     R2,#+1
   \   000000E4   0x210A             MOVS     R1,#+10
   \   000000E6   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   000000E8   0x.... 0x....      BL       LPLD_GPIO_Output_b
     90              LPLD_LPTMR_DelayMs(1);
   \   000000EC   0x2001             MOVS     R0,#+1
   \   000000EE   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     91              if ( !KEY_CLICK )
   \   000000F2   0x....             LDR.N    R0,??DataTable2_7  ;; 0x43fe0a50
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD10A             BNE.N    ??wait_key_9
     92              {
     93                while( !KEY_CLICK );
   \                     ??wait_key_10: (+1)
   \   000000FA   0x....             LDR.N    R0,??DataTable2_7  ;; 0x43fe0a50
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD0FB             BEQ.N    ??wait_key_10
     94                BZ_OFF;
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0x210A             MOVS     R1,#+10
   \   00000106   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   00000108   0x.... 0x....      BL       LPLD_GPIO_Output_b
     95                return ( 5 );
   \   0000010C   0x2005             MOVS     R0,#+5
   \   0000010E   0xE005             B.N      ??wait_key_2
     96              }
     97            }
     98            BZ_OFF;
   \                     ??wait_key_9: (+1)
   \   00000110   0x2200             MOVS     R2,#+0
   \   00000112   0x210A             MOVS     R1,#+10
   \   00000114   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff100
   \   00000116   0x.... 0x....      BL       LPLD_GPIO_Output_b
     99            return 0;
   \   0000011A   0x2000             MOVS     R0,#+0
   \                     ??wait_key_2: (+1)
   \   0000011C   0xBD02             POP      {R1,PC}          ;; return
    100          }
    101          

   \                                 In section .bss, align 1
    102          uint8 sw = 0;
   \                     sw:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    103          void read_sw()
    104          {
   \                     read_sw: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105            sw = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable2_8
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    106            sw |= LPLD_GPIO_Input_b(PTB,16);
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   0000000C   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000010   0x....             LDR.N    R1,??DataTable2_8
   \   00000012   0x7809             LDRB     R1,[R1, #+0]
   \   00000014   0x4308             ORRS     R0,R0,R1
   \   00000016   0x....             LDR.N    R1,??DataTable2_8
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    107            sw <<= 1;
   \   0000001A   0x....             LDR.N    R0,??DataTable2_8
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x0040             LSLS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable2_8
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    108            sw |= LPLD_GPIO_Input_b(PTB,11);
   \   00000024   0x210B             MOVS     R1,#+11
   \   00000026   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000002C   0x....             LDR.N    R1,??DataTable2_8
   \   0000002E   0x7809             LDRB     R1,[R1, #+0]
   \   00000030   0x4308             ORRS     R0,R0,R1
   \   00000032   0x....             LDR.N    R1,??DataTable2_8
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    109            sw <<= 1;
   \   00000036   0x....             LDR.N    R0,??DataTable2_8
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x0040             LSLS     R0,R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable2_8
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    110            sw |= LPLD_GPIO_Input_b(PTB,10);
   \   00000040   0x210A             MOVS     R1,#+10
   \   00000042   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000044   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000048   0x....             LDR.N    R1,??DataTable2_8
   \   0000004A   0x7809             LDRB     R1,[R1, #+0]
   \   0000004C   0x4308             ORRS     R0,R0,R1
   \   0000004E   0x....             LDR.N    R1,??DataTable2_8
   \   00000050   0x7008             STRB     R0,[R1, #+0]
    111            sw <<= 1;
   \   00000052   0x....             LDR.N    R0,??DataTable2_8
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x0040             LSLS     R0,R0,#+1
   \   00000058   0x....             LDR.N    R1,??DataTable2_8
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    112            sw |= LPLD_GPIO_Input_b(PTB,9);
   \   0000005C   0x2109             MOVS     R1,#+9
   \   0000005E   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000060   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000064   0x....             LDR.N    R1,??DataTable2_8
   \   00000066   0x7809             LDRB     R1,[R1, #+0]
   \   00000068   0x4308             ORRS     R0,R0,R1
   \   0000006A   0x....             LDR.N    R1,??DataTable2_8
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
    113            
    114                ramp_Enable = LPLD_GPIO_Input_b(PTB,16);
   \   0000006E   0x2110             MOVS     R1,#+16
   \   00000070   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000072   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000076   0x....             LDR.N    R1,??DataTable2_9
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    115              //  cross_Enable = LPLD_GPIO_Input_b(PTB,11);
    116              speed_up_Enable = LPLD_GPIO_Input_b(PTB,11);
   \   0000007A   0x210B             MOVS     R1,#+11
   \   0000007C   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   0000007E   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000082   0x....             LDR.N    R1,??DataTable2_10
   \   00000084   0x7008             STRB     R0,[R1, #+0]
    117              GUI.para.endline = LPLD_GPIO_Input_b(PTB,10);
   \   00000086   0x210A             MOVS     R1,#+10
   \   00000088   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   0000008A   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000008E   0x....             LDR.N    R1,??DataTable2_11
   \   00000090   0x7088             STRB     R0,[R1, #+2]
    118              flag_bihuan = LPLD_GPIO_Input_b(PTB,9);
   \   00000092   0x2109             MOVS     R1,#+9
   \   00000094   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000096   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000009A   0x....             LDR.N    R1,??DataTable2_12
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    119          
    120          }
   \   0000009E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x43FE0A44         DC32     0x43fe0a44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x43FE0A5C         DC32     0x43fe0a5c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x43FE0A54         DC32     0x43fe0a54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x43FE0A58         DC32     0x43fe0a58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x43FE0A50         DC32     0x43fe0a50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     sw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ramp_Enable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     speed_up_Enable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     GUI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     flag_bihuan
    121          
    122          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   key_init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   read_sw
         8   -> LPLD_GPIO_Input_b
       8   wait_key
         8   -> LPLD_GPIO_Output_b
         8   -> LPLD_LPTMR_DelayMs


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     132  key_init
     160  read_sw
       1  sw
     286  wait_key

 
   1 byte  in section .bss
 630 bytes in section .text
 
 630 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
