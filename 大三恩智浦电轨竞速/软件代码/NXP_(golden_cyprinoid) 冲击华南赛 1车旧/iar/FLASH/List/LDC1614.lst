###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        08/Aug/2016  13:02:55
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\app\SENSOR\LDC1614.c
#    Command line =  
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\app\SENSOR\LDC1614.c" -D LPLD_K60 -lCN
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -lB
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -o
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\BSP\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\ITAC\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\CTL\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\MAIN\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\SENSOR\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\CPU\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\HW\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\DEV\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\option\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\driver\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\descriptor\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\class\" -On -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\LDC1614.lst
#    Object file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\LDC1614.o
#
###############################################################################

C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid) 冲击华南赛 1车\app\SENSOR\LDC1614.c
      1          /*!
      2          * \file LDC1614.c
      3          *
      4          * Copyright (c) 2014-2015, Texas Instruments Incorporated - http://www.ti.com
      5          * All rights reserved.
      6          */
      7          
      8          //*****************************************************************************
      9          // #includes
     10          //*****************************************************************************
     11          #include "include.h"
     12          
     13          

   \                                 In section .bss, align 4
     14          uint32 LDC_data[4] = {0};
   \                     LDC_data:
   \   00000000                      DS8 16

   \                                 In section .bss, align 2
     15          uint16 LDC_STATUS = 0;
   \                     LDC_STATUS:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     16          uint8 LDC_flag[4] = {0};
   \                     LDC_flag:
   \   00000000                      DS8 4
     17          
     18          
     19          
     20          
     21          //*****************************************************************************
     22          // LDC1614 Library functions
     23          //*****************************************************************************

   \                                 In section .text, align 2, keep-with-next
     24          void LDC1614_sleep(void)
     25          {
   \                     LDC1614_sleep: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     26           
     27            LDC_SEND(CONFIG,0x3e01);//内部时钟改为外部，，可以尝试使用自动振幅校准0x2301,在低精度下使用，下同
   \   00000002   0xF643 0x6101      MOVW     R1,#+15873
   \   00000006   0x201A             MOVS     R0,#+26
   \   00000008   0x.... 0x....      BL       LDC_SEND
     28          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void LDC1614_init(void)
     31          {
   \                     LDC1614_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32            LDC_SEND(REF_COUNT_CH0,0x0b54);//转化时间，18ms
   \   00000002   0xF640 0x3154      MOVW     R1,#+2900
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       LDC_SEND
     33            
     34            
     35            LDC_SEND(REF_COUNT_CH1,0x0b54);
   \   0000000C   0xF640 0x3154      MOVW     R1,#+2900
   \   00000010   0x2009             MOVS     R0,#+9
   \   00000012   0x.... 0x....      BL       LDC_SEND
     36            
     37            
     38            LDC_SEND(REF_COUNT_CH2,0x0b54);
   \   00000016   0xF640 0x3154      MOVW     R1,#+2900
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       LDC_SEND
     39            
     40            
     41            LDC_SEND(REF_COUNT_CH3,0x0400);
   \   00000020   0xF44F 0x6180      MOV      R1,#+1024
   \   00000024   0x200B             MOVS     R0,#+11
   \   00000026   0x.... 0x....      BL       LDC_SEND
     42            
     43            
     44            LDC_SEND(OFFSET_CH0,0x0000);//频率偏置f offset 为0
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x200C             MOVS     R0,#+12
   \   0000002E   0x.... 0x....      BL       LDC_SEND
     45            
     46          
     47            LDC_SEND(OFFSET_CH1,0x0000);
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x200D             MOVS     R0,#+13
   \   00000036   0x.... 0x....      BL       LDC_SEND
     48            
     49          
     50            LDC_SEND(OFFSET_CH2,0x0000);
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x200E             MOVS     R0,#+14
   \   0000003E   0x.... 0x....      BL       LDC_SEND
     51            
     52          
     53            LDC_SEND(OFFSET_CH3,0x0000);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x200F             MOVS     R0,#+15
   \   00000046   0x.... 0x....      BL       LDC_SEND
     54            
     55          
     56            
     57            LDC_SEND(SETTLECOUNT_CH0,0x0400);//0x0400数字大保证稳定时间长
   \   0000004A   0xF44F 0x6180      MOV      R1,#+1024
   \   0000004E   0x2010             MOVS     R0,#+16
   \   00000050   0x.... 0x....      BL       LDC_SEND
     58            
     59          
     60            
     61            LDC_SEND(SETTLECOUNT_CH1,0x0400);
   \   00000054   0xF44F 0x6180      MOV      R1,#+1024
   \   00000058   0x2011             MOVS     R0,#+17
   \   0000005A   0x.... 0x....      BL       LDC_SEND
     62            
     63          
     64            
     65            LDC_SEND(SETTLECOUNT_CH2,0x0400);
   \   0000005E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000062   0x2012             MOVS     R0,#+18
   \   00000064   0x.... 0x....      BL       LDC_SEND
     66            
     67          
     68            
     69            LDC_SEND(SETTLECOUNT_CH3,0x0400);
   \   00000068   0xF44F 0x6180      MOV      R1,#+1024
   \   0000006C   0x2013             MOVS     R0,#+19
   \   0000006E   0x.... 0x....      BL       LDC_SEND
     70            
     71          
     72            
     73            LDC_SEND(CLOCK_DIVIDERS_CH0,0x1001);//分频系数n=1，m=8，晶振频率40MHZ，传感器频率0.11MHZ
   \   00000072   0xF241 0x0101      MOVW     R1,#+4097
   \   00000076   0x2014             MOVS     R0,#+20
   \   00000078   0x.... 0x....      BL       LDC_SEND
     74            
     75          
     76            
     77            LDC_SEND(CLOCK_DIVIDERS_CH1,0x1001);
   \   0000007C   0xF241 0x0101      MOVW     R1,#+4097
   \   00000080   0x2015             MOVS     R0,#+21
   \   00000082   0x.... 0x....      BL       LDC_SEND
     78            
     79          
     80            
     81            LDC_SEND(CLOCK_DIVIDERS_CH2,0x1001);/*attention*/  //为什么这个之前不一样
   \   00000086   0xF241 0x0101      MOVW     R1,#+4097
   \   0000008A   0x2016             MOVS     R0,#+22
   \   0000008C   0x.... 0x....      BL       LDC_SEND
     82            
     83          
     84            
     85            LDC_SEND(CLOCK_DIVIDERS_CH3,0x1001);
   \   00000090   0xF241 0x0101      MOVW     R1,#+4097
   \   00000094   0x2017             MOVS     R0,#+23
   \   00000096   0x.... 0x....      BL       LDC_SEND
     86            
     87          
     88            
     89            LDC_SEND(ERROR_CONFIG,0xF801);//只读
   \   0000009A   0xF64F 0x0101      MOVW     R1,#+63489
   \   0000009E   0x2019             MOVS     R0,#+25
   \   000000A0   0x.... 0x....      BL       LDC_SEND
     90            
     91          
     92            
     93            LDC_SEND(CONFIG,0x3e01);//0x3601
   \   000000A4   0xF643 0x6101      MOVW     R1,#+15873
   \   000000A8   0x201A             MOVS     R0,#+26
   \   000000AA   0x.... 0x....      BL       LDC_SEND
     94            
     95          
     96            
     97            LDC_SEND(MUX_CONFIG,0xa209);//修改脉冲滤波，，大于传感器最大频率0xc201
   \   000000AE   0xF24A 0x2109      MOVW     R1,#+41481
   \   000000B2   0x201B             MOVS     R0,#+27
   \   000000B4   0x.... 0x....      BL       LDC_SEND
     98            
     99          
    100            
    101            LDC_SEND(DRIVE_CURRENT_CH0,0x3180);//线圈105*65   18c0 2100 1080
   \   000000B8   0xF44F 0x5146      MOV      R1,#+12672
   \   000000BC   0x201E             MOVS     R0,#+30
   \   000000BE   0x.... 0x....      BL       LDC_SEND
    102            
    103          
    104            
    105            LDC_SEND(DRIVE_CURRENT_CH1,0x39c0);
   \   000000C2   0xF44F 0x5167      MOV      R1,#+14784
   \   000000C6   0x201F             MOVS     R0,#+31
   \   000000C8   0x.... 0x....      BL       LDC_SEND
    106            
    107          
    108            
    109            LDC_SEND(DRIVE_CURRENT_CH2,0x3180);
   \   000000CC   0xF44F 0x5146      MOV      R1,#+12672
   \   000000D0   0x2020             MOVS     R0,#+32
   \   000000D2   0x.... 0x....      BL       LDC_SEND
    110            
    111          
    112            
    113            LDC_SEND(DRIVE_CURRENT_CH3,0x8800);
   \   000000D6   0xF44F 0x4108      MOV      R1,#+34816
   \   000000DA   0x2021             MOVS     R0,#+33
   \   000000DC   0x.... 0x....      BL       LDC_SEND
    114            
    115          }
   \   000000E0   0xBD01             POP      {R0,PC}          ;; return
    116          

   \                                 In section .text, align 2, keep-with-next
    117          void LDC1614_reset(void)
    118          {
   \                     LDC1614_reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    119            LDC_SEND(RESET_DEV,0x8000);
   \   00000002   0xF44F 0x4100      MOV      R1,#+32768
   \   00000006   0x201C             MOVS     R0,#+28
   \   00000008   0x.... 0x....      BL       LDC_SEND
    120          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    121          

   \                                 In section .text, align 2, keep-with-next
    122          void LDC1614_start_meas(void)
    123          {
   \                     LDC1614_start_meas: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    124            LDC_SEND(CONFIG,0x1e01);//内部时钟改为外部
   \   00000002   0xF641 0x6101      MOVW     R1,#+7681
   \   00000006   0x201A             MOVS     R0,#+26
   \   00000008   0x.... 0x....      BL       LDC_SEND
    125          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void LDC1614_read_meas(void)//不再读ch3
    128          {
   \                     LDC1614_read_meas: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    129            uint16 temp = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    130          
    131            temp = LDC_READ(DATA_MSB_CH0);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LDC_READ
   \   0000000A   0x0004             MOVS     R4,R0
    132            LDC_data[0] = ( (0x0FFF & temp) << 16 );
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   00000010   0x0D00             LSRS     R0,R0,#+20
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0x....             LDR.N    R1,??DataTable1
   \   00000016   0x6008             STR      R0,[R1, #+0]
    133            LDC_flag[0] = ( 0xF000 & temp ) >> 8; 
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x1220             ASRS     R0,R4,#+8
   \   0000001C   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000020   0x....             LDR.N    R1,??DataTable1_1
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    134            
    135            LDC_data[0] |= LDC_READ(DATA_LSB_CH0) ;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       LDC_READ
   \   0000002A   0x....             LDR.N    R1,??DataTable1
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0x4308             ORRS     R0,R0,R1
   \   00000032   0x....             LDR.N    R1,??DataTable1
   \   00000034   0x6008             STR      R0,[R1, #+0]
    136            
    137          
    138            
    139            temp = LDC_READ(DATA_MSB_CH1);
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x.... 0x....      BL       LDC_READ
   \   0000003C   0x0004             MOVS     R4,R0
    140            LDC_data[1] = ( ( 0x0FFF & temp ) << 16 );
   \   0000003E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   00000042   0x0D00             LSRS     R0,R0,#+20
   \   00000044   0x0400             LSLS     R0,R0,#+16
   \   00000046   0x....             LDR.N    R1,??DataTable1
   \   00000048   0x6048             STR      R0,[R1, #+4]
    141            LDC_flag[1] = ( 0xF000 & temp ) >> 8;
   \   0000004A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004C   0x1220             ASRS     R0,R4,#+8
   \   0000004E   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000052   0x....             LDR.N    R1,??DataTable1_1
   \   00000054   0x7048             STRB     R0,[R1, #+1]
    142            
    143            LDC_data[1] |= LDC_READ(DATA_LSB_CH1) ;
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x.... 0x....      BL       LDC_READ
   \   0000005C   0x....             LDR.N    R1,??DataTable1
   \   0000005E   0x6849             LDR      R1,[R1, #+4]
   \   00000060   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000062   0x4308             ORRS     R0,R0,R1
   \   00000064   0x....             LDR.N    R1,??DataTable1
   \   00000066   0x6048             STR      R0,[R1, #+4]
    144            
    145          
    146          
    147            temp = LDC_READ(DATA_MSB_CH2);
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x.... 0x....      BL       LDC_READ
   \   0000006E   0x0004             MOVS     R4,R0
    148            LDC_data[2] = ( 0x0FFF & temp ) << 16 ;
   \   00000070   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000072   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   00000074   0x0D00             LSRS     R0,R0,#+20
   \   00000076   0x0400             LSLS     R0,R0,#+16
   \   00000078   0x....             LDR.N    R1,??DataTable1
   \   0000007A   0x6088             STR      R0,[R1, #+8]
    149            LDC_flag[2] = ( 0xF000 & temp ) >> 8;
   \   0000007C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007E   0x1220             ASRS     R0,R4,#+8
   \   00000080   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000084   0x....             LDR.N    R1,??DataTable1_1
   \   00000086   0x7088             STRB     R0,[R1, #+2]
    150          
    151            
    152            LDC_data[2] |= LDC_READ(DATA_LSB_CH2) ;
   \   00000088   0x2005             MOVS     R0,#+5
   \   0000008A   0x.... 0x....      BL       LDC_READ
   \   0000008E   0x....             LDR.N    R1,??DataTable1
   \   00000090   0x6889             LDR      R1,[R1, #+8]
   \   00000092   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000094   0x4308             ORRS     R0,R0,R1
   \   00000096   0x....             LDR.N    R1,??DataTable1
   \   00000098   0x6088             STR      R0,[R1, #+8]
    153           
    154            
    155            /*temp = LDC_READ(DATA_MSB_CH3);
    156            LDC_data[3] = ( 0x0FFF & temp ) << 16 ;
    157            LDC_flag[3] = ( 0xF000 & temp ) >> 8 ;
    158            
    159          
    160            
    161            LDC_data[3] |= LDC_READ(DATA_LSB_CH3) ;
    162            */
    163          
    164           // LDC1614_status();
    165            
    166          }
   \   0000009A   0xBD10             POP      {R4,PC}          ;; return
    167          

   \                                 In section .text, align 2, keep-with-next
    168          void LDC1614_status(void)
    169          {
   \                     LDC1614_status: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    170            LDC_STATUS = LDC_READ(0x18);
   \   00000002   0x2018             MOVS     R0,#+24
   \   00000004   0x.... 0x....      BL       LDC_READ
   \   00000008   0x....             LDR.N    R1,??DataTable1_2
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    171          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     LDC_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     LDC_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     LDC_STATUS

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LDC1614_init
         8   -> LDC_SEND
       8   LDC1614_read_meas
         8   -> LDC_READ
       8   LDC1614_reset
         8   -> LDC_SEND
       8   LDC1614_sleep
         8   -> LDC_SEND
       8   LDC1614_start_meas
         8   -> LDC_SEND
       8   LDC1614_status
         8   -> LDC_READ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
     226  LDC1614_init
     156  LDC1614_read_meas
      14  LDC1614_reset
      14  LDC1614_sleep
      14  LDC1614_start_meas
      14  LDC1614_status
       2  LDC_STATUS
      16  LDC_data
       4  LDC_flag

 
  22 bytes in section .bss
 450 bytes in section .text
 
 450 bytes of CODE memory
  22 bytes of DATA memory

Errors: none
Warnings: none
