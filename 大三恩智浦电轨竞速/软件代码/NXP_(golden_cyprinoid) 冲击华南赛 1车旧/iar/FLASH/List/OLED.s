///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       08/Aug/2016  13:02:57
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\app\ITAC\OLED.c
//    Command line =  
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\app\ITAC\OLED.c" -D LPLD_K60 -lCN
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\FLASH\List\" -lB
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\FLASH\List\" -o
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\FLASH\Obj\" --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
//        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
//        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.0\arm\INC\c\DLib_Config_Normal.h" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\app\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\app\BSP\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\app\ITAC\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\app\CTL\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\app\MAIN\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\app\SENSOR\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\CPU\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\common\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\LPLD\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\LPLD\HW\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\LPLD\DEV\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Ports\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Source\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\FatFs\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\FatFs\option\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\USB\common\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\USB\driver\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\USB\descriptor\" -I
//        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\..\..\..\lib\USB\class\" -On -I "C:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
//        ARM_MATH_CM4
//    List file    =  
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
//        冲击华南赛 1车\iar\FLASH\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN LPLD_GPIO_Output_b
        EXTERN __aeabi_cdcmple
        EXTERN __aeabi_cdrcmple
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_i2d
        EXTERN __aeabi_memcpy4

        PUBLIC Dly_ms
        PUBLIC Draw_BMP
        PUBLIC Draw_Landzo
        PUBLIC Draw_LibLogo
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LANDZO_LOGO
        PUBLIC LIBLOGO60x58
        PUBLIC OLEDIO_init
        PUBLIC OLED_CLS
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Fill
        PUBLIC OLED_Init
        PUBLIC OLED_P14x16Str
        PUBLIC OLED_P6x8Char
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P8x16Char
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print
        PUBLIC OLED_PrintFloat
        PUBLIC OLED_PrintInt16
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Rectangle
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC lanzhou96x64
        PUBLIC mushroom
        PUBLIC sky1
        PUBLIC sky2
        PUBLIC sky3

// C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid) 冲击华南赛 1车\app\ITAC\OLED.c
//    1 #include "common.h"
//    2 #include "include.h"
//    3 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//    4 void OLEDIO_init()
//    5 {
OLEDIO_init:
        PUSH     {LR}
        SUB      SP,SP,#+28
//    6   GPIO_InitTypeDef OLEDIO_inittype;
//    7   
//    8   OLEDIO_inittype.GPIO_PTx = PTE;
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        STR      R0,[SP, #+4]
//    9   OLEDIO_inittype.GPIO_Pins = GPIO_Pin24 | GPIO_Pin25 | GPIO_Pin26| GPIO_Pin27 | GPIO_Pin28;
        MOVS     R0,#+520093696
        STR      R0,[SP, #+8]
//   10   OLEDIO_inittype.GPIO_PinControl = INPUT_PULL_DIS;
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
//   11   OLEDIO_inittype.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        STRB     R0,[SP, #+16]
//   12   OLEDIO_inittype.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        STRB     R0,[SP, #+17]
//   13   OLEDIO_inittype.GPIO_Isr = NULL;
        MOVS     R0,#+0
        STR      R0,[SP, #+20]
//   14   
//   15   LPLD_GPIO_Init(OLEDIO_inittype);
        ADD      R1,SP,#+4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   16  
//   17 }
        ADD      SP,SP,#+28
        POP      {PC}             ;; return
//   18 
//   19 
//   20 /*4线SPI使用说明：
//   21 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   22 VCC 供内部逻辑电压 1.8~6V
//   23 GND 地
//   24 
//   25 BS0 低电平
//   26 BS1 低电平
//   27 BS2 低电平
//   28 
//   29 CS  片选管脚
//   30 DC  命令数据选择管脚
//   31 RES 模块复位管脚
//   32 D0（SCLK） ，时钟脚，由MCU控制
//   33 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   34 
//   35 D2 悬空
//   36 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   37 RD  低电平 ，也可悬空，但最好设为低电平
//   38 RW  低电平 ，也可悬空，但最好设为低电平
//   39 RD  低电平 ，也可悬空，但最好设为低电平
//   40 */
//   41 
//   42 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   43 uint8 mushroom[] = 
mushroom:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 96, 112
        DC8 48, 56, 56, 24, 28, 12, 12, 12, 12, 4, 4, 4, 4, 12, 12, 12, 8, 24
        DC8 56, 48, 112, 96, 192, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 112
        DC8 28, 6, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 7, 15, 14, 24, 48, 112, 224, 192
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224
        DC8 48, 24, 14, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 1, 1, 3, 3, 3, 2, 6, 4, 12, 24, 240, 192, 240, 252, 254, 15
        DC8 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 128, 192, 192, 224, 224, 224, 224, 240, 240, 112
        DC8 112, 120, 60, 60, 60, 28, 30, 14, 30, 56, 248, 248, 248, 126, 126
        DC8 158, 22, 38, 238, 254, 254, 254, 255, 127, 255, 29, 113, 192, 128
        DC8 0, 0, 0, 0, 0, 224, 248, 252, 14, 15, 14, 14, 14, 12, 12, 12, 12
        DC8 14, 14, 14, 6, 6, 118, 255, 255, 255, 115, 3, 3, 3, 1, 1, 1, 64
        DC8 192, 128, 128, 128, 192, 128, 96, 0, 0, 30, 31, 31, 31, 14, 3, 7
        DC8 14, 30, 62, 127, 207, 143, 7, 7, 3, 1, 0, 63, 0, 0, 0, 1, 1, 3, 3
        DC8 2, 6, 255, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 3, 254, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 7, 31, 120, 224, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 128, 192, 96, 56, 31, 7, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 12, 24, 24, 48, 32, 96, 96
        DC8 64, 192, 192, 192, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
        DC8 128, 128, 192, 192, 192, 64, 64, 96, 96, 32, 32, 48, 16, 24, 8, 12
        DC8 4, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   44 {
//   45   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
//   46   0xC0,0xE0,0x60,0x70,0x30,0x38,0x38,0x18,0x1C,0x0C,0x0C,0x0C,0x0C,0x04,0x04,0x04,
//   47   0x04,0x0C,0x0C,0x0C,0x08,0x18,0x38,0x30,0x70,0x60,0xC0,0xC0,0x80,0x00,0x00,0x00,
//   48   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   49   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x70,0x1C,0x06,
//   50   0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   51   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,
//   52   0x0F,0x0E,0x18,0x30,0x70,0xE0,0xC0,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//   53   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0x30,0x18,0x0E,0x03,0x01,0x00,
//   54   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   55   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   56   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x03,0x03,0x02,0x06,
//   57   0x04,0x0C,0x18,0xF0,0xC0,0xF0,0xFC,0xFE,0x0F,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
//   58   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   59   0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xE0,0xE0,0xE0,0xE0,0xF0,0xF0,0x70,0x70,
//   60   0x78,0x3C,0x3C,0x3C,0x1C,0x1E,0x0E,0x1E,0x38,0xF8,0xF8,0xF8,0x7E,0x7E,0x9E,0x16,
//   61   0x26,0xEE,0xFE,0xFE,0xFE,0xFF,0x7F,0xFF,0x1D,0x71,0xC0,0x80,0x00,0x00,0x00,0x00,
//   62   0x00,0xE0,0xF8,0xFC,0x0E,0x0F,0x0E,0x0E,0x0E,0x0C,0x0C,0x0C,0x0C,0x0E,0x0E,0x0E,
//   63   0x06,0x06,0x76,0xFF,0xFF,0xFF,0x73,0x03,0x03,0x03,0x01,0x01,0x01,0x40,0xC0,0x80,
//   64   0x80,0x80,0xC0,0x80,0x60,0x00,0x00,0x1E,0x1F,0x1F,0x1F,0x0E,0x03,0x07,0x0E,0x1E,
//   65   0x3E,0x7F,0xCF,0x8F,0x07,0x07,0x03,0x01,0x00,0x3F,0x00,0x00,0x00,0x01,0x01,0x03,
//   66   0x03,0x02,0x06,0xFF,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   67   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   68   0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   69   0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   70   0x00,0x00,0x00,0x00,0x00,0x07,0x1F,0x78,0xE0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//   71   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   72   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   73   0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x38,0x1F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
//   74   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x18,
//   75   0x18,0x30,0x20,0x60,0x60,0x40,0xC0,0xC0,0xC0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//   76   0x80,0x80,0x80,0x80,0x80,0xC0,0xC0,0xC0,0x40,0x40,0x60,0x60,0x20,0x20,0x30,0x10,
//   77   0x18,0x08,0x0C,0x04,0x06,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//   78 };
//   79 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   80 uint8 sky1[] =
sky1:
        DATA
        DC8 64, 64, 66, 66, 66, 66, 66, 254, 66, 66, 66, 66, 66, 64, 64, 0, 128
        DC8 128, 64, 32, 16, 12, 3, 0, 3, 12, 16, 32, 64, 128, 128, 0
//   81 {
//   82   0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x40,0x40,0x00,
//   83   0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00/*"?",0*/
//   84 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   85 uint8 sky2[] =
sky2:
        DATA
        DC8 0, 254, 34, 90, 134, 0, 32, 34, 34, 34, 226, 34, 34, 34, 32, 0, 0
        DC8 255, 4, 8, 7, 16, 12, 3, 64, 128, 127, 0, 1, 6, 24, 0
//   86 {
//   87   0x00,0xFE,0x22,0x5A,0x86,0x00,0x20,0x22,0x22,0x22,0xE2,0x22,0x22,0x22,0x20,0x00,
//   88   0x00,0xFF,0x04,0x08,0x07,0x10,0x0C,0x03,0x40,0x80,0x7F,0x00,0x01,0x06,0x18,0x00/*"?",1*/
//   89 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   90 uint8 sky3[] =
sky3:
        DATA
        DC8 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 " "

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_1:
        DATA
        DC8 "Error!"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "-"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "+"
//   91 {
//   92   0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   93   0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00/*"!",2*/
//   94 };
//   95 
//   96 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   97 const uint8 F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   98 {
//   99   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//  100   { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//  101   { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//  102   { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//  103   { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//  104   { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//  105   { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//  106   { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//  107   { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//  108   { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//  109   { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//  110   { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//  111   { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//  112   { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//  113   { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//  114   { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//  115   { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//  116   { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//  117   { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//  118   { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//  119   { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//  120   { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//  121   { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//  122   { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  123   { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  124   { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  125   { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  126   { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  127   { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  128   { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  129   { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  130   { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  131   { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  132   { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  133   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  134   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  135   { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  136   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  137   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  138   { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  139   { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  140   { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  141   { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  142   { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  143   { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  144   { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  145   { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  146   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  147   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  148   { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  149   { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  150   { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  151   { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  152   { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  153   { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  154   { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  155   { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  156   { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  157   { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  158   { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  159   { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  160   { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  161   { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  162   { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  163   { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  164   { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  165   { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  166   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  167   { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  168   { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  169   { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  170   { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  171   { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  172   { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  173   { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  174   { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  175   { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  176   { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  177   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  178   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  179   { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  180   { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  181   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  182   { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  183   { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  184   { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  185   { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  186   { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  187   { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  188   { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  189   { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  190   { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  191 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  192 const uint8 F14x16_Idx[] =
F14x16_Idx:
        DATA
        DC8 "\277\252\273\267\261\325\273\267\263\277\267\347\266\323\316\344\272\272\300\355\271\244\264\363\321\247"
        DC8 0
//  193 {
//  194   "开环闭环晨风队武汉理工大学"
//  195 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  196 const uint8 F14x16[] = {
F14x16:
        DATA
        DC8 64, 65, 65, 255, 65, 65, 65, 65, 65, 255, 65, 65, 64, 0, 32, 16, 12
        DC8 3, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 68, 68, 252, 68, 68, 2, 130, 66
        DC8 242, 14, 66, 130, 2, 0, 8, 8, 15, 4, 4, 1, 0, 0, 63, 0, 0, 0, 3, 0
        DC8 0, 249, 2, 32, 34, 34, 162, 98, 250, 34, 34, 2, 254, 0, 0, 63, 0, 4
        DC8 2, 1, 8, 8, 15, 0, 32, 32, 63, 0, 68, 68, 252, 68, 68, 2, 130, 66
        DC8 242, 14, 66, 130, 2, 0, 8, 8, 15, 4, 4, 1, 0, 0, 63, 0, 0, 0, 3, 0
        DC8 0, 192, 95, 85, 85, 85, 85, 85, 85, 85, 95, 64, 0, 0, 32, 31, 4, 61
        DC8 37, 37, 5, 13, 21, 21, 45, 36, 36, 0, 0, 255, 1, 9, 17, 33, 193, 49
        DC8 13, 1, 255, 0, 0, 0, 32, 31, 0, 8, 4, 3, 0, 3, 12, 0, 15, 16, 60, 0
        DC8 0, 254, 2, 50, 206, 0, 0, 128, 127, 128, 0, 0, 0, 0, 0, 63, 4, 4
        DC8 35, 16, 12, 3, 0, 3, 12, 16, 32, 0, 16, 146, 18, 18, 242, 146, 146
        DC8 16, 255, 16, 17, 22, 16, 0, 16, 31, 16, 16, 15, 8, 8, 8, 1, 6, 8
        DC8 16, 60, 0, 32, 66, 4, 136, 0, 2, 126, 130, 2, 2, 194, 62, 0, 0, 0
        DC8 24, 6, 1, 32, 16, 8, 5, 2, 5, 8, 16, 32, 0, 68, 68, 252, 68, 0, 254
        DC8 146, 146, 254, 146, 146, 254, 0, 0, 8, 8, 7, 4, 32, 36, 36, 36, 63
        DC8 36, 36, 36, 32, 0, 0, 2, 2, 2, 2, 2, 254, 2, 2, 2, 2, 2, 0, 0, 16
        DC8 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16, 16
        DC8 16, 208, 63, 208, 16, 16, 16, 16, 16, 0, 32, 32, 16, 8, 6, 1, 0, 1
        DC8 6, 8, 16, 32, 32, 0, 56, 8, 73, 74, 72, 73, 74, 72, 204, 74, 9, 8
        DC8 56, 0, 2, 2, 2, 2, 34, 34, 63, 3, 2, 2, 2, 2, 2, 0
//  197   64,65,65,255,65,65,65,65,65,255,65,65,64,0,32,16,
//  198   12,3,0,0,0,0,0,63,0,0,0,0,/*"开",0*/
//  199   
//  200   68,68,252,68,68,2,130,66,242,14,66,130,2,0,8,8,
//  201   15,4,4,1,0,0,63,0,0,0,3,0,/*"环",1*/
//  202   
//  203   0,249,2,32,34,34,162,98,250,34,34,2,254,0,0,63,
//  204   0,4,2,1,8,8,15,0,32,32,63,0,/*"闭",0*/
//  205   
//  206   68,68,252,68,68,2,130,66,242,14,66,130,2,0,8,8,
//  207   15,4,4,1,0,0,63,0,0,0,3,0,/*"环",1*/
//  208   
//  209 0,192,95,85,85,85,85,85,85,85,95,64,0,0,32,31,
//  210 4,61,37,37,5,13,21,21,45,36,36,0,/*"晨",0*/
//  211 
//  212 0,255,1,9,17,33,193,49,13,1,255,0,0,0,32,31,
//  213 0,8,4,3,0,3,12,0,15,16,60,0,/*"风",1*/
//  214 
//  215 0,254,2,50,206,0,0,128,127,128,0,0,0,0,0,63,
//  216 4,4,35,16,12,3,0,3,12,16,32,0,/*"队",2*/
//  217 
//  218 
//  219 16,146,18,18,242,146,146,16,255,16,17,22,16,0,16,31,
//  220 16,16,15,8,8,8,1,6,8,16,60,0,/*"武",0*/
//  221 
//  222 32,66,4,136,0,2,126,130,2,2,194,62,0,0,0,24,
//  223 6,1,32,16,8,5,2,5,8,16,32,0,/*"汉",1*/
//  224 
//  225 68,68,252,68,0,254,146,146,254,146,146,254,0,0,8,8,
//  226 7,4,32,36,36,36,63,36,36,36,32,0,/*"理",2*/
//  227 
//  228 0,2,2,2,2,2,254,2,2,2,2,2,0,0,16,16,
//  229 16,16,16,16,31,16,16,16,16,16,16,0,/*"工",3*/
//  230 
//  231 16,16,16,16,16,208,63,208,16,16,16,16,16,0,32,32,
//  232 16,8,6,1,0,1,6,8,16,32,32,0,/*"大",4*/
//  233 
//  234 56,8,73,74,72,73,74,72,204,74,9,8,56,0,2,2,
//  235 2,2,34,34,63,3,2,2,2,2,2,0,/*"学",5*/
//  236 
//  237   
//  238 };
//  239 
//  240 //======================================================
//  241 // 128X64I液晶底层驱动[8X16]字体库
//  242 // 设计者: powerint
//  243 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  244 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  245 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  246 const uint8 F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  247 {
//  248   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  249   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  250   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  251   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  252   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  253   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  254   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  255   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  256   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  257   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  258   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  259   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  260   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  261   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  262   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  263   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  264   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  265   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  266   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  267   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  268   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  269   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  270   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  271   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  272   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  273   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  274   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  275   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  276   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  277   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  278   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  279   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  280   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  281   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  282   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  283   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  284   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  285   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  286   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  287   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  288   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  289   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  290   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  291   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  292   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  293   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  294   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  295   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  296   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  297   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  298   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  299   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  300   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  301   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  302   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  303   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  304   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  305   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  306   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  307   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  308   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  309   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  310   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  311   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  312   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  313   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  314   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  315   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  316   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  317   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  318   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  319   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  320   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  321   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  322   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  323   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  324   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  325   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  326   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  327   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  328   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  329   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  330   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  331   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  332   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  333   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//uint85
//  334   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  335   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  336   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  337   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  338   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  339   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  340   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  341   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  342   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  343   
//  344 };
//  345 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  346 uint8 lanzhou96x64[768] = {
lanzhou96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 96, 32, 32, 32
        DC8 160, 160, 160, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 96, 96, 96, 96, 224, 112, 112, 96, 96, 240, 112, 96, 96, 96
        DC8 96, 96, 96, 0, 224, 224, 96, 96, 96, 96, 96, 112, 112, 112, 96, 96
        DC8 96, 96, 96, 96, 224, 224, 224, 128, 128, 128, 128, 240, 240, 128
        DC8 128, 128, 128, 128, 128, 128, 0, 0, 48, 48, 48, 48, 48, 48, 176
        DC8 240, 112, 48, 224, 248, 124, 30, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 1, 3, 135, 143, 207, 255, 254, 254, 252, 252, 240, 224, 128, 0, 0
        DC8 0, 0, 0, 0, 0, 63, 0, 255, 0, 0, 8, 14, 31, 58, 98, 194, 2, 2, 2, 0
        DC8 0, 3, 3, 248, 248, 248, 24, 24, 24, 252, 252, 24, 24, 24, 248, 248
        DC8 248, 3, 3, 255, 255, 49, 49, 49, 255, 255, 49, 49, 49, 49, 49, 255
        DC8 255, 0, 24, 24, 24, 24, 24, 30, 63, 255, 248, 24, 24, 255, 255, 0
        DC8 192, 128, 128, 128, 128, 224, 224, 224, 240, 248, 248, 252, 126
        DC8 127, 63, 63, 31, 15, 7, 7, 7, 15, 15, 15, 31, 31, 0, 0, 128, 176
        DC8 176, 191, 183, 179, 179, 179, 191, 191, 179, 179, 191, 191, 179
        DC8 179, 179, 183, 191, 176, 176, 128, 128, 191, 191, 191, 177, 177
        DC8 177, 191, 191, 177, 177, 177, 191, 191, 191, 128, 128, 135, 135
        DC8 134, 134, 134, 191, 191, 182, 182, 182, 182, 182, 183, 183, 176
        DC8 176, 184, 184, 128, 136, 152, 184, 191, 191, 128, 128, 31, 63, 112
        DC8 239, 223, 159, 127, 255, 255, 255, 255, 255, 239, 227, 192, 128, 0
        DC8 128, 0, 128, 192, 192, 64, 0, 224, 248, 30, 0, 0, 0, 0, 241, 241, 1
        DC8 1, 1, 1, 1, 1, 1, 1, 129, 65, 33, 17, 17, 17, 33, 65, 129, 1, 1
        DC8 241, 241, 97, 225, 129, 1, 1, 1, 1, 1, 241, 241, 1, 241, 241, 49
        DC8 49, 49, 97, 193, 129, 1, 1, 49, 49, 49, 49, 49, 49, 49, 49, 241
        DC8 241, 113, 1, 241, 241, 49, 49, 49, 49, 241, 241, 241, 0, 0, 0, 0, 3
        DC8 3, 7, 14, 28, 28, 25, 27, 27, 27, 27, 27, 27, 27, 9, 13, 4, 6, 3, 3
        DC8 1, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 255, 8, 8
        DC8 8, 8, 8, 8, 8, 255, 255, 0, 255, 255, 0, 1, 7, 30, 120, 224, 128, 0
        DC8 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 129, 255, 126, 0, 128, 192
        DC8 224, 240, 56, 30, 7, 3, 1, 0, 0, 255, 255, 0, 0, 0, 0, 255, 255
        DC8 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 12, 12, 12, 12, 12, 12, 0, 15
        DC8 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 15, 15, 0, 0, 0, 0, 0, 1, 7, 6
        DC8 15, 15, 0, 15, 15, 12, 12, 12, 6, 3, 1, 0, 0, 14, 15, 15, 13, 12
        DC8 12, 12, 12, 12, 12, 12, 0, 15, 15, 12, 12, 12, 12, 15, 15, 15, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0
//  347   /*
//  348   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  349   0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  350   0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  351   0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  352   0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  353   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  354   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  355   0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  356   0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  357   0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  358   0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  359   0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  360   0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  361   0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  362   0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  363   0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  364   0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  365   0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  366   0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  367   0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  368   0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  369   0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  370   0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  371   0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  372   0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  373   0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  374   0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  375   0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  376   0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  377   0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  378   0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  379   0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  380   0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  381   0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  382   0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  383   0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  384   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  385   0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  386   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  387   0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  388   0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  389   0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  390   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  391   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  392   0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  393   0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  394   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  395   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, */
//  396   
//  397   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  398   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  399   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  400   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  401   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  402   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  403   0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x60,0x20,0x20,0x20,0xA0,0xA0,
//  404   0xA0,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  405   0x00,0x00,0x60,0x60,0x60,0x60,0xE0,0x70,0x70,0x60,0x60,0xF0,0x70,0x60,0x60,0x60,
//  406   0x60,0x60,0x60,0x00,0xE0,0xE0,0x60,0x60,0x60,0x60,0x60,0x70,0x70,0x70,0x60,0x60,
//  407   0x60,0x60,0x60,0x60,0xE0,0xE0,0xE0,0x80,0x80,0x80,0x80,0xF0,0xF0,0x80,0x80,0x80,
//  408   0x80,0x80,0x80,0x80,0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0xB0,0xF0,0x70,0x30,
//  409   0xE0,0xF8,0x7C,0x1E,0x07,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
//  410   0x01,0x03,0x87,0x8F,0xCF,0xFF,0xFE,0xFE,0xFC,0xFC,0xF0,0xE0,0x80,0x00,0x00,0x00,
//  411   0x00,0x00,0x00,0x00,0x3F,0x00,0xFF,0x00,0x00,0x08,0x0E,0x1F,0x3A,0x62,0xC2,0x02,
//  412   0x02,0x02,0x00,0x00,0x03,0x03,0xF8,0xF8,0xF8,0x18,0x18,0x18,0xFC,0xFC,0x18,0x18,
//  413   0x18,0xF8,0xF8,0xF8,0x03,0x03,0xFF,0xFF,0x31,0x31,0x31,0xFF,0xFF,0x31,0x31,0x31,
//  414   0x31,0x31,0xFF,0xFF,0x00,0x18,0x18,0x18,0x18,0x18,0x1E,0x3F,0xFF,0xF8,0x18,0x18,
//  415   0xFF,0xFF,0x00,0xC0,0x80,0x80,0x80,0x80,0xE0,0xE0,0xE0,0xF0,0xF8,0xF8,0xFC,0x7E,
//  416   0x7F,0x3F,0x3F,0x1F,0x0F,0x07,0x07,0x07,0x0F,0x0F,0x0F,0x1F,0x1F,0x00,0x00,0x80,
//  417   0xB0,0xB0,0xBF,0xB7,0xB3,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xB3,
//  418   0xB7,0xBF,0xB0,0xB0,0x80,0x80,0xBF,0xBF,0xBF,0xB1,0xB1,0xB1,0xBF,0xBF,0xB1,0xB1,
//  419   0xB1,0xBF,0xBF,0xBF,0x80,0x80,0x87,0x87,0x86,0x86,0x86,0xBF,0xBF,0xB6,0xB6,0xB6,
//  420   0xB6,0xB6,0xB7,0xB7,0xB0,0xB0,0xB8,0xB8,0x80,0x88,0x98,0xB8,0xBF,0xBF,0x80,0x80,
//  421   0x1F,0x3F,0x70,0xEF,0xDF,0x9F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xE3,0xC0,0x80,
//  422   0x00,0x80,0x00,0x80,0xC0,0xC0,0x40,0x00,0xE0,0xF8,0x1E,0x00,0x00,0x00,0x00,0xF1,
//  423   0xF1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0x41,0x21,0x11,0x11,0x11,0x21,
//  424   0x41,0x81,0x01,0x01,0xF1,0xF1,0x61,0xE1,0x81,0x01,0x01,0x01,0x01,0x01,0xF1,0xF1,
//  425   0x01,0xF1,0xF1,0x31,0x31,0x31,0x61,0xC1,0x81,0x01,0x01,0x31,0x31,0x31,0x31,0x31,
//  426   0x31,0x31,0x31,0xF1,0xF1,0x71,0x01,0xF1,0xF1,0x31,0x31,0x31,0x31,0xF1,0xF1,0xF1,
//  427   0x00,0x00,0x00,0x00,0x03,0x03,0x07,0x0E,0x1C,0x1C,0x19,0x1B,0x1B,0x1B,0x1B,0x1B,
//  428   0x1B,0x1B,0x09,0x0D,0x04,0x06,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  429   0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x08,0x08,0x08,0x08,0x08,0x08,
//  430   0x08,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x01,0x07,0x1E,0x78,0xE0,0x80,0x00,0xFF,0xFF,
//  431   0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x81,0xFF,0x7E,0x00,0x80,0xC0,0xE0,0xF0,
//  432   0x38,0x1E,0x07,0x03,0x01,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
//  433   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  434   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
//  435   0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//  436   0x00,0x0F,0x0F,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x06,0x0F,0x0F,
//  437   0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x06,0x03,0x01,0x00,0x00,0x0E,0x0F,0x0F,0x0D,0x0C,
//  438   0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x0C,0x0F,0x0F,0x0F,
//  439   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  440   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  441   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  442   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  443   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  444   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  445   
//  446 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  447 const uint8 LIBLOGO60x58[480] = {
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  448   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  449   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  450   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  451   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  452   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  453   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  454   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  455   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  456   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  457   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  458   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  459   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  460   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  461   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  462   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  463   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  464   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  465   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  466   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  467   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  468   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  469   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  470   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  471   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  472   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  473   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  474   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  475   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  476   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  477   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  478 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  479 uint8 LANDZO_LOGO[300] ={
LANDZO_LOGO:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 48, 16, 24, 8, 4, 20, 16
        DC8 26, 24, 24, 28, 28, 28, 28, 60, 60, 60, 60, 124, 124, 252, 252, 248
        DC8 248, 240, 240, 224, 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 192, 240, 248, 126, 31, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 143, 255, 255, 255, 255, 255
        DC8 255, 254, 252, 248, 224, 128, 0, 0, 0, 240, 255, 255, 255, 7, 0
        DC8 248, 248, 240, 240, 224, 224, 224, 192, 192, 192, 192, 192, 192
        DC8 192, 192, 192, 192, 192, 192, 192, 224, 224, 224, 240, 240, 248
        DC8 248, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 0, 0, 15, 255, 255, 255, 248, 192, 15, 127, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 63, 31, 15, 7, 3, 3, 1, 1
        DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 7, 3, 0
        DC8 0, 0, 0, 3, 15, 31, 127, 254, 252, 241, 231, 207, 159, 63, 127, 255
        DC8 255, 255, 255, 252, 240, 224, 224, 192, 128, 128, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 1, 3, 3, 7, 15, 15, 30, 30, 28, 57, 57, 59, 115, 115
        DC8 119, 103, 103, 103, 103, 103, 103, 39, 39, 54, 54, 22, 18, 10, 10
        DC8 4, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  480   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x30,0x10,0x18,0x08,
//  481   0x04,0x14,0x10,0x1A,0x18,0x18,0x1C,0x1C,0x1C,0x1C,0x3C,0x3C,0x3C,0x3C,0x7C,0x7C,
//  482   0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xE0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//  483   0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xF8,0x7E,0x1F,0x07,0x03,0x00,0x00,0x00,0x00,
//  484   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  485   0x00,0x00,0x00,0x01,0x01,0x03,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,
//  486   0xE0,0x80,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0x07,0x00,0xF8,0xF8,0xF0,0xF0,0xE0,
//  487   0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xE0,
//  488   0xE0,0xE0,0xF0,0xF0,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  489   0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xF8,0xC0,0x0F,0x7F,0xFF,
//  490   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x03,0x01,
//  491   0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  492   0x01,0x01,0x01,0x03,0x03,0x07,0x03,0x00,0x00,0x00,0x00,0x03,0x0F,0x1F,0x7F,0xFE,
//  493   0xFC,0xF1,0xE7,0xCF,0x9F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0xF0,0xE0,0xE0,0xC0,
//  494   0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  495   0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  496   0x00,0x00,0x01,0x03,0x03,0x07,0x0F,0x0F,0x1E,0x1E,0x1C,0x39,0x39,0x3B,0x73,0x73,
//  497   0x77,0x67,0x67,0x67,0x67,0x67,0x67,0x27,0x27,0x36,0x36,0x16,0x12,0x0A,0x0A,0x04,
//  498   0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//  499 };
//  500 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  501 void Dly_ms(uint16 ms)
//  502 {
//  503   uint16 ii,jj;
//  504   if (ms<1) ms=1;
Dly_ms:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??Dly_ms_0
        MOVS     R3,#+1
        MOVS     R0,R3
//  505   ms = ms*12 ;
??Dly_ms_0:
        MOVS     R3,#+12
        SMULBB   R0,R0,R3
//  506   for(ii=0;ii<ms;ii++)
        MOVS     R3,#+0
        MOVS     R1,R3
??Dly_ms_1:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R1,R0
        BCS.N    ??Dly_ms_2
//  507     for(jj=0;jj<1335;jj++);  //16MHz--1ms
        MOVS     R3,#+0
        MOVS     R2,R3
??Dly_ms_3:
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVW     R3,#+1335
        CMP      R2,R3
        BGE.N    ??Dly_ms_4
        ADDS     R2,R2,#+1
        B.N      ??Dly_ms_3
??Dly_ms_4:
        ADDS     R1,R1,#+1
        B.N      ??Dly_ms_1
//  508   //   for(jj=0;jj<4006;jj++);  //48MHz--1ms
//  509   //for(jj=0;jj<5341;jj++);    //64MHz--1ms
//  510 }
??Dly_ms_2:
        BX       LR               ;; return
//  511 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  512 void OLED_WrDat(uint8 data)
//  513 {
OLED_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  514   uint8 i=8;
        MOVS     R5,#+8
//  515   //LCD_CS=0;;
//  516   OLED_DC_SET;
        MOVS     R2,#+1
        MOVS     R1,#+27
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  517   OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  518   //asm("nop");
//  519   while(i--)
??OLED_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrDat_1
//  520   {
//  521     if(data&0x80)
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrDat_2
//  522     {
//  523       OLED_DI_SET;
        MOVS     R2,#+1
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrDat_3
//  524     }
//  525     else
//  526     {
//  527       OLED_DI_RESET;
??OLED_WrDat_2:
        MOVS     R2,#+0
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  528     }
//  529     OLED_DO_SET;
??OLED_WrDat_3:
        MOVS     R2,#+1
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  530     asm("nop");;
        nop
//  531     //asm("nop");
//  532     OLED_DO_RESET;;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  533     data<<=1;
        LSLS     R4,R4,#+1
        B.N      ??OLED_WrDat_0
//  534   }
//  535   //LCD_CS=1;
//  536 }
??OLED_WrDat_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  537 void OLED_WrCmd(uint8 cmd)
//  538 {
OLED_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  539   uint8 i=8;
        MOVS     R5,#+8
//  540   
//  541   //LCD_CS=0;;
//  542  OLED_DC_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+27
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  543   OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  544   //asm("nop");
//  545   while(i--)
??OLED_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrCmd_1
//  546   {
//  547     if(cmd&0x80)
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrCmd_2
//  548     {
//  549       OLED_DI_SET;
        MOVS     R2,#+1
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrCmd_3
//  550     }
//  551     else
//  552     {
//  553       OLED_DI_RESET;
??OLED_WrCmd_2:
        MOVS     R2,#+0
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  554     }
//  555     OLED_DO_SET;
??OLED_WrCmd_3:
        MOVS     R2,#+1
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  556     asm("nop");
        nop
//  557     //asm("nop");
//  558     OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  559     cmd<<=1;
        LSLS     R4,R4,#+1
        B.N      ??OLED_WrCmd_0
//  560   }
//  561   
//  562 }
??OLED_WrCmd_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  563 void OLED_Set_Pos(uint8 x, uint8 y)
//  564 {
OLED_Set_Pos:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  565   OLED_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  566   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  567   OLED_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  568 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  569 void OLED_Fill(uint8 bmp_data)
//  570 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  571   uint8 y,x;
//  572   
//  573   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R5,R0
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_1
//  574   {
//  575     OLED_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  576     OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  577     OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  578     for(x=0;x<X_WIDTH;x++)
        MOVS     R0,#+0
        MOVS     R6,R0
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BGE.N    ??OLED_Fill_3
//  579       OLED_WrDat(bmp_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
        B.N      ??OLED_Fill_2
//  580   }
??OLED_Fill_3:
        ADDS     R5,R5,#+1
        B.N      ??OLED_Fill_0
//  581 }
??OLED_Fill_1:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  582 void OLED_CLS(void)
//  583 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  584   uint8 y,x;
//  585   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R4,R0
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_1
//  586   {
//  587     OLED_WrCmd(0xb0+y);
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  588     OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  589     OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  590     for(x=0;x<X_WIDTH;x++)
        MOVS     R0,#+0
        MOVS     R5,R0
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BGE.N    ??OLED_CLS_3
//  591       OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
        B.N      ??OLED_CLS_2
//  592   }
??OLED_CLS_3:
        ADDS     R4,R4,#+1
        B.N      ??OLED_CLS_0
//  593 }
??OLED_CLS_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  594 void OLED_DLY_ms(uint16 ms)
//  595 {
//  596   uint16 a;
//  597   while(ms)
OLED_DLY_ms:
??OLED_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BEQ.N    ??OLED_DLY_ms_1
//  598   {
//  599     a=16000;
        MOV      R2,#+16000
        MOVS     R1,R2
//  600     while(a--);
??OLED_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??OLED_DLY_ms_2
//  601     ms--;
        SUBS     R0,R0,#+1
        B.N      ??OLED_DLY_ms_0
//  602   }
//  603   return;
??OLED_DLY_ms_1:
        BX       LR               ;; return
//  604 }
//  605 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  606 void OLED_Init(void)
//  607 {
OLED_Init:
        PUSH     {R7,LR}
//  608   OLEDIO_init();
        BL       OLEDIO_init
//  609   
//  610   OLED_DO_SET;
        MOVS     R2,#+1
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  611   //LCD_CS=1;	//预制SLK和SS为高电平
//  612   OLED_CS_RESET; ///使能信号端，拉低时正常使用
        MOVS     R2,#+0
        MOVS     R1,#+28
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  613   OLED_RST_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+26
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  614   OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  615   OLED_RST_SET;
        MOVS     R2,#+1
        MOVS     R1,#+26
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  616   
//  617   OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  618   OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  619   OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  620   OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  621   OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  622   OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  623   OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  624   OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  625   OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  626   OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  627   OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  628   OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  629   OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  630   OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  631   OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  632   OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  633   OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  634   OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  635   OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  636   OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  637   OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  638   OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  639   OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  640   OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  641   OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  642   OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  643   OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  644   OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  645   OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  646   OLED_Set_Pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  647   
//  648 }
        POP      {R0,PC}          ;; return
//  649 //==============================================================
//  650 //函数名： void LCD_PutPixel(uint8 x,uint8 y)
//  651 //功能描述：绘制一个点（x,y）
//  652 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  653 //返回：无
//  654 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  655 void OLED_PutPixel(uint8 x,uint8 y)
//  656 {
OLED_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  657   uint8 data1;  //data1当前点的数据
//  658   
//  659   OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  660   data1 = 0x01<<(y%8);
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R0,R0,R2
        MOVS     R6,R0
//  661   OLED_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  662   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  663   OLED_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       OLED_WrCmd
//  664   OLED_WrDat(data1);
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  665 }
        POP      {R4-R6,PC}       ;; return
//  666 //==============================================================
//  667 //函数名： void LCD_Rectangle(uint8 x1,uint8 y1,
//  668 //                   uint8 x2,uint8 y2,uint8 color,uint8 gif)
//  669 //功能描述：绘制一个实心矩形
//  670 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  671 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  672 //返回：无
//  673 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  674 void OLED_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif)
//  675 {
OLED_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+32]
//  676   uint8 n;
//  677   
//  678   OLED_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  679   for(n=x1;n<=x2;n++)
        MOV      R9,R5
??OLED_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCC.N    ??OLED_Rectangle_1
//  680   {
//  681     OLED_WrDat(0x01<<(y1%8));
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  682     if(gif == 1) 	OLED_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_2
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  683   }
??OLED_Rectangle_2:
        ADDS     R9,R9,#+1
        B.N      ??OLED_Rectangle_0
//  684   OLED_Set_Pos(x1,y2>>3);
??OLED_Rectangle_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  685   for(n=x1;n<=x2;n++)
        MOV      R9,R5
??OLED_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCC.N    ??OLED_Rectangle_4
//  686   {
//  687     OLED_WrDat(0x01<<(y2%8));
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  688     if(gif == 1) 	OLED_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_5
        MOVS     R0,#+5
        BL       OLED_DLY_ms
//  689   }
??OLED_Rectangle_5:
        ADDS     R9,R9,#+1
        B.N      ??OLED_Rectangle_3
//  690   
//  691 }
??OLED_Rectangle_4:
        POP      {R0,R4-R9,PC}    ;; return
//  692 /**==============================================================
//  693 函 数 名: LED_P6x8Char
//  694 功能描述: 显示一个6x8标志ASCII字符串
//  695 输入数据:  uint8 ucIdxX       显示横坐标0~122
//  696 uint8 ucIdxY       页范围0~7
//  697 uint8 ucData       显示的字符串
//  698 输出数据: NONE
//  699 返 回 值: NONE
//  700 ==============================================================**/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  701 void OLED_P6x8Char(uint8 ucIdxX, uint8 ucIdxY, uint8 ucData)
//  702 {
OLED_P6x8Char:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOV      R8,R1
        MOVS     R5,R2
//  703   uint8 i, ucDataTmp;
//  704   
//  705   ucDataTmp = ucData-32;
        SUBS     R0,R5,#+32
        MOVS     R7,R0
//  706   if(ucIdxX > 122)
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+123
        BLT.N    ??OLED_P6x8Char_0
//  707   {
//  708     ucIdxX = 0;
        MOVS     R0,#+0
        MOVS     R4,R0
//  709     ucIdxY++;
        ADDS     R8,R8,#+1
//  710   }
//  711   
//  712   OLED_Set_Pos(ucIdxX, ucIdxY);
??OLED_P6x8Char_0:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  713   
//  714   for(i = 0; i < 6; i++)
        MOVS     R0,#+0
        MOVS     R6,R0
??OLED_P6x8Char_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+6
        BGE.N    ??OLED_P6x8Char_2
//  715   {
//  716     OLED_WrDat(F6x8[ucDataTmp][i]);
        LDR.W    R0,??DataTable12_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R6, R0]
        BL       OLED_WrDat
//  717   }
        ADDS     R6,R6,#+1
        B.N      ??OLED_P6x8Char_1
//  718 }
??OLED_P6x8Char_2:
        POP      {R4-R8,PC}       ;; return
//  719 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  720 void OLED_P8x16Char(uint8 x,uint8 y,uint8 ch)
//  721 {
OLED_P8x16Char:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOV      R9,R1
        MOVS     R5,R2
//  722   uint8 c=0,i=0,j=0;
        MOVS     R6,#+0
        MOVS     R7,#+0
        MOVS     R8,#+0
//  723   
//  724   
//  725   c =ch-32;
        SUBS     R0,R5,#+32
        MOVS     R6,R0
//  726   if(x>120){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Char_0
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R9,R9,#+1
//  727   OLED_Set_Pos(x,y);
??OLED_P8x16Char_0:
        MOV      R1,R9
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  728   for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P8x16Char_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??OLED_P8x16Char_2
//  729     OLED_WrDat(F8X16[c*16+i]);
        LDR.W    R0,??DataTable12_5
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R1,R6,#+4
        UXTAB    R1,R1,R7
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
        B.N      ??OLED_P8x16Char_1
//  730   OLED_Set_Pos(x,y+1);
??OLED_P8x16Char_2:
        ADDS     R1,R9,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  731   for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P8x16Char_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??OLED_P8x16Char_4
//  732     OLED_WrDat(F8X16[c*16+i+8]);
        LDR.W    R0,??DataTable12_5
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R1,R6,#+4
        UXTAB    R1,R1,R7
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
        B.N      ??OLED_P8x16Char_3
//  733   x+=8;
??OLED_P8x16Char_4:
        ADDS     R4,R4,#+8
//  734   j++;
        ADDS     R8,R8,#+1
//  735   
//  736 }
        POP      {R0,R4-R9,PC}    ;; return
//  737 
//  738 //==============================================================
//  739 //函数名：LCD_P6x8Str(uint8 x,uint8 y,uint8 *p)
//  740 //功能描述：写入一组标准ASCII字符串
//  741 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  742 //返回：无
//  743 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  744 void OLED_P6x8Str(uint8 x,uint8 y,uint8 ch[])
//  745 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  746   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
//  747   while (ch[j]!='\0')
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_1
//  748   {
//  749     c =ch[j]-32;
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  750     if(x>126){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_2
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  751     OLED_Set_Pos(x,y);
??OLED_P6x8Str_2:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  752     for(i=0;i<6;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P6x8Str_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BGE.N    ??OLED_P6x8Str_4
//  753       OLED_WrDat(F6x8[c][i]);
        LDR.W    R0,??DataTable12_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P6x8Str_3
//  754     x+=6;
??OLED_P6x8Str_4:
        ADDS     R4,R4,#+6
//  755     j++;
        ADDS     R9,R9,#+1
        B.N      ??OLED_P6x8Str_0
//  756   }
//  757 }
??OLED_P6x8Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  758 //==============================================================
//  759 //函数名：LCD_P8x16Str(uint8 x,uint8 y,uint8 *p)
//  760 //功能描述：写入一组标准ASCII字符串
//  761 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  762 //返回：无
//  763 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  764 void OLED_P8x16Str(uint8 x,uint8 y,uint8 ch[])
//  765 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  766   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
//  767   
//  768   while (ch[j]!='\0')
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_1
//  769   {
//  770     c =ch[j]-32;
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  771     if(x>120){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_2
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  772     OLED_Set_Pos(x,y);
??OLED_P8x16Str_2:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  773     for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P8x16Str_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??OLED_P8x16Str_4
//  774       OLED_WrDat(F8X16[c*16+i]);
        LDR.W    R0,??DataTable12_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P8x16Str_3
//  775     OLED_Set_Pos(x,y+1);
??OLED_P8x16Str_4:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  776     for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??OLED_P8x16Str_6
//  777       OLED_WrDat(F8X16[c*16+i+8]);
        LDR.W    R0,??DataTable12_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P8x16Str_5
//  778     x+=8;
??OLED_P8x16Str_6:
        ADDS     R4,R4,#+8
//  779     j++;
        ADDS     R9,R9,#+1
        B.N      ??OLED_P8x16Str_0
//  780   }
//  781 }
??OLED_P8x16Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  782 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  783 void OLED_P14x16Str(uint8 x,uint8 y,uint8 ch[])
//  784 {
OLED_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  785   uint8 wm=0,ii = 0;
        MOVS     R7,#+0
        MOVS     R8,#+0
//  786   uint16 adder=1;
        MOVS     R9,#+1
//  787   
//  788   while(ch[ii] != '\0')
??OLED_P14x16Str_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R6]
        CMP      R0,#+0
        BEQ.W    ??OLED_P14x16Str_1
//  789   {
//  790     wm = 0;
        MOVS     R0,#+0
        MOVS     R7,R0
//  791     adder = 1;
        MOVS     R0,#+1
        MOV      R9,R0
//  792     while(F14x16_Idx[wm] > 127)
??OLED_P14x16Str_2:
        LDR.W    R0,??DataTable12_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R0]
        CMP      R0,#+128
        BLT.N    ??OLED_P14x16Str_3
//  793     {
//  794       if(F14x16_Idx[wm] == ch[ii])
        LDR.W    R0,??DataTable12_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R0]
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R1,[R8, R6]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_4
//  795       {
//  796         if(F14x16_Idx[wm + 1] == ch[ii + 1])
        LDR.W    R0,??DataTable12_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R0
        LDRB     R0,[R0, #+1]
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        ADDS     R1,R8,R6
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_4
//  797         {
//  798           adder = wm * 14;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+14
        SMULBB   R0,R7,R0
        MOV      R9,R0
//  799           break;
        B.N      ??OLED_P14x16Str_3
//  800         }
//  801       }
//  802       wm += 2;
??OLED_P14x16Str_4:
        ADDS     R7,R7,#+2
        B.N      ??OLED_P14x16Str_2
//  803     }
//  804     if(x>118){x=0;y++;}
??OLED_P14x16Str_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+119
        BLT.N    ??OLED_P14x16Str_5
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  805     OLED_Set_Pos(x , y);
??OLED_P14x16Str_5:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  806     if(adder != 1)// 显示汉字
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R9,#+1
        BEQ.N    ??OLED_P14x16Str_6
//  807     {
//  808       OLED_Set_Pos(x , y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  809       for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_7:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+14
        BGE.N    ??OLED_P14x16Str_8
//  810       {
//  811         OLED_WrDat(F14x16[adder]);
        LDR.W    R0,??DataTable12_7
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R0]
        BL       OLED_WrDat
//  812         adder += 1;
        ADDS     R9,R9,#+1
//  813       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_7
//  814       OLED_Set_Pos(x,y + 1);
??OLED_P14x16Str_8:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  815       for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_9:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+14
        BGE.N    ??OLED_P14x16Str_10
//  816       {
//  817         OLED_WrDat(F14x16[adder]);
        LDR.W    R0,??DataTable12_7
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R0]
        BL       OLED_WrDat
//  818         adder += 1;
        ADDS     R9,R9,#+1
//  819       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_9
//  820     }
//  821     else			  //显示空白字符
//  822     {
//  823       ii += 1;
??OLED_P14x16Str_6:
        ADDS     R8,R8,#+1
//  824       OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  825       for(wm = 0;wm < 16;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_11:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+16
        BGE.N    ??OLED_P14x16Str_12
//  826       {
//  827         OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
//  828       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_11
//  829       OLED_Set_Pos(x,y + 1);
??OLED_P14x16Str_12:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  830       for(wm = 0;wm < 16;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_13:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+16
        BGE.N    ??OLED_P14x16Str_10
//  831       {
//  832         OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
//  833       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_13
//  834     }
//  835     x += 14;
??OLED_P14x16Str_10:
        ADDS     R4,R4,#+14
//  836     ii += 2;
        ADDS     R8,R8,#+2
        B.N      ??OLED_P14x16Str_0
//  837   }
//  838 }
??OLED_P14x16Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  839 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  840 void OLED_Print(uint8 x, uint8 y, uint8 ch[])
//  841 {
OLED_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  842   uint8 ch2[3];
//  843   uint8 ii=0;
        MOVS     R7,#+0
//  844   while(ch[ii] != '\0')
??OLED_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_1
//  845   {
//  846     if(ch[ii] > 127)
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BLT.N    ??OLED_Print_2
//  847     {
//  848       ch2[0] = ch[ii];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  849       ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  850       ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  851       OLED_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P14x16Str
//  852       x += 14;
        ADDS     R4,R4,#+14
//  853       ii += 2;
        ADDS     R7,R7,#+2
        B.N      ??OLED_Print_0
//  854     }
//  855     else
//  856     {
//  857       ch2[0] = ch[ii];
??OLED_Print_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  858       ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  859       OLED_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  860       x += 8;
        ADDS     R4,R4,#+8
//  861       ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_0
//  862     }
//  863   }
//  864 }
??OLED_Print_1:
        POP      {R0,R4-R7,PC}    ;; return
//  865 /*****************************************************************************
//  866 函 数 名: LED_PrintFloat
//  867 功能描述: 将一个Short型数转换为5位数字显示
//  868 输入参数: UCHAR8 ucIdxX ucIdxX的范围为0~120
//  869 UCHAR8 ucIdxY ucIdxY为页的范围0~7
//  870 SHORT16 sData  sData为需要转换的数
//  871 输出参数: none
//  872 返 回 值: none
//  873 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  874 void OLED_PrintFloat(uint8 ucIdxX, uint8 ucIdxY, float64 sData)
//  875 {
OLED_PrintFloat:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+36
        MOVS     R6,R0
        MOVS     R7,R1
        MOVS     R4,R2
        MOVS     R5,R3
//  876   float64  j, k,usData;
//  877   float64 f1,f2,f3;
//  878 //  if(sData < 0)
//  879 //  {
//  880 //    OLED_P8x16Str(ucIdxX,ucIdxY,"-");
//  881 //    usData = (float64)(-sData);
//  882 //  }
//  883 //  else
//  884 //  {
//  885 //    OLED_P8x16Str(ucIdxX,ucIdxY,"+");
//  886     usData = (float64)sData;
        MOV      R8,R4
        MOV      R9,R5
//  887 //  }
//  888   if(usData < 100000.0 && usData > -100000.0)
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_8  ;; 0x40f86a00
        BL       __aeabi_cdcmple
        BCS.W    ??OLED_PrintFloat_0
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#-1
        LDR.W    R3,??DataTable12_9  ;; 0xc0f869ff
        BL       __aeabi_cdrcmple
        BHI.W    ??OLED_PrintFloat_0
//  889   {
//  890 //    l  = (uint16)(usData / 10000) % 10;
//  891 //    m  = (uint16)(usData / 1000) % 10;
//  892 //    i  = (uint16)(usData / 100) % 10;
//  893     j  = (uint16)(usData / 10) % 10;
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_10  ;; 0x40240000
        BL       __aeabi_ddiv
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+16]
//  894     k  = (uint16) usData % 10;
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+24]
//  895     f1 = (uint16)(usData * 10) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_10  ;; 0x40240000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+8]
//  896     f2 = (uint16)(usData * 100) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_11  ;; 0x40590000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+0]
//  897     f3 = (uint16)(usData * 1000) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_12  ;; 0x408f4000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        MOV      R10,R0
        MOV      R11,R1
//  898 //    f4 = (uint32)(usData * 10000) % 10;
//  899 //    f5 = (uint32)(usData * 100000) % 10;
//  900     //    f6 = (uint32)(usData * 1000000) % 10;
//  901     
//  902     //万位
//  903 //    if ((uint8)l != 0)
//  904 //    {
//  905 //      OLED_P8x16Char(ucIdxX+8,  ucIdxY, (uint8)l+48);
//  906 //    }
//  907 //    else
//  908 //    {
//  909 //      OLED_P8x16Str(ucIdxX+8,  ucIdxY, " ");
//  910 //    }
//  911 //    
//  912 //    //千位
//  913 //    if ( (uint8)m != 0 || (uint8)l != 0)
//  914 //    {
//  915 //      OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8)m+48);
//  916 //    }
//  917 //    else
//  918 //    {
//  919 //      OLED_P6x8Str(ucIdxX+16,  ucIdxY, " ");
//  920 //    }
//  921 //    
//  922 //    
//  923 //    //百位
//  924 //    if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0)
//  925 //    {
//  926 //      OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)i+48);
//  927 //    }
//  928 //    else
//  929 //    {
//  930 //      OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
//  931 //    }
//  932     
//  933     //十位
//  934     if (/* (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0 || */(uint8)j != 0)
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_1
//  935     {
//  936       OLED_P8x16Char(ucIdxX+0, ucIdxY, (uint8)j+48);
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_2
//  937     }
//  938     else
//  939     {
//  940       OLED_P8x16Str(ucIdxX +0,  ucIdxY, " ");
??OLED_PrintFloat_1:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  941     }
//  942     
//  943     //个位
//  944     OLED_P8x16Char(ucIdxX+8, ucIdxY, (uint8)k+48);
??OLED_PrintFloat_2:
        LDRD     R0,R1,[SP, #+24]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
//  945     
//  946     //小数点
//  947     OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8) '.' );
        MOVS     R2,#+46
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
//  948     
//  949     
//  950     if ( /*(uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || */(uint8)f3 != 0 || (uint8)f2 != 0 || (uint8)f1 != 0 )
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_3
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_3
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_4
//  951     {
//  952       OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)f1+48);
??OLED_PrintFloat_3:
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_5
//  953     }
//  954     else
//  955     {
//  956       OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
??OLED_PrintFloat_4:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  957     }
//  958     if (/* (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || */(uint8)f3 != 0 || (uint8)f2 != 0)
??OLED_PrintFloat_5:
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_6
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_7
//  959     {
//  960       OLED_P8x16Char(ucIdxX+32, ucIdxY, (uint8)f2+48);
??OLED_PrintFloat_6:
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_8
//  961     }
//  962     else
//  963     {
//  964       OLED_P8x16Str(ucIdxX+32,  ucIdxY, " ");
??OLED_PrintFloat_7:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  965     }
//  966     
//  967     if (/* (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || */(uint8)f3 != 0)
??OLED_PrintFloat_8:
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_9
//  968     {
//  969       OLED_P8x16Char(ucIdxX+40, ucIdxY, (uint8)f3+48);
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_10
//  970     }
//  971     else
//  972     {
//  973       OLED_P8x16Str(ucIdxX+40,  ucIdxY, " ");
??OLED_PrintFloat_9:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
        B.N      ??OLED_PrintFloat_10
//  974     }
//  975     
//  976     
//  977 //    
//  978 //    if ( (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0)
//  979 //    {
//  980 //      OLED_P8x16Char(ucIdxX+80, ucIdxY, (uint8)f4+48);
//  981 //    }
//  982 //    else
//  983 //    {
//  984 //      OLED_P8x16Str(ucIdxX+80,  ucIdxY, " ");
//  985 //    }
//  986 //    if ( (uint8)f6 != 0 || (uint8)f5 != 0 )
//  987 //    {
//  988 //      OLED_P8x16Char(ucIdxX+88, ucIdxY, (uint8)f5+48);
//  989 //    }
//  990 //    else
//  991 //    {
//  992 //      OLED_P8x16Str(ucIdxX+88,  ucIdxY, " ");
//  993 //    }
//  994     //    if ( (uint8)f6 != 0 )
//  995     //    {
//  996     //      OLED_P8x16Char(ucIdxX+56, ucIdxY + 2, (uint8)f6+48);
//  997     //    }
//  998     //    else
//  999     //    {
// 1000     //      OLED_P8x16Str(ucIdxX+56,  ucIdxY + 2, " ");
// 1001     //    }
// 1002   }
// 1003   else
// 1004   {
// 1005     OLED_P8x16Str( ucIdxX, ucIdxY,"Error!");
??OLED_PrintFloat_0:
        LDR.N    R2,??DataTable12_13
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1006   }
// 1007   return;
??OLED_PrintFloat_10:
        ADD      SP,SP,#+36
        POP      {R4-R11,PC}      ;; return
// 1008 }
// 1009 //==============================================================
// 1010 //函数名： void Draw_BMP(uint8 x,uint8 y)
// 1011 //功能描述：显示BMP图片128×64
// 1012 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1013 //返回：无
// 1014 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1015 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[])
// 1016 {
Draw_BMP:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+40]
// 1017   uint16 ii=0;
        MOVS     R9,#+0
// 1018   uint8 x,y;
// 1019   
// 1020   if(y1%8==0) y=y1/8;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R1,R7,R0
        MLS      R1,R1,R0,R7
        CMP      R1,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R7,R0
        MOV      R11,R0
        B.N      ??Draw_BMP_1
// 1021   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R7,R0
        ADDS     R0,R0,#+1
        MOV      R11,R0
// 1022   for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R11,R5
??Draw_BMP_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        CMP      R7,R11
        BCC.N    ??Draw_BMP_3
// 1023   {
// 1024     OLED_Set_Pos(x0,y);
        MOV      R1,R11
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
// 1025     for(x=x0;x<x1;x++)
        MOV      R10,R4
??Draw_BMP_4:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R10,R6
        BCS.N    ??Draw_BMP_5
// 1026     {
// 1027       OLED_WrDat(bmp[ii++]);
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R8]
        BL       OLED_WrDat
        ADDS     R9,R9,#+1
// 1028     }
        ADDS     R10,R10,#+1
        B.N      ??Draw_BMP_4
// 1029   }
??Draw_BMP_5:
        ADDS     R11,R11,#+1
        B.N      ??Draw_BMP_2
// 1030 }
??Draw_BMP_3:
        POP      {R0,R4-R11,PC}   ;; return
// 1031 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1032 void Draw_LibLogo(void)
// 1033 {
Draw_LibLogo:
        PUSH     {R4-R6,LR}
// 1034   uint16 ii=0;
        MOVS     R4,#+0
// 1035   uint8 x,y;
// 1036   
// 1037   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R6,R0
??Draw_LibLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LibLogo_1
// 1038   {
// 1039     OLED_Set_Pos(34,y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+34
        BL       OLED_Set_Pos
// 1040     for(x=34;x<94;x++)
        MOVS     R0,#+34
        MOVS     R5,R0
??Draw_LibLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+94
        BGE.N    ??Draw_LibLogo_3
// 1041     {
// 1042       OLED_WrDat(LIBLOGO60x58[ii++]);
        LDR.N    R0,??DataTable12_14
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1043     }
        ADDS     R5,R5,#+1
        B.N      ??Draw_LibLogo_2
// 1044   }
??Draw_LibLogo_3:
        ADDS     R6,R6,#+1
        B.N      ??Draw_LibLogo_0
// 1045 }
??Draw_LibLogo_1:
        POP      {R4-R6,PC}       ;; return
// 1046 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1047 void Draw_Landzo(void)
// 1048 {
Draw_Landzo:
        PUSH     {R4-R6,LR}
// 1049   uint16 ii=0;
        MOVS     R4,#+0
// 1050   uint8 x,y;
// 1051   
// 1052   for(y=2;y<8;y++)
        MOVS     R0,#+2
        MOVS     R6,R0
??Draw_Landzo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_Landzo_1
// 1053   {
// 1054     OLED_Set_Pos(40,y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+40
        BL       OLED_Set_Pos
// 1055     for(x=40;x<90;x++)
        MOVS     R0,#+40
        MOVS     R5,R0
??Draw_Landzo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+90
        BGE.N    ??Draw_Landzo_3
// 1056     {
// 1057       OLED_WrDat(LANDZO_LOGO[ii++]);
        LDR.N    R0,??DataTable12_15
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1058     }
        ADDS     R5,R5,#+1
        B.N      ??Draw_Landzo_2
// 1059   }
??Draw_Landzo_3:
        ADDS     R6,R6,#+1
        B.N      ??Draw_Landzo_0
// 1060 }
??Draw_Landzo_1:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC8      " ",0x0,0x0
// 1061 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1062 void OLED_PrintInt16(uint8 ucIdxX, uint8 ucIdxY, int16 sData)
// 1063 {
OLED_PrintInt16:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1064   uint8 i, j, k, l, m;
// 1065   uint16 usData;
// 1066 
// 1067   if(sData < 0)
        SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
        CMP      R6,#+0
        BPL.N    ??OLED_PrintInt16_0
// 1068   {
// 1069     OLED_P8x16Str(ucIdxX,ucIdxY,"-");
        ADR.N    R2,??DataTable12  ;; "-"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1070     usData = (int16)(-sData);
        SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
        RSBS     R0,R6,#+0
        MOV      R11,R0
        B.N      ??OLED_PrintInt16_1
// 1071   }
// 1072   else
// 1073   {
// 1074     OLED_P8x16Str(ucIdxX,ucIdxY,"+");
??OLED_PrintInt16_0:
        ADR.N    R2,??DataTable12_2  ;; "+"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1075     usData = (int16)sData;
        MOV      R11,R6
// 1076   }
// 1077 
// 1078     l  = (uint16)(usData / 10000) % 10;
??OLED_PrintInt16_1:
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R9,R0
// 1079     m  = (uint16)(usData / 1000) % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOV      R0,#+1000
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R10,R0
// 1080     i  = (uint16)(usData / 100) % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+100
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOVS     R7,R0
// 1081     j  = (uint16)(usData / 10) % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+10
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R8,R0
// 1082     k  = (uint16) usData % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        STRB     R0,[SP, #+0]
// 1083 
// 1084     
// 1085     //万位
// 1086     if ((uint8)l != 0)
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BEQ.N    ??OLED_PrintInt16_2
// 1087     {
// 1088       OLED_P8x16Char(ucIdxX+8,  ucIdxY, (uint8)l+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_3
// 1089     }
// 1090     else
// 1091     {
// 1092       OLED_P8x16Str(ucIdxX+8,  ucIdxY, " ");
??OLED_PrintInt16_2:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1093     }
// 1094     
// 1095     //千位
// 1096     if ( (uint8)m != 0 || (uint8)l != 0)
??OLED_PrintInt16_3:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??OLED_PrintInt16_4
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BEQ.N    ??OLED_PrintInt16_5
// 1097     {
// 1098       OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8)m+48);
??OLED_PrintInt16_4:
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_6
// 1099     }
// 1100     else
// 1101     {
// 1102       OLED_P6x8Str(ucIdxX+16,  ucIdxY, " ");
??OLED_PrintInt16_5:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
// 1103     }
// 1104     
// 1105     
// 1106     //百位
// 1107     if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0)
??OLED_PrintInt16_6:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??OLED_PrintInt16_7
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BNE.N    ??OLED_PrintInt16_7
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??OLED_PrintInt16_8
// 1108     {
// 1109       OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)i+48);
??OLED_PrintInt16_7:
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_9
// 1110     }
// 1111     else
// 1112     {
// 1113       OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
??OLED_PrintInt16_8:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1114     }
// 1115     
// 1116     //十位
// 1117     if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0 || (uint8)j != 0)
??OLED_PrintInt16_9:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??OLED_PrintInt16_10
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BNE.N    ??OLED_PrintInt16_10
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BNE.N    ??OLED_PrintInt16_10
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+0
        BEQ.N    ??OLED_PrintInt16_11
// 1118     {
// 1119       OLED_P8x16Char(ucIdxX+32, ucIdxY, (uint8)j+48);
??OLED_PrintInt16_10:
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_12
// 1120     }
// 1121     else
// 1122     {
// 1123       OLED_P8x16Str(ucIdxX +32,  ucIdxY, " ");
??OLED_PrintInt16_11:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1124     }
// 1125     
// 1126     //个位
// 1127     OLED_P8x16Char(ucIdxX+40, ucIdxY, (uint8)k+48);
??OLED_PrintInt16_12:
        LDRB     R0,[SP, #+0]
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
// 1128 
// 1129 
// 1130   return;
        POP      {R0,R4-R11,PC}   ;; return
// 1131 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12:
        DC8      "-",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_1:
        DC32     0x400ff100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_2:
        DC8      "+",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_3:
        DC8      " ",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_4:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_5:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_6:
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_7:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_8:
        DC32     0x40f86a00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_9:
        DC32     0xc0f869ff

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_10:
        DC32     0x40240000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_11:
        DC32     0x40590000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_12:
        DC32     0x408f4000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_13:
        DC32     ?_1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_14:
        DC32     LIBLOGO60x58

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_15:
        DC32     LANDZO_LOGO

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 1132 
// 1133 //拟合曲线示波器
// 1134 /*
// 1135 void OLED_printosc(int16 data)  //data -160~160    line 0-64  line = 0.39375 * data +64
// 1136 {
// 1137   //attention it's a queue here!
// 1138   static int16 osc_line[128] = {0};
// 1139   
// 1140   //pointer of fifo
// 1141   static uint8 fifo = 0;
// 1142   
// 1143   uint8 i = 0,j = 0;
// 1144   osc_line[fifo] = (int16)(0.2 * data + 31);
// 1145   
// 1146   if ( osc_line[fifo] > 63 )
// 1147   {
// 1148     osc_line[fifo] = 63;
// 1149   }
// 1150   
// 1151   if ( osc_line[fifo] < 0 )
// 1152   {
// 1153     osc_line[fifo] = 0;
// 1154   }
// 1155   
// 1156   fifo++;
// 1157   
// 1158 
// 1159   if ( fifo >= 128 )
// 1160   {
// 1161     fifo = 0;
// 1162   }
// 1163   
// 1164   OLED_CLS();
// 1165   for ( i = 0;i < 8; i++ )
// 1166   {
// 1167     OLED_Set_Pos( 0, i );
// 1168     for ( j = 0 ; j < 128;j++ )
// 1169     {
// 1170       if ( osc_line[j] > 63 - 8*i || osc_line[j] <= 55 - 8 * (i))
// 1171       {
// 1172         OLED_WrDat(0x00);
// 1173       }
// 1174       else
// 1175       {
// 1176         OLED_WrDat(0x80 >>  ( osc_line[j] - ( 55 - 8 * i ) -1));
// 1177       }
// 1178     }
// 1179   }
// 1180 
// 1181 
// 1182 }
// 1183 */
// 
// 1 692 bytes in section .data
// 2 958 bytes in section .rodata
// 3 260 bytes in section .text
// 
// 3 260 bytes of CODE  memory
// 2 958 bytes of CONST memory
// 1 692 bytes of DATA  memory
//
//Errors: none
//Warnings: none
