###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        08/Aug/2016  13:02:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_USB.c
#    Command line =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_USB.c -D
#        LPLD_K60 -lCN
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -lB
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -o
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\BSP\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\ITAC\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\CTL\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\MAIN\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\SENSOR\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\CPU\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\HW\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\DEV\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\option\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\driver\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\descriptor\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\class\" -On -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\HW_USB.lst
#    Object file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\HW_USB.o
#
###############################################################################

C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_USB.c
      1          /**
      2           * @file HW_USB.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief UART底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"     /* Common definitions */

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable2  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     23          #include "HW_USB.h"
     24          #include "usb_driver.h"
     25          
     26          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     27          USB_ISR_CALLBACK USB_ISR[1];
   \                     USB_ISR:
   \   00000000                      DS8 4
     28          
     29          /*
     30          * LPLD_USB_Init
     31          * K60 USB外设初始化函数
     32          * 在该函数中,初始化USB外设时钟,设置USB外设的中断服务函数,
     33          * 并且调用USB设备初始化函数
     34          */
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void LPLD_USB_Init(void)
     37          { 
   \                     LPLD_USB_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     38            MPU->CESR=0; //MPU 配置 
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable2_1  ;; 0x4000d000
   \   00000006   0x6008             STR      R0,[R1, #+0]
     39            SIM->SOPT2 |= SIM_SOPT2_USBSRC_MASK |   //选择PLL/FLL作为时钟源
     40                         SIM_SOPT2_PLLFLLSEL_MASK; //用PLL作为USB的时钟源，此时的PLL的频率为96Mhz 
   \   00000008   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40048004
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x20A0      ORRS     R0,R0,#0x50000
   \   00000010   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40048004
   \   00000012   0x6008             STR      R0,[R1, #+0]
     41          #if(CORE_CLK_MHZ == PLL_96)
     42            SIM->CLKDIV2 = 0x02;                    //设置分频系数USB时钟 = 96Mhz/2 =48Mhz
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x....             LDR.N    R1,??DataTable2_3  ;; 0x40048048
   \   00000018   0x6008             STR      R0,[R1, #+0]
     43          #endif 
     44            SIM->SCGC4 |= (SIM_SCGC4_USBOTG_MASK);  //使能USB外设时钟  
   \   0000001A   0x....             LDR.N    R0,??DataTable2_4  ;; 0x40048034
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   00000022   0x....             LDR.N    R1,??DataTable2_4  ;; 0x40048034
   \   00000024   0x6008             STR      R0,[R1, #+0]
     45            USB0->USBTRC0 = 0x40;                   //按照文档所述，此位必须设置为1
   \   00000026   0x2040             MOVS     R0,#+64
   \   00000028   0x....             LDR.N    R1,??DataTable2_5  ;; 0x4007210c
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
     46            SIM->SOPT1 |= SIM_SOPT1_USBREGEN_MASK;  //配置USB设备稳压源
   \   0000002C   0x....             LDR.N    R0,??DataTable2_6  ;; 0x40047000
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000034   0x....             LDR.N    R1,??DataTable2_6  ;; 0x40047000
   \   00000036   0x6008             STR      R0,[R1, #+0]
     47            
     48            /* NVIC模块配置 */
     49            enable_irq(USB0_IRQn);                 //使能NVIC中的USB OTG中断
   \   00000038   0x2049             MOVS     R0,#+73
   \   0000003A   0x.... 0x....      BL       NVIC_EnableIRQ
     50            USB_ISR[0] = USB_DEVICE_ISR;           //将USB协议处理函数添加到中断处理函数数组中
   \   0000003E   0x....             LDR.N    R0,??DataTable2_7
   \   00000040   0x....             LDR.N    R1,??DataTable2_8
   \   00000042   0x6008             STR      R0,[R1, #+0]
     51            
     52          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_CDC)
     53            USB_CDC_Init();                        //初始化CDC类
     54          #elif(USB_DEVICE_CLASS == USB_DEVICE_CLASS_HID)
     55            USB_HID_Mouse_Init();                  //初始化HID类
     56          #endif
     57            
     58            
     59          }
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
     60          
     61          /*
     62          * LPLD_USB_DeInit
     63          * K60 USB模块注销函数
     64          * 注销所选择的USB设备
     65          */
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void LPLD_USB_DeInit(void)
     68          { 
     69          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_CDC)
     70            USB_Class_CDC_DeInit(CONTROLLER_ID);                        //注销CDC类
     71          #elif(USB_DEVICE_CLASS == USB_DEVICE_CLASS_HID)
     72            USB_Class_HID_DeInit(CONTROLLER_ID);                        //注销HID类
     73          #endif
     74          }
   \                     LPLD_USB_DeInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     75          
     76          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_CDC)
     77          /*
     78          *  LPLD_USB_VirtualCom_Rx
     79          *  将USB CDC类模式虚拟成串口模式，该函数是串口接收函数
     80          *  参数：
     81          *      *rx_buf--指向用户数据存储区，用于储存接收到的数据
     82          *  输出：接收数据的长度，以字节为单位
     83          */
     84          uint8 LPLD_USB_VirtualCom_Rx(uint8 *rx_buf)
     85          {
     86            memcpy(rx_buf,tUSB_Rev_Data.buffer,tUSB_Rev_Data.len);
     87            return tUSB_Rev_Data.len;
     88          }
     89          
     90          /*
     91          *  LPLD_USB_VirtualCom_Tx
     92          *  将USB CDC类模式虚拟成串口模式，该函数是串口发送函数
     93          *  参数：
     94          *      *tx_buf -- 指向用户数据存储区，用于储存要发送的数据
     95          *      len -- 要发送的数据长度
     96          *  输出：0x00   发送成功
     97          *        非0x00 发送失败
     98          */
     99          uint8 LPLD_USB_VirtualCom_Tx(uint8 *tx_buf,uint8 len)
    100          {
    101            uint8 status = 0;
    102            status = USB_Class_CDC_Interface_DIC_Send_Data(CONTROLLER_ID,tx_buf,len);
    103            return status;
    104          }
    105          
    106          /*
    107          *  LPLD_USB_SetRevIsr
    108          *  添加USB 虚拟串口接收数据中断服务函数
    109          *  无
    110          *  无
    111          */
    112          void LPLD_USB_SetRevIsr(USB_REV_ISR_CALLBACK isr)
    113          {
    114            USB_Rev_SetIsr(isr);
    115          }
    116          
    117          /*
    118          *  LPLD_USB_QueueData
    119          *  从USB的内存中恢复接收到的数据到用户内存中
    120          *  接收成功后调用此函数
    121          *  无
    122          *  无
    123          */
    124          void LPLD_USB_QueueData(void)
    125          {
    126            (void)USB_Class_CDC_Interface_DIC_Recv_Data(CONTROLLER_ID, NULL, 0);
    127          }
    128          #endif
    129          
    130          #if(USB_DEVICE_CLASS == USB_DEVICE_CLASS_HID)
    131          /*
    132          *  LPLD_USB_HID_MouseControl
    133          *  HID鼠标控制函数
    134          *  参数
    135          *    uint8 *buf -- 数组包含4个字节控制命令
    136          *      第一个字节控制鼠标左右键
    137          *        取值：MOUSE_LEFT_CLICK  左键
    138          *              MOUSE_RIGHT_CLICK 右键
    139          *      第二个字节控制X轴移动
    140          *        取值：MOUSE_LEFT_MOVE   左移
    141          *              MOUSE_RIGHT_MOVE  右移
    142          *      第三个字节控制Y轴移动
    143          *        取值：MOUSE_UP_MOVE    上移
    144          *              MOUSE_DOWN_MOVE  下移
    145          *  输出：
    146          *    无
    147          */
    148          void LPLD_USB_HID_MouseControl(uint8 *buf)
    149          {
    150            USB_HID_MouseControl(buf);
    151          }
    152          
    153          /*
    154          *  LPLD_USB_HID_LoopTask
    155          *  在main loop中循环调度鼠标检测
    156          *  参数
    157          *    uint8 *buf -- 数组包含4个字节控制命令
    158          *      第一个字节控制鼠标左右键
    159          *        取值：MOUSE_LEFT_CLICK  左键
    160          *              MOUSE_RIGHT_CLICK 右键
    161          *      第二个字节控制X轴移动
    162          *        取值：MOUSE_LEFT_MOVE   左移
    163          *              MOUSE_RIGHT_MOVE  右移
    164          *      第三个字节控制Y轴移动
    165          *        取值：MOUSE_UP_MOVE    上移
    166          *              MOUSE_DOWN_MOVE  下移
    167          *  输出：
    168          *    无
    169          */
    170          void LPLD_USB_HID_LoopTask(uint8 *buf)
    171          {
    172            if(USB_HID_Mouse_Task())
    173            {
    174              LPLD_USB_HID_MouseControl(buf);
    175            }
    176          }
    177          #endif
    178          /*
    179          *  LPLD_USB_Isr
    180          *  USB中断处理函数
    181          */

   \                                 In section .text, align 2, keep-with-next
    182          void USB_OTG_IRQHandler(void)
    183          {
   \                     USB_OTG_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    184            //调用用户自定义中断服务
    185            USB_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable2_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    186          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4000D000         DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40048048         DC32     0x40048048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x4007210C         DC32     0x4007210c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40047000         DC32     0x40047000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     USB_DEVICE_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     USB_ISR

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LPLD_USB_DeInit
       8   LPLD_USB_Init
         8   -> NVIC_EnableIRQ
       0   NVIC_EnableIRQ
       8   USB_OTG_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       2  LPLD_USB_DeInit
      70  LPLD_USB_Init
      20  NVIC_EnableIRQ
       4  USB_ISR
      10  USB_OTG_IRQHandler

 
   4 bytes in section .bss
 138 bytes in section .text
 
 138 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
