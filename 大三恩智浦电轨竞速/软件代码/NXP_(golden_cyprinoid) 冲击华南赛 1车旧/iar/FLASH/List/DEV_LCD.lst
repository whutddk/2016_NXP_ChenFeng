###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        08/Aug/2016  13:02:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\DEV\DEV_LCD.c
#    Command line =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\DEV\DEV_LCD.c -D
#        LPLD_K60 -lCN
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -lB
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\" -o
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\BSP\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\ITAC\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\CTL\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\MAIN\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\app\SENSOR\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\CPU\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\HW\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\LPLD\DEV\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\FatFs\option\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\common\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\driver\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\descriptor\" -I
#        "C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\..\..\..\lib\USB\class\" -On -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\List\DEV_LCD.lst
#    Object file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\launch\NXP_(golden_cyprinoid)
#        冲击华南赛 1车\iar\FLASH\Obj\DEV_LCD.o
#
###############################################################################

C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\DEV\DEV_LCD.c
      1          /**
      2           * @file DEV_LCD.c
      3           * @version 0.2[By LPLD]
      4           * @date 2013-10-21
      5           * @brief LCD设备驱动程序
      6           *
      7           * 更改建议:可根据实际硬件修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           *
     22           * 0.2-2013-10-21 优化初始化函数、字符串数字显示函数
     23           */
     24          #include "DEV_LCD.h"
     25          #include "Font_ASC.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned char const asc2_1608[95][16]
   \                     asc2_1608:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x08 0x08    
   \              0x08         
   \   00000017   0x08 0x08          DC8 8, 8, 8, 0, 0, 24, 24, 0, 0, 0, 72, 108, 36, 18, 0, 0, 0, 0, 0, 0
   \              0x08 0x00    
   \              0x00 0x18    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x48 0x6C    
   \              0x24 0x12    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 127, 18, 18, 18, 127, 18, 18
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x24 0x24    
   \              0x24 0x7F    
   \              0x12 0x12    
   \              0x12 0x7F    
   \              0x12 0x12    
   \   0000003D   0x12 0x00          DC8 18, 0, 0, 0, 0, 8, 28, 42, 42, 10, 12, 24, 40, 40, 42, 42, 28, 8, 8
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x1C 0x2A    
   \              0x2A 0x0A    
   \              0x0C 0x18    
   \              0x28 0x28    
   \              0x2A 0x2A    
   \              0x1C 0x08    
   \              0x08         
   \   00000050   0x00 0x00          DC8 0, 0, 0, 34, 37, 21, 21, 21, 42, 88, 84, 84, 84, 34, 0, 0, 0, 0, 0
   \              0x00 0x22    
   \              0x25 0x15    
   \              0x15 0x15    
   \              0x2A 0x58    
   \              0x54 0x54    
   \              0x54 0x22    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000063   0x0C 0x12          DC8 12, 18, 18, 18, 10, 118, 37, 41, 17, 145, 110, 0, 0, 0, 6, 6, 4, 3
   \              0x12 0x12    
   \              0x0A 0x76    
   \              0x25 0x29    
   \              0x11 0x91    
   \              0x6E 0x00    
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x04 0x03    
   \   00000075   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32, 16, 16, 8, 8, 8, 8, 8
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \              0x10 0x10    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08         
   \   0000008A   0x08 0x10          DC8 8, 16, 16, 32, 64, 0, 0, 2, 4, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8
   \              0x10 0x20    
   \              0x40 0x00    
   \              0x00 0x02    
   \              0x04 0x08    
   \              0x08 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x08    
   \              0x08         
   \   0000009D   0x04 0x02          DC8 4, 2, 0, 0, 0, 0, 0, 8, 8, 107, 28, 28, 107, 8, 8, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x08 0x6B    
   \              0x1C 0x1C    
   \              0x6B 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B2   0x00 0x00          DC8 0, 0, 8, 8, 8, 8, 127, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x7F 0x08    
   \              0x08 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C8   0x00 0x00          DC8 0, 0, 0, 0, 6, 6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x04 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 128, 64
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x40    
   \   000000F4   0x40 0x20          DC8 64, 32, 32, 16, 16, 8, 8, 4, 4, 2, 2, 0, 0, 0, 0, 24, 36, 66, 66
   \              0x20 0x10    
   \              0x10 0x08    
   \              0x08 0x04    
   \              0x04 0x02    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x24 0x42    
   \              0x42         
   \   00000107   0x42 0x42          DC8 66, 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 8, 14, 8, 8, 8, 8, 8, 8
   \              0x42 0x42    
   \              0x42 0x24    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x0E    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \   0000011B   0x08 0x08          DC8 8, 8, 62, 0, 0, 0, 0, 0, 60, 66, 66, 66, 32, 32, 16, 8, 4, 66, 126
   \              0x3E 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x42    
   \              0x42 0x42    
   \              0x20 0x20    
   \              0x10 0x08    
   \              0x04 0x42    
   \              0x7E         
   \   0000012E   0x00 0x00          DC8 0, 0, 0, 0, 0, 60, 66, 66, 32, 24, 32, 64, 64, 66, 34, 28, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x42 0x42    
   \              0x20 0x18    
   \              0x20 0x40    
   \              0x40 0x42    
   \              0x22 0x1C    
   \              0x00 0x00    
   \              0x00         
   \   00000141   0x00 0x00          DC8 0, 0, 32, 48, 40, 36, 36, 34, 34, 126, 32, 32, 120, 0, 0, 0, 0, 0
   \              0x20 0x30    
   \              0x28 0x24    
   \              0x24 0x22    
   \              0x22 0x7E    
   \              0x20 0x20    
   \              0x78 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000153   0x7E 0x02          DC8 126, 2, 2, 2, 26, 38, 64, 64, 66, 34, 28, 0, 0, 0, 0, 0, 56, 36, 2
   \              0x02 0x02    
   \              0x1A 0x26    
   \              0x40 0x40    
   \              0x42 0x22    
   \              0x1C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x38 0x24    
   \              0x02         
   \   00000166   0x02 0x1A          DC8 2, 26, 38, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 126, 34, 34, 16, 16
   \              0x26 0x42    
   \              0x42 0x42    
   \              0x24 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7E    
   \              0x22 0x22    
   \              0x10 0x10    
   \   00000178   0x08 0x08          DC8 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 60, 66, 66, 66, 36, 24, 36, 66, 66
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x42 0x42    
   \              0x42 0x24    
   \              0x18 0x24    
   \              0x42 0x42    
   \   0000018C   0x42 0x3C          DC8 66, 60, 0, 0, 0, 0, 0, 24, 36, 66, 66, 66, 100, 88, 64, 64, 36, 28
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x24 0x42    
   \              0x42 0x42    
   \              0x64 0x58    
   \              0x40 0x40    
   \              0x24 0x1C    
   \   0000019E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001B3   0x00 0x00          DC8 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 8, 4, 0, 0, 0, 64, 32, 16, 8, 4, 2
   \              0x00 0x00    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \   000001C9   0x04 0x08          DC8 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 0, 0
   \              0x10 0x20    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7F    
   \              0x00 0x00    
   \              0x00 0x7F    
   \              0x00 0x00    
   \   000001DD   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x04    
   \              0x08 0x10    
   \              0x20 0x40    
   \              0x20 0x10    
   \              0x08 0x04    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001F2   0x00 0x3C          DC8 0, 60, 66, 66, 70, 64, 32, 16, 16, 0, 24, 24, 0, 0, 0, 0, 0, 28, 34
   \              0x42 0x42    
   \              0x46 0x40    
   \              0x20 0x10    
   \              0x10 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1C    
   \              0x22         
   \   00000205   0x5A 0x55          DC8 90, 85, 85, 85, 85, 45, 66, 34, 28, 0, 0, 0, 0, 0, 8, 8, 24, 20, 20
   \              0x55 0x55    
   \              0x55 0x2D    
   \              0x42 0x22    
   \              0x1C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0x18 0x14    
   \              0x14         
   \   00000218   0x24 0x3C          DC8 36, 60, 34, 66, 66, 231, 0, 0, 0, 0, 0, 31, 34, 34, 34, 30, 34, 66
   \              0x22 0x42    
   \              0x42 0xE7    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x22 0x22    
   \              0x22 0x1E    
   \              0x22 0x42    
   \   0000022A   0x42 0x42          DC8 66, 66, 34, 31, 0, 0, 0, 0, 0, 124, 66, 66, 1, 1, 1, 1, 1, 66, 34
   \              0x22 0x1F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0x42 0x42    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x42    
   \              0x22         
   \   0000023D   0x1C 0x00          DC8 28, 0, 0, 0, 0, 0, 31, 34, 66, 66, 66, 66, 66, 66, 66, 34, 31, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1F 0x22    
   \              0x42 0x42    
   \              0x42 0x42    
   \              0x42 0x42    
   \              0x42 0x22    
   \              0x1F 0x00    
   \              0x00         
   \   00000250   0x00 0x00          DC8 0, 0, 0, 63, 66, 18, 18, 30, 18, 18, 2, 66, 66, 63, 0, 0, 0, 0, 0
   \              0x00 0x3F    
   \              0x42 0x12    
   \              0x12 0x1E    
   \              0x12 0x12    
   \              0x02 0x42    
   \              0x42 0x3F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000263   0x3F 0x42          DC8 63, 66, 18, 18, 30, 18, 18, 2, 2, 2, 7, 0, 0, 0, 0, 0, 60, 34, 34
   \              0x12 0x12    
   \              0x1E 0x12    
   \              0x12 0x02    
   \              0x02 0x02    
   \              0x07 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x22    
   \              0x22         
   \   00000276   0x01 0x01          DC8 1, 1, 1, 113, 33, 34, 34, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
   \              0x01 0x71    
   \              0x21 0x22    
   \              0x22 0x1C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x42    
   \              0x42 0x42    
   \   00000288   0x7E 0x42          DC8 126, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 62, 8, 8, 8, 8, 8, 8, 8, 8
   \              0x42 0x42    
   \              0x42 0xE7    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3E    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \   0000029C   0x08 0x3E          DC8 8, 62, 0, 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \   000002AE   0x11 0x0F          DC8 17, 15, 0, 0, 0, 119, 34, 18, 10, 14, 10, 18, 18, 34, 34, 119, 0, 0
   \              0x00 0x00    
   \              0x00 0x77    
   \              0x22 0x12    
   \              0x0A 0x0E    
   \              0x0A 0x12    
   \              0x12 0x22    
   \              0x22 0x77    
   \              0x00 0x00    
   \   000002C0   0x00 0x00          DC8 0, 0, 0, 7, 2, 2, 2, 2, 2, 2, 2, 2, 66, 127, 0, 0, 0, 0, 0, 119, 54
   \              0x00 0x07    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x42 0x7F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x77    
   \              0x36         
   \   000002D5   0x36 0x36          DC8 54, 54, 54, 42, 42, 42, 42, 42, 107, 0, 0, 0, 0, 0, 227, 70, 70, 74
   \              0x36 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x6B 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE3 0x46    
   \              0x46 0x4A    
   \   000002E7   0x4A 0x52          DC8 74, 82, 82, 82, 98, 98, 71, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65
   \              0x52 0x52    
   \              0x62 0x62    
   \              0x47 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x41    
   \              0x41 0x41    
   \   000002F9   0x41 0x41          DC8 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 63, 66, 66, 66, 66, 62, 2, 2, 2
   \              0x41 0x22    
   \              0x1C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3F 0x42    
   \              0x42 0x42    
   \              0x42 0x3E    
   \              0x02 0x02    
   \              0x02         
   \   0000030C   0x02 0x07          DC8 2, 7, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65, 65, 77, 83, 50, 28, 96
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1C    
   \              0x22 0x41    
   \              0x41 0x41    
   \              0x41 0x41    
   \              0x4D 0x53    
   \              0x32 0x1C    
   \              0x60         
   \   0000031F   0x00 0x00          DC8 0, 0, 0, 0, 63, 66, 66, 66, 62, 18, 18, 34, 34, 66, 199, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x3F 0x42    
   \              0x42 0x42    
   \              0x3E 0x12    
   \              0x12 0x22    
   \              0x22 0x42    
   \              0xC7 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000332   0x00 0x7C          DC8 0, 124, 66, 66, 2, 4, 24, 32, 64, 66, 66, 62, 0, 0, 0, 0, 0, 127
   \              0x42 0x42    
   \              0x02 0x04    
   \              0x18 0x20    
   \              0x40 0x42    
   \              0x42 0x3E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7F    
   \   00000344   0x49 0x08          DC8 73, 8, 8, 8, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x1C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x42    
   \              0x42 0x42    
   \   00000358   0x42 0x42          DC8 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 231, 66, 66, 34, 36, 36, 20
   \              0x42 0x42    
   \              0x42 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x42    
   \              0x22 0x24    
   \              0x24 0x14    
   \   0000036A   0x14 0x18          DC8 20, 24, 8, 8, 0, 0, 0, 0, 0, 107, 73, 73, 73, 73, 85, 85, 54, 34
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x6B    
   \              0x49 0x49    
   \              0x49 0x49    
   \              0x55 0x55    
   \              0x36 0x22    
   \   0000037C   0x22 0x22          DC8 34, 34, 0, 0, 0, 0, 0, 231, 66, 36, 36, 24, 24, 24, 36, 36, 66, 231
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x24    
   \              0x24 0x18    
   \              0x18 0x18    
   \              0x24 0x24    
   \              0x42 0xE7    
   \   0000038E   0x00 0x00          DC8 0, 0, 0, 0, 0, 119, 34, 34, 20, 20, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x77    
   \              0x22 0x22    
   \              0x14 0x14    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x1C    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A2   0x00 0x7E          DC8 0, 126, 33, 32, 16, 16, 8, 4, 4, 66, 66, 63, 0, 0, 0, 120, 8, 8, 8
   \              0x21 0x20    
   \              0x10 0x10    
   \              0x08 0x04    
   \              0x04 0x42    
   \              0x42 0x3F    
   \              0x00 0x00    
   \              0x00 0x78    
   \              0x08 0x08    
   \              0x08         
   \   000003B5   0x08 0x08          DC8 8, 8, 8, 8, 8, 8, 8, 8, 8, 120, 0, 0, 0, 2, 2, 4, 4, 8, 8, 8, 16
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x78    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x02 0x04    
   \              0x04 0x08    
   \              0x08 0x08    
   \              0x10         
   \   000003CA   0x10 0x20          DC8 16, 32, 32, 32, 64, 64, 0, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              0x20 0x20    
   \              0x40 0x40    
   \              0x00 0x1E    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10         
   \   000003DB   0x10 0x10          DC8 16, 16, 16, 30, 0, 0, 56, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x10 0x1E    
   \              0x00 0x00    
   \              0x38 0x44    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000003F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 6, 8, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0x00 0x06    
   \              0x08 0x00    
   \              0x00 0x00    
   \   00000406   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 120, 68
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x42 0x78    
   \              0x44         
   \   0000041B   0x42 0x42          DC8 66, 66, 252, 0, 0, 0, 0, 0, 3, 2, 2, 2, 26, 38, 66, 66, 66, 38, 26
   \              0xFC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x02    
   \              0x02 0x02    
   \              0x1A 0x26    
   \              0x42 0x42    
   \              0x42 0x26    
   \              0x1A         
   \   0000042E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 68, 2, 2, 2, 68, 56, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x38    
   \              0x44 0x02    
   \              0x02 0x02    
   \              0x44 0x38    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000443   0x60 0x40          DC8 96, 64, 64, 64, 120, 68, 66, 66, 66, 100, 216, 0, 0, 0, 0, 0, 0, 0
   \              0x40 0x40    
   \              0x78 0x44    
   \              0x42 0x42    
   \              0x42 0x64    
   \              0xD8 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000455   0x00 0x00          DC8 0, 0, 60, 66, 126, 2, 2, 66, 60, 0, 0, 0, 0, 0, 240, 136, 8, 8, 126
   \              0x3C 0x42    
   \              0x7E 0x02    
   \              0x02 0x42    
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xF0 0x88    
   \              0x08 0x08    
   \              0x7E         
   \   00000468   0x08 0x08          DC8 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 34, 34, 28, 2
   \              0x08 0x08    
   \              0x08 0x3E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0x22 0x22    
   \              0x1C 0x02    
   \   0000047C   0x3C 0x42          DC8 60, 66, 66, 60, 0, 0, 0, 3, 2, 2, 2, 58, 70, 66, 66, 66, 66, 231, 0
   \              0x42 0x3C    
   \              0x00 0x00    
   \              0x00 0x03    
   \              0x02 0x02    
   \              0x02 0x3A    
   \              0x46 0x42    
   \              0x42 0x42    
   \              0x42 0xE7    
   \              0x00         
   \   0000048F   0x00 0x00          DC8 0, 0, 0, 0, 12, 12, 0, 0, 14, 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 48
   \              0x00 0x00    
   \              0x0C 0x0C    
   \              0x00 0x00    
   \              0x0E 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x3E 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x30         
   \   000004A4   0x30 0x00          DC8 48, 0, 0, 56, 32, 32, 32, 32, 32, 32, 34, 30, 0, 0, 0, 3, 2, 2, 2
   \              0x00 0x38    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x22 0x1E    
   \              0x00 0x00    
   \              0x00 0x03    
   \              0x02 0x02    
   \              0x02         
   \   000004B7   0x72 0x12          DC8 114, 18, 10, 22, 18, 34, 119, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8
   \              0x0A 0x16    
   \              0x12 0x22    
   \              0x77 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x0E 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08         
   \   000004CA   0x08 0x08          DC8 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 146, 146, 146, 146
   \              0x08 0x3E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7F    
   \              0x92 0x92    
   \              0x92 0x92    
   \   000004DC   0x92 0xB7          DC8 146, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 70, 66, 66, 66, 66, 231, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3B    
   \              0x46 0x42    
   \              0x42 0x42    
   \              0x42 0xE7    
   \              0x00         
   \   000004EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x42    
   \              0x42 0x42    
   \              0x42 0x42    
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000503   0x00 0x00          DC8 0, 0, 0, 0, 27, 38, 66, 66, 66, 34, 30, 2, 7, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x1B 0x26    
   \              0x42 0x42    
   \              0x42 0x22    
   \              0x1E 0x02    
   \              0x07 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000517   0x78 0x44          DC8 120, 68, 66, 66, 66, 68, 120, 64, 224, 0, 0, 0, 0, 0, 0, 0, 119, 76
   \              0x42 0x42    
   \              0x42 0x44    
   \              0x78 0x40    
   \              0xE0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x77 0x4C    
   \   00000529   0x04 0x04          DC8 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 66, 2, 60, 64, 66
   \              0x04 0x04    
   \              0x1F 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0x42    
   \              0x02 0x3C    
   \              0x40 0x42    
   \   0000053D   0x3E 0x00          DC8 62, 0, 0, 0, 0, 0, 0, 0, 8, 8, 62, 8, 8, 8, 8, 8, 48, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0x3E 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000553   0x00 0x00          DC8 0, 0, 0, 0, 99, 66, 66, 66, 66, 98, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x63 0x42    
   \              0x42 0x42    
   \              0x42 0x62    
   \              0xDC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000567   0xE7 0x42          DC8 231, 66, 36, 36, 20, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 73, 73
   \              0x24 0x24    
   \              0x14 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xEB 0x49    
   \              0x49         
   \   0000057A   0x55 0x55          DC8 85, 85, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 36, 24, 24, 24, 36
   \              0x22 0x22    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x76    
   \              0x24 0x18    
   \              0x18 0x18    
   \              0x24         
   \   0000058D   0x6E 0x00          DC8 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 36, 36, 20, 24, 8, 8, 7, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE7 0x42    
   \              0x24 0x24    
   \              0x14 0x18    
   \              0x08 0x08    
   \              0x07 0x00    
   \   000005A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 126, 34, 16, 8, 8, 68, 126, 0, 0, 0, 192, 32, 32
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7E 0x22    
   \              0x10 0x08    
   \              0x08 0x44    
   \              0x7E 0x00    
   \              0x00 0x00    
   \              0xC0 0x20    
   \              0x20         
   \   000005B4   0x20 0x20          DC8 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 192, 0, 16, 16, 16, 16, 16
   \              0x20 0x10    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0xC0 0x00    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10         
   \   000005C5   0x10 0x10          DC8 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 6, 8, 8, 8, 8, 8, 16
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x00    
   \              0x06 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x10         
   \   000005D8   0x08 0x08          DC8 8, 8, 8, 8, 8, 8, 6, 0, 12, 50, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x06 0x00    
   \              0x0C 0x32    
   \              0xC2 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000005ED   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     26          
     27          static void LPLD_LCD_Reset(void);
     28          static void LPLD_LCD_FLEXBUS_Init(uint16 lcd_id);
     29          static void LPLD_LCD_IO_Cfg(void);
     30          static void LPLD_LCD_WriteIndex(uint16 index);
     31          static void LPLD_LCD_WriteData(uint16 data);
     32          static uint16 LPLD_LCD_ReadData(void);
     33          static void LPLD_LCD_WriteReg(uint16 LCD_Reg,uint16 LCD_RegValue);
     34          static uint16 LPLD_LCD_ReadReg(uint16 LCD_Reg);
     35          static void LPLD_LCD_SetCursor( uint16 Xpos, uint16 Ypos );
     36          static void LPLD_LCD_Delayms(uint16 ms);
     37          

   \                                 In section .bss, align 4
     38          LPLD_LCD_Info_t LPLD_LCD_INFO;
   \                     LPLD_LCD_INFO:
   \   00000000                      DS8 8

   \                                 In section .bss, align 2
     39          uint16 PreX=0, PreY=0;
   \                     PreX:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     PreY:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     40          uint16 *LCD_GRAM;
   \                     LCD_GRAM:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     41          uint16 CurX=0, CurY=0;
   \                     CurX:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     CurY:
   \   00000000                      DS8 2
     42          
     43          /*
     44           * LPLD_LCD_Delayms
     45           * LCD内部延时函数，内部调用
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          static void LPLD_LCD_Delayms(uint16 n)
     48          {
     49            uint16 i;
     50            while(n--)
   \                     LPLD_LCD_Delayms: (+1)
   \                     ??LPLD_LCD_Delayms_0: (+1)
   \   00000000   0x0002             MOVS     R2,R0
   \   00000002   0x1E50             SUBS     R0,R2,#+1
   \   00000004   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD008             BEQ.N    ??LPLD_LCD_Delayms_1
     51            {
     52              for(i=0; i<400; i++)
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x0011             MOVS     R1,R2
   \                     ??LPLD_LCD_Delayms_2: (+1)
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0xF5B1 0x7FC8      CMP      R1,#+400
   \   00000014   0xDAF4             BGE.N    ??LPLD_LCD_Delayms_0
     53              {
     54                asm("nop");
   \   00000016   0xBF00             nop
     55              }
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \   0000001A   0xE7F8             B.N      ??LPLD_LCD_Delayms_2
     56            }
     57          }
   \                     ??LPLD_LCD_Delayms_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     58          
     59          /*
     60           * LPLD_LCD_FLEXBUS_Init
     61           * LCD FlexBus初始化函数，内部调用
     62           * 
     63           * 说明:
     64           *    本初始化函数用来配置FlexBus与LCD的连接
     65           *    配置为16位端口大小
     66           *    地址与数据线复用
     67           *    数据及地址线为FB_AD[15:0]
     68           *    RS:FB_AD[16]
     69           *    CS:FB_CS0
     70           *    RW:FB_FB_RW
     71           *    RD:FB_OE 
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          static void LPLD_LCD_FLEXBUS_Init(uint16 lcd_id)
     74          {
   \                     LPLD_LCD_FLEXBUS_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
     75            FB_InitTypeDef fb_init;
     76            fb_init.FB_Fbx = FB0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0004      STRB     R0,[SP, #+4]
     77            fb_init.FB_ChipSelAddress = LCD_CMD_ADDRESS;
   \   0000000C   0xF05F 0x40C0      MOVS     R0,#+1610612736
   \   00000010   0x9002             STR      R0,[SP, #+8]
     78            fb_init.FB_AutoAckEnable = TRUE;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xF88D 0x0012      STRB     R0,[SP, #+18]
     79            fb_init.FB_IsRightJustied = TRUE;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0011      STRB     R0,[SP, #+17]
     80            fb_init.FB_WateStates = 0x02;
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xF88D 0x0013      STRB     R0,[SP, #+19]
     81            fb_init.FB_PortSize = FB_SIZE_16BIT;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xF88D 0x0010      STRB     R0,[SP, #+16]
     82            fb_init.FB_AddressSpace = FB_SPACE_KB(128);   //128K
   \   0000002A   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000002E   0x9003             STR      R0,[SP, #+12]
     83            fb_init.FB_ReadAddrHold = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF88D 0x0014      STRB     R0,[SP, #+20]
     84            fb_init.FB_WriteAddrHold = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF88D 0x0015      STRB     R0,[SP, #+21]
     85            LPLD_FlexBus_Init(fb_init); 
   \   0000003C   0xA901             ADD      R1,SP,#+4
   \   0000003E   0xB084             SUB      SP,SP,#+16
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x2214             MOVS     R2,#+20
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000048   0xBC0F             POP      {R0-R3}
   \   0000004A   0x.... 0x....      BL       LPLD_FlexBus_Init
     86          }
   \   0000004E   0xB006             ADD      SP,SP,#+24
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
     87          
     88          /*
     89           * LPLD_LCD_IO_Cfg
     90           * LCD IO引脚初始化，内部调用
     91           *
     92           * 说明：
     93           * 此处初始化复位引脚，可根据实际硬件更改
     94           */

   \                                 In section .text, align 2, keep-with-next
     95          static void LPLD_LCD_IO_Cfg(void)
     96          {
   \                     LPLD_LCD_IO_Cfg: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     97            GPIO_InitTypeDef ptc_init;
     98            //RST 
     99            ptc_init.GPIO_PTx = PTC;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400ff080
   \   00000008   0x9001             STR      R0,[SP, #+4]
    100            ptc_init.GPIO_Pins = GPIO_Pin19;
   \   0000000A   0xF45F 0x2000      MOVS     R0,#+524288
   \   0000000E   0x9002             STR      R0,[SP, #+8]
    101            ptc_init.GPIO_Dir = DIR_OUTPUT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
    102            ptc_init.GPIO_Output = OUTPUT_H;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0011      STRB     R0,[SP, #+17]
    103            ptc_init.GPIO_PinControl = IRQC_DIS; 
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9003             STR      R0,[SP, #+12]
    104            LPLD_GPIO_Init(ptc_init);    
   \   00000020   0xA901             ADD      R1,SP,#+4
   \   00000022   0xB084             SUB      SP,SP,#+16
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x2214             MOVS     R2,#+20
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002C   0xBC0F             POP      {R0-R3}
   \   0000002E   0x.... 0x....      BL       LPLD_GPIO_Init
    105          }
   \   00000032   0xB007             ADD      SP,SP,#+28
   \   00000034   0xBD00             POP      {PC}             ;; return
    106          
    107          /*
    108           * LPLD_LCD_WriteIndex
    109           * LCD写控制命令，内部调用
    110           */

   \                                 In section .text, align 2, keep-with-next
    111          static void LPLD_LCD_WriteIndex(uint16 index)
    112          {
    113            *(vuint16*)LCD_CMD_ADDRESS = index;  //write
   \                     LPLD_LCD_WriteIndex: (+1)
   \   00000000   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    114          }
   \   00000006   0x4770             BX       LR               ;; return
    115          
    116          /*
    117           * LPLD_LCD_WriteData
    118           * LCD写数据，内部调用
    119           */

   \                                 In section .text, align 2, keep-with-next
    120          void LPLD_LCD_WriteData(uint16 data)
    121          {
    122            *(vuint16*)LCD_DATA_ADDRESS = data;  //write
   \                     LPLD_LCD_WriteData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x60010000
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    123          }
   \   00000006   0x4770             BX       LR               ;; return
    124          
    125          /*
    126           * LPLD_LCD_ReadData
    127           * LCD读数据，内部调用
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          static uint16 LPLD_LCD_ReadData(void)
    130          { 
    131            uint16 value;
    132            value = *(vuint16*)LCD_DATA_ADDRESS;  //read
   \                     LPLD_LCD_ReadData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x60010000
   \   00000004   0x8809             LDRH     R1,[R1, #+0]
   \   00000006   0x0008             MOVS     R0,R1
    133            return value;
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x4770             BX       LR               ;; return
    134          }
    135          
    136          /*
    137           * LPLD_LCD_WriteReg
    138           * LCD写寄存器，内部调用
    139           */

   \                                 In section .text, align 2, keep-with-next
    140          static void LPLD_LCD_WriteReg(uint16 LCD_Reg,uint16 LCD_RegValue)
    141          { 
   \                     LPLD_LCD_WriteReg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    142            /* Write 16-bit Index, then Write Reg */  
    143            LPLD_LCD_WriteIndex(LCD_Reg);         
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    144            /* Write 16-bit Reg */
    145            LPLD_LCD_WriteData(LCD_RegValue);  
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0x.... 0x....      BL       LPLD_LCD_WriteData
    146          }
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    147          
    148          /*
    149           * LPLD_LCD_ReadReg
    150           * LCD读寄存器，内部调用
    151           */

   \                                 In section .text, align 2, keep-with-next
    152          static uint16 LPLD_LCD_ReadReg(uint16 LCD_Reg)
    153          {
   \                     LPLD_LCD_ReadReg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    154            uint16 LCD_RAM;
    155            /* Write 16-bit Index (then Read Reg) */
    156            LPLD_LCD_WriteIndex(LCD_Reg);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    157            /* Read 16-bit Reg */
    158            LCD_RAM = LPLD_LCD_ReadData();      	
   \   0000000C   0x.... 0x....      BL       LPLD_LCD_ReadData
   \   00000010   0x0005             MOVS     R5,R0
    159            return LCD_RAM;
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    160          }
    161          
    162          /*
    163           * LPLD_LCD_SetCursor
    164           * 设置LCD内部GRAM光标位置，内部调用
    165           */

   \                                 In section .text, align 2, keep-with-next
    166          static void LPLD_LCD_SetCursor( uint16 Xpos, uint16 Ypos )
    167          {
   \                     LPLD_LCD_SetCursor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    168          #if(HORIZONTAL)
    169              
    170            uint16 temp = Xpos;
   \   00000006   0x0026             MOVS     R6,R4
    171            Xpos = Ypos;
   \   00000008   0x002C             MOVS     R4,R5
    172            Ypos = temp;  
   \   0000000A   0x0035             MOVS     R5,R6
    173          
    174          #else
    175                      
    176          #endif
    177            LPLD_LCD_WriteReg(LPLD_LCD_INFO.X_GRAM, Xpos );      
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000014   0x8880             LDRH     R0,[R0, #+4]
   \   00000016   0x.... 0x....      BL       LPLD_LCD_WriteReg
    178            LPLD_LCD_WriteReg(LPLD_LCD_INFO.Y_GRAM, Ypos );          
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000022   0x88C0             LDRH     R0,[R0, #+6]
   \   00000024   0x.... 0x....      BL       LPLD_LCD_WriteReg
    179          }
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    180          
    181          
    182          /*
    183           * LPLD_LCD_Reset
    184           * 复位LCD控制器，内部调用
    185           */

   \                                 In section .text, align 2, keep-with-next
    186          static void LPLD_LCD_Reset(void)
    187          {
   \                     LPLD_LCD_Reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    188            LCD_CLR_RST;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x43fe104c
   \   00000008   0x6008             STR      R0,[R1, #+0]
    189            LPLD_LCD_Delayms(10); //延时
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0x.... 0x....      BL       LPLD_LCD_Delayms
    190            LCD_SET_RST;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x43fe104c
   \   00000016   0x6008             STR      R0,[R1, #+0]
    191          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    192          
    193          /*
    194           * LPLD_LCD_Init
    195           * LCD初始化
    196           * 
    197           * 参数:
    198           *    无
    199           *
    200           * 输出:
    201           *    LCD控制型号
    202           *    0x9320--9320
    203           *    0x8989--8989
    204           */

   \                                 In section .text, align 2, keep-with-next
    205          uint16 LPLD_LCD_Init(void)
    206          {
   \                     LPLD_LCD_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    207            uint16 dID;
    208             
    209            LPLD_LCD_FLEXBUS_Init(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LPLD_LCD_FLEXBUS_Init
    210            LPLD_LCD_IO_Cfg();
   \   00000008   0x.... 0x....      BL       LPLD_LCD_IO_Cfg
    211            LPLD_LCD_Delayms(500);
   \   0000000C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000010   0x.... 0x....      BL       LPLD_LCD_Delayms
    212            
    213            LPLD_LCD_Reset();                 //硬件复位
   \   00000014   0x.... 0x....      BL       LPLD_LCD_Reset
    214            
    215            dID = LPLD_LCD_ReadReg(0x0000);   //获取LCD控制器设备ID
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       LPLD_LCD_ReadReg
   \   0000001E   0x0004             MOVS     R4,R0
    216              
    217            LPLD_LCD_INFO.Lcd_Id = dID;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000024   0x8004             STRH     R4,[R0, #+0]
    218            
    219            if(dID == 0x9320)
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0xF249 0x3020      MOVW     R0,#+37664
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xF040 0x80FB      BNE.W    ??LPLD_LCD_Init_0
    220            {
    221              LPLD_LCD_INFO.Write_GRAM = 0x0022;
   \   00000032   0x2022             MOVS     R0,#+34
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable19_2
   \   00000038   0x8048             STRH     R0,[R1, #+2]
    222              LPLD_LCD_INFO.X_GRAM = 0x0020;
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable19_2
   \   00000040   0x8088             STRH     R0,[R1, #+4]
    223              LPLD_LCD_INFO.Y_GRAM = 0x0021;
   \   00000042   0x2021             MOVS     R0,#+33
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable19_2
   \   00000048   0x80C8             STRH     R0,[R1, #+6]
    224              
    225              LPLD_LCD_WriteReg(0x00,0x0001);   //开启LCD内部晶振，并等待10ms稳定
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    226              LPLD_LCD_Delayms(10);
   \   00000052   0x200A             MOVS     R0,#+10
   \   00000054   0x.... 0x....      BL       LPLD_LCD_Delayms
    227              
    228              LPLD_LCD_WriteReg(0x01,0x0000);   //Driver Output Control
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       LPLD_LCD_WriteReg
    229              LPLD_LCD_WriteReg(0x02,0x0700);   //LCD Driving Wave Control
   \   00000060   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       LPLD_LCD_WriteReg
    230              LPLD_LCD_WriteReg(0x03,0x1008);   //Entry Mode
   \   0000006A   0xF241 0x0108      MOVW     R1,#+4104
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0x.... 0x....      BL       LPLD_LCD_WriteReg
    231              LPLD_LCD_WriteReg(0x04,0x0000);   //Resizing Control
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x2004             MOVS     R0,#+4
   \   00000078   0x.... 0x....      BL       LPLD_LCD_WriteReg
    232              LPLD_LCD_WriteReg(0x08,0x0202);   //Display Control 2
   \   0000007C   0xF240 0x2102      MOVW     R1,#+514
   \   00000080   0x2008             MOVS     R0,#+8
   \   00000082   0x.... 0x....      BL       LPLD_LCD_WriteReg
    233              LPLD_LCD_WriteReg(0x09,0x0000);   //Display Contral 3.(0x0000)
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x2009             MOVS     R0,#+9
   \   0000008A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    234              LPLD_LCD_WriteReg(0x0a,0x0000);//Frame Cycle Contal.(0x0000)
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x200A             MOVS     R0,#+10
   \   00000092   0x.... 0x....      BL       LPLD_LCD_WriteReg
    235              LPLD_LCD_WriteReg(0x0c,0x0001);//Extern Display Interface Contral 1.(0x0000)
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x200C             MOVS     R0,#+12
   \   0000009A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    236              LPLD_LCD_WriteReg(0x0d,0x0000);//Frame Maker Position.
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x200D             MOVS     R0,#+13
   \   000000A2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    237              LPLD_LCD_WriteReg(0x0f,0x0000);//Extern Display Interface Contral 2.
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x200F             MOVS     R0,#+15
   \   000000AA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    238              
    239              LPLD_LCD_WriteReg(0x10,0x0000);//Power Control 1.(0x16b0)
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x2010             MOVS     R0,#+16
   \   000000B2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    240              LPLD_LCD_WriteReg(0x11,0x0000);//Power Control 2.(0x0001)	
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x2011             MOVS     R0,#+17
   \   000000BA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    241              LPLD_LCD_WriteReg(0x12,0x0000);//Power Control 3.(0x0138)
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x2012             MOVS     R0,#+18
   \   000000C2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    242              LPLD_LCD_WriteReg(0x13,0x0000);
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x2013             MOVS     R0,#+19
   \   000000CA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    243              //LPLD_LCD_Delayms(200);	
    244              
    245              LPLD_LCD_WriteReg(0x10,0x17b0);//Power Control 1.(0x16b0)
   \   000000CE   0xF241 0x71B0      MOVW     R1,#+6064
   \   000000D2   0x2010             MOVS     R0,#+16
   \   000000D4   0x.... 0x....      BL       LPLD_LCD_WriteReg
    246              LPLD_LCD_WriteReg(0x11,0x0137);//Power Control 2.(0x0001)
   \   000000D8   0xF240 0x1137      MOVW     R1,#+311
   \   000000DC   0x2011             MOVS     R0,#+17
   \   000000DE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    247              LPLD_LCD_Delayms(50);
   \   000000E2   0x2032             MOVS     R0,#+50
   \   000000E4   0x.... 0x....      BL       LPLD_LCD_Delayms
    248              LPLD_LCD_WriteReg(0x12,0x0139);//Power Control 3.(0x0138)
   \   000000E8   0xF240 0x1139      MOVW     R1,#+313
   \   000000EC   0x2012             MOVS     R0,#+18
   \   000000EE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    249              LPLD_LCD_Delayms(50);	
   \   000000F2   0x2032             MOVS     R0,#+50
   \   000000F4   0x.... 0x....      BL       LPLD_LCD_Delayms
    250              LPLD_LCD_WriteReg(0x13,0x1700);	 
   \   000000F8   0xF44F 0x51B8      MOV      R1,#+5888
   \   000000FC   0x2013             MOVS     R0,#+19
   \   000000FE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    251             
    252              LPLD_LCD_WriteReg(0x29,0x0000);
   \   00000102   0x2100             MOVS     R1,#+0
   \   00000104   0x2029             MOVS     R0,#+41
   \   00000106   0x.... 0x....      BL       LPLD_LCD_WriteReg
    253              LPLD_LCD_WriteReg(0x2B,0x0000);
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x202B             MOVS     R0,#+43
   \   0000010E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    254              LPLD_LCD_Delayms(50);						
   \   00000112   0x2032             MOVS     R0,#+50
   \   00000114   0x.... 0x....      BL       LPLD_LCD_Delayms
    255              
    256              LPLD_LCD_WriteReg(0x30,0x0000);					
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x2030             MOVS     R0,#+48
   \   0000011C   0x.... 0x....      BL       LPLD_LCD_WriteReg
    257              LPLD_LCD_WriteReg(0x31,0x0507);
   \   00000120   0xF240 0x5107      MOVW     R1,#+1287
   \   00000124   0x2031             MOVS     R0,#+49
   \   00000126   0x.... 0x....      BL       LPLD_LCD_WriteReg
    258              LPLD_LCD_WriteReg(0x32,0x0104);	
   \   0000012A   0xF44F 0x7182      MOV      R1,#+260
   \   0000012E   0x2032             MOVS     R0,#+50
   \   00000130   0x.... 0x....      BL       LPLD_LCD_WriteReg
    259              LPLD_LCD_WriteReg(0x35,0x0105);	
   \   00000134   0xF240 0x1105      MOVW     R1,#+261
   \   00000138   0x2035             MOVS     R0,#+53
   \   0000013A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    260              LPLD_LCD_WriteReg(0x36,0x0404);
   \   0000013E   0xF240 0x4104      MOVW     R1,#+1028
   \   00000142   0x2036             MOVS     R0,#+54
   \   00000144   0x.... 0x....      BL       LPLD_LCD_WriteReg
    261              LPLD_LCD_WriteReg(0x37,0x0603);	
   \   00000148   0xF240 0x6103      MOVW     R1,#+1539
   \   0000014C   0x2037             MOVS     R0,#+55
   \   0000014E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    262              LPLD_LCD_WriteReg(0x38,0x0004);	
   \   00000152   0x2104             MOVS     R1,#+4
   \   00000154   0x2038             MOVS     R0,#+56
   \   00000156   0x.... 0x....      BL       LPLD_LCD_WriteReg
    263              LPLD_LCD_WriteReg(0x39,0x0007);
   \   0000015A   0x2107             MOVS     R1,#+7
   \   0000015C   0x2039             MOVS     R0,#+57
   \   0000015E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    264              LPLD_LCD_WriteReg(0x3c,0x0501);	
   \   00000162   0xF240 0x5101      MOVW     R1,#+1281
   \   00000166   0x203C             MOVS     R0,#+60
   \   00000168   0x.... 0x....      BL       LPLD_LCD_WriteReg
    265              LPLD_LCD_WriteReg(0x3d,0x0404);
   \   0000016C   0xF240 0x4104      MOVW     R1,#+1028
   \   00000170   0x203D             MOVS     R0,#+61
   \   00000172   0x.... 0x....      BL       LPLD_LCD_WriteReg
    266              
    267              LPLD_LCD_WriteReg(0x0050,0x0000);
   \   00000176   0x2100             MOVS     R1,#+0
   \   00000178   0x2050             MOVS     R0,#+80
   \   0000017A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    268              LPLD_LCD_WriteReg(0x0051,239);
   \   0000017E   0x21EF             MOVS     R1,#+239
   \   00000180   0x2051             MOVS     R0,#+81
   \   00000182   0x.... 0x....      BL       LPLD_LCD_WriteReg
    269              LPLD_LCD_WriteReg(0x0052,0x0000);
   \   00000186   0x2100             MOVS     R1,#+0
   \   00000188   0x2052             MOVS     R0,#+82
   \   0000018A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    270              LPLD_LCD_WriteReg(0x0053,319);
   \   0000018E   0xF240 0x113F      MOVW     R1,#+319
   \   00000192   0x2053             MOVS     R0,#+83
   \   00000194   0x.... 0x....      BL       LPLD_LCD_WriteReg
    271            
    272              LPLD_LCD_WriteReg(0x60,0x2700);//Driver Output Control.
   \   00000198   0xF44F 0x511C      MOV      R1,#+9984
   \   0000019C   0x2060             MOVS     R0,#+96
   \   0000019E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    273              LPLD_LCD_WriteReg(0x61,0x0001);//Driver Output Control.
   \   000001A2   0x2101             MOVS     R1,#+1
   \   000001A4   0x2061             MOVS     R0,#+97
   \   000001A6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    274              LPLD_LCD_WriteReg(0x6a,0x0000);//Vertical Srcoll Control.
   \   000001AA   0x2100             MOVS     R1,#+0
   \   000001AC   0x206A             MOVS     R0,#+106
   \   000001AE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    275              
    276              LPLD_LCD_WriteReg(0x80,0x0000);//Display Position? Partial Display 1.
   \   000001B2   0x2100             MOVS     R1,#+0
   \   000001B4   0x2080             MOVS     R0,#+128
   \   000001B6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    277              LPLD_LCD_WriteReg(0x81,0x0000);//RAM Address Start? Partial Display 1.
   \   000001BA   0x2100             MOVS     R1,#+0
   \   000001BC   0x2081             MOVS     R0,#+129
   \   000001BE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    278              LPLD_LCD_WriteReg(0x82,0x0000);//RAM Address End-Partial Display 1.
   \   000001C2   0x2100             MOVS     R1,#+0
   \   000001C4   0x2082             MOVS     R0,#+130
   \   000001C6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    279              LPLD_LCD_WriteReg(0x83,0x0000);//Displsy Position? Partial Display 2.
   \   000001CA   0x2100             MOVS     R1,#+0
   \   000001CC   0x2083             MOVS     R0,#+131
   \   000001CE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    280              LPLD_LCD_WriteReg(0x84,0x0000);//RAM Address Start? Partial Display 2.
   \   000001D2   0x2100             MOVS     R1,#+0
   \   000001D4   0x2084             MOVS     R0,#+132
   \   000001D6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    281              LPLD_LCD_WriteReg(0x85,0x0000);//RAM Address End? Partial Display 2.
   \   000001DA   0x2100             MOVS     R1,#+0
   \   000001DC   0x2085             MOVS     R0,#+133
   \   000001DE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    282              
    283              LPLD_LCD_WriteReg(0x90,0x0010);//Frame Cycle Contral.(0x0013)
   \   000001E2   0x2110             MOVS     R1,#+16
   \   000001E4   0x2090             MOVS     R0,#+144
   \   000001E6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    284              LPLD_LCD_WriteReg(0x92,0x0000);//Panel Interface Contral 2.(0x0000)
   \   000001EA   0x2100             MOVS     R1,#+0
   \   000001EC   0x2092             MOVS     R0,#+146
   \   000001EE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    285              LPLD_LCD_WriteReg(0x93,0x0003);//Panel Interface Contral 3.
   \   000001F2   0x2103             MOVS     R1,#+3
   \   000001F4   0x2093             MOVS     R0,#+147
   \   000001F6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    286              LPLD_LCD_WriteReg(0x95,0x0110);//Frame Cycle Contral.(0x0110)
   \   000001FA   0xF44F 0x7188      MOV      R1,#+272
   \   000001FE   0x2095             MOVS     R0,#+149
   \   00000200   0x.... 0x....      BL       LPLD_LCD_WriteReg
    287              LPLD_LCD_WriteReg(0x97,0x0000);//
   \   00000204   0x2100             MOVS     R1,#+0
   \   00000206   0x2097             MOVS     R0,#+151
   \   00000208   0x.... 0x....      BL       LPLD_LCD_WriteReg
    288              LPLD_LCD_WriteReg(0x98,0x0000);//Frame Cycle Contral.
   \   0000020C   0x2100             MOVS     R1,#+0
   \   0000020E   0x2098             MOVS     R0,#+152
   \   00000210   0x.... 0x....      BL       LPLD_LCD_WriteReg
    289          
    290              LPLD_LCD_WriteReg(0x07,0x0133);
   \   00000214   0xF240 0x1133      MOVW     R1,#+307
   \   00000218   0x2007             MOVS     R0,#+7
   \   0000021A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    291              LPLD_LCD_Delayms(300);
   \   0000021E   0xF44F 0x7096      MOV      R0,#+300
   \   00000222   0x.... 0x....      BL       LPLD_LCD_Delayms
   \   00000226   0xE124             B.N      ??LPLD_LCD_Init_1
    292            }  
    293            else if(dID == 0x8989)
   \                     ??LPLD_LCD_Init_0: (+1)
   \   00000228   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000022A   0xF648 0x1089      MOVW     R0,#+35209
   \   0000022E   0x4284             CMP      R4,R0
   \   00000230   0xF040 0x811F      BNE.W    ??LPLD_LCD_Init_1
    294            {
    295              LPLD_LCD_INFO.Write_GRAM = 0x0022;
   \   00000234   0x2022             MOVS     R0,#+34
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable19_2
   \   0000023A   0x8048             STRH     R0,[R1, #+2]
    296              LPLD_LCD_INFO.X_GRAM = 0x004e;
   \   0000023C   0x204E             MOVS     R0,#+78
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable19_2
   \   00000242   0x8088             STRH     R0,[R1, #+4]
    297              LPLD_LCD_INFO.Y_GRAM = 0x004f;
   \   00000244   0x204F             MOVS     R0,#+79
   \   00000246   0x.... 0x....      LDR.W    R1,??DataTable19_2
   \   0000024A   0x80C8             STRH     R0,[R1, #+6]
    298              
    299              //SSD1289;
    300              /* 打开晶振 */
    301              LPLD_LCD_WriteReg(0x0000,0x0001);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   0000024C   0x2101             MOVS     R1,#+1
   \   0000024E   0x2000             MOVS     R0,#+0
   \   00000250   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000254   0x2002             MOVS     R0,#+2
   \   00000256   0x.... 0x....      BL       LPLD_LCD_Delayms
    302              //启动频率设置为最大osc/16 消耗功率设置在large档位，提高显示画质
    303              //LPLD_LCD_WriteReg(0x0003,0xF8F8);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    304              LPLD_LCD_WriteReg(0x0003,0xA8A4);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   //0210
   \   0000025A   0xF64A 0x01A4      MOVW     R1,#+43172
   \   0000025E   0x2003             MOVS     R0,#+3
   \   00000260   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000264   0x2002             MOVS     R0,#+2
   \   00000266   0x.... 0x....      BL       LPLD_LCD_Delayms
    305              LPLD_LCD_WriteReg(0x000C,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   0000026A   0x2100             MOVS     R1,#+0
   \   0000026C   0x200C             MOVS     R0,#+12
   \   0000026E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000272   0x2002             MOVS     R0,#+2
   \   00000274   0x.... 0x....      BL       LPLD_LCD_Delayms
    306              LPLD_LCD_WriteReg(0x000D,0x080C);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   00000278   0xF640 0x010C      MOVW     R1,#+2060
   \   0000027C   0x200D             MOVS     R0,#+13
   \   0000027E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000282   0x2002             MOVS     R0,#+2
   \   00000284   0x.... 0x....      BL       LPLD_LCD_Delayms
    307              LPLD_LCD_WriteReg(0x000E,0x2B00);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   00000288   0xF44F 0x512C      MOV      R1,#+11008
   \   0000028C   0x200E             MOVS     R0,#+14
   \   0000028E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000292   0x2002             MOVS     R0,#+2
   \   00000294   0x.... 0x....      BL       LPLD_LCD_Delayms
    308              LPLD_LCD_WriteReg(0x001E,0x00B0);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   00000298   0x21B0             MOVS     R1,#+176
   \   0000029A   0x201E             MOVS     R0,#+30
   \   0000029C   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002A0   0x2002             MOVS     R0,#+2
   \   000002A2   0x.... 0x....      BL       LPLD_LCD_Delayms
    309              //驱动输出控制320*240 0x2B3F 
    310              LPLD_LCD_WriteReg(0x0001,0x2B3F);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   000002A6   0xF642 0x313F      MOVW     R1,#+11071
   \   000002AA   0x2001             MOVS     R0,#+1
   \   000002AC   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002B0   0x2002             MOVS     R0,#+2
   \   000002B2   0x.... 0x....      BL       LPLD_LCD_Delayms
    311              //驱动输出控制320*240 0x233F 将原来的第11位BGR清零这样输出是RGB就不会红色与蓝色颠倒 
    312              //LPLD_LCD_WriteReg(0x0001,0x233F);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
    313              LPLD_LCD_WriteReg(0x0002,0x0600);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002B6   0xF44F 0x61C0      MOV      R1,#+1536
   \   000002BA   0x2002             MOVS     R0,#+2
   \   000002BC   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002C0   0x2002             MOVS     R0,#+2
   \   000002C2   0x.... 0x....      BL       LPLD_LCD_Delayms
    314              LPLD_LCD_WriteReg(0x0010,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002C6   0x2100             MOVS     R1,#+0
   \   000002C8   0x2010             MOVS     R0,#+16
   \   000002CA   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002CE   0x2002             MOVS     R0,#+2
   \   000002D0   0x.... 0x....      BL       LPLD_LCD_Delayms
    315              /* 定义数据格式 16位色 横屏 0x6070 */
    316              // TY1（bit7） TY0 ID1 ID0 AM LG2 LG1 LG0
    317              //   0          0   1   1   1  0   0   0
    318              // type A  0 0
    319              // type B  0 1
    320              // type C  1 1
    321              // AM   指针自动增加
    322              // 65K颜色
    323              // 寄存器 4f/4e 定义窗口大小
    324              LPLD_LCD_WriteReg(0x0011,0x6028);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   000002D4   0xF246 0x0128      MOVW     R1,#+24616
   \   000002D8   0x2011             MOVS     R0,#+17
   \   000002DA   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002DE   0x2002             MOVS     R0,#+2
   \   000002E0   0x.... 0x....      BL       LPLD_LCD_Delayms
    325              //LPLD_LCD_WriteReg(0x0011,0x6070);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
    326              //
    327              LPLD_LCD_WriteReg(0x0005,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002E4   0x2100             MOVS     R1,#+0
   \   000002E6   0x2005             MOVS     R0,#+5
   \   000002E8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002EC   0x2002             MOVS     R0,#+2
   \   000002EE   0x.... 0x....      BL       LPLD_LCD_Delayms
    328              LPLD_LCD_WriteReg(0x0006,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002F2   0x2100             MOVS     R1,#+0
   \   000002F4   0x2006             MOVS     R0,#+6
   \   000002F6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002FA   0x2002             MOVS     R0,#+2
   \   000002FC   0x.... 0x....      BL       LPLD_LCD_Delayms
    329              LPLD_LCD_WriteReg(0x0016,0xEF1C);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000300   0xF64E 0x711C      MOVW     R1,#+61212
   \   00000304   0x2016             MOVS     R0,#+22
   \   00000306   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000030A   0x2002             MOVS     R0,#+2
   \   0000030C   0x.... 0x....      BL       LPLD_LCD_Delayms
    330              LPLD_LCD_WriteReg(0x0017,0x0003);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000310   0x2103             MOVS     R1,#+3
   \   00000312   0x2017             MOVS     R0,#+23
   \   00000314   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000318   0x2002             MOVS     R0,#+2
   \   0000031A   0x.... 0x....      BL       LPLD_LCD_Delayms
    331              //PT1 PT0 VLE2 VLE1 SPT 0  0 GON DTE CM 0 D1 D0
    332              //  0   0        1   0  0  0  1   1  0  0  1  1
    333              LPLD_LCD_WriteReg(0x0007,0x0233);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000031E   0xF240 0x2133      MOVW     R1,#+563
   \   00000322   0x2007             MOVS     R0,#+7
   \   00000324   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000328   0x2002             MOVS     R0,#+2
   \   0000032A   0x.... 0x....      BL       LPLD_LCD_Delayms
    334              //LPLD_LCD_WriteReg(0x0007,0x0133);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    335              //NO1 NO0 SDT1 SDT0 0 EQ2 EQ1 EQ0 DIV1 DIV0 SDIV SRTN RTN3 RTN2 RTN1 RTN0
    336              //                                 1     1    0    0    0    0   0   0
    337              //将DIV设置成2分频
    338              //
    339              //LPLD_LCD_WriteReg(0x000B,0x0020);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    340              LPLD_LCD_WriteReg(0x000B,0x0020);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000032E   0x2120             MOVS     R1,#+32
   \   00000330   0x200B             MOVS     R0,#+11
   \   00000332   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000336   0x2002             MOVS     R0,#+2
   \   00000338   0x.... 0x....      BL       LPLD_LCD_Delayms
    341              //配置扫描模式
    342              LPLD_LCD_WriteReg(0x000F,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   0000033C   0x2100             MOVS     R1,#+0
   \   0000033E   0x200F             MOVS     R0,#+15
   \   00000340   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000344   0x2002             MOVS     R0,#+2
   \   00000346   0x.... 0x....      BL       LPLD_LCD_Delayms
    343              /* 扫描开始地址 */
    344              //垂直控制
    345              LPLD_LCD_WriteReg(0x0041,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000034A   0x2100             MOVS     R1,#+0
   \   0000034C   0x2041             MOVS     R0,#+65
   \   0000034E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000352   0x2002             MOVS     R0,#+2
   \   00000354   0x.... 0x....      BL       LPLD_LCD_Delayms
    346              LPLD_LCD_WriteReg(0x0042,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000358   0x2100             MOVS     R1,#+0
   \   0000035A   0x2042             MOVS     R0,#+66
   \   0000035C   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000360   0x2002             MOVS     R0,#+2
   \   00000362   0x.... 0x....      BL       LPLD_LCD_Delayms
    347              //水平RAMposition
    348              LPLD_LCD_WriteReg(0x0048,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000366   0x2100             MOVS     R1,#+0
   \   00000368   0x2048             MOVS     R0,#+72
   \   0000036A   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000036E   0x2002             MOVS     R0,#+2
   \   00000370   0x.... 0x....      BL       LPLD_LCD_Delayms
    349              LPLD_LCD_WriteReg(0x0049,0x013F);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000374   0xF240 0x113F      MOVW     R1,#+319
   \   00000378   0x2049             MOVS     R0,#+73
   \   0000037A   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000037E   0x2002             MOVS     R0,#+2
   \   00000380   0x.... 0x....      BL       LPLD_LCD_Delayms
    350              
    351              LPLD_LCD_WriteReg(0x004A,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000384   0x2100             MOVS     R1,#+0
   \   00000386   0x204A             MOVS     R0,#+74
   \   00000388   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000038C   0x2002             MOVS     R0,#+2
   \   0000038E   0x.... 0x....      BL       LPLD_LCD_Delayms
    352              LPLD_LCD_WriteReg(0x004B,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   00000392   0x2100             MOVS     R1,#+0
   \   00000394   0x204B             MOVS     R0,#+75
   \   00000396   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000039A   0x2002             MOVS     R0,#+2
   \   0000039C   0x.... 0x....      BL       LPLD_LCD_Delayms
    353              
    354              LPLD_LCD_WriteReg(0x0030,0x0707);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003A0   0xF240 0x7107      MOVW     R1,#+1799
   \   000003A4   0x2030             MOVS     R0,#+48
   \   000003A6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003AA   0x2002             MOVS     R0,#+2
   \   000003AC   0x.... 0x....      BL       LPLD_LCD_Delayms
    355              LPLD_LCD_WriteReg(0x0031,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003B0   0xF44F 0x7101      MOV      R1,#+516
   \   000003B4   0x2031             MOVS     R0,#+49
   \   000003B6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003BA   0x2002             MOVS     R0,#+2
   \   000003BC   0x.... 0x....      BL       LPLD_LCD_Delayms
    356              LPLD_LCD_WriteReg(0x0032,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003C0   0xF44F 0x7101      MOV      R1,#+516
   \   000003C4   0x2032             MOVS     R0,#+50
   \   000003C6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003CA   0x2002             MOVS     R0,#+2
   \   000003CC   0x.... 0x....      BL       LPLD_LCD_Delayms
    357              LPLD_LCD_WriteReg(0x0033,0x0502);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003D0   0xF240 0x5102      MOVW     R1,#+1282
   \   000003D4   0x2033             MOVS     R0,#+51
   \   000003D6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003DA   0x2002             MOVS     R0,#+2
   \   000003DC   0x.... 0x....      BL       LPLD_LCD_Delayms
    358              LPLD_LCD_WriteReg(0x0034,0x0507);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003E0   0xF240 0x5107      MOVW     R1,#+1287
   \   000003E4   0x2034             MOVS     R0,#+52
   \   000003E6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003EA   0x2002             MOVS     R0,#+2
   \   000003EC   0x.... 0x....      BL       LPLD_LCD_Delayms
    359              LPLD_LCD_WriteReg(0x0035,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003F0   0xF44F 0x7101      MOV      R1,#+516
   \   000003F4   0x2035             MOVS     R0,#+53
   \   000003F6   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003FA   0x2002             MOVS     R0,#+2
   \   000003FC   0x.... 0x....      BL       LPLD_LCD_Delayms
    360              LPLD_LCD_WriteReg(0x0036,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000400   0xF44F 0x7101      MOV      R1,#+516
   \   00000404   0x2036             MOVS     R0,#+54
   \   00000406   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000040A   0x2002             MOVS     R0,#+2
   \   0000040C   0x.... 0x....      BL       LPLD_LCD_Delayms
    361              LPLD_LCD_WriteReg(0x0037,0x0502);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000410   0xF240 0x5102      MOVW     R1,#+1282
   \   00000414   0x2037             MOVS     R0,#+55
   \   00000416   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000041A   0x2002             MOVS     R0,#+2
   \   0000041C   0x.... 0x....      BL       LPLD_LCD_Delayms
    362              LPLD_LCD_WriteReg(0x003A,0x0302);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000420   0xF240 0x3102      MOVW     R1,#+770
   \   00000424   0x203A             MOVS     R0,#+58
   \   00000426   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000042A   0x2002             MOVS     R0,#+2
   \   0000042C   0x.... 0x....      BL       LPLD_LCD_Delayms
    363              LPLD_LCD_WriteReg(0x003B,0x0302);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000430   0xF240 0x3102      MOVW     R1,#+770
   \   00000434   0x203B             MOVS     R0,#+59
   \   00000436   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000043A   0x2002             MOVS     R0,#+2
   \   0000043C   0x.... 0x....      BL       LPLD_LCD_Delayms
    364              LPLD_LCD_WriteReg(0x0023,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000440   0x2100             MOVS     R1,#+0
   \   00000442   0x2023             MOVS     R0,#+35
   \   00000444   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000448   0x2002             MOVS     R0,#+2
   \   0000044A   0x.... 0x....      BL       LPLD_LCD_Delayms
    365              LPLD_LCD_WriteReg(0x0024,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000044E   0x2100             MOVS     R1,#+0
   \   00000450   0x2024             MOVS     R0,#+36
   \   00000452   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000456   0x2002             MOVS     R0,#+2
   \   00000458   0x.... 0x....      BL       LPLD_LCD_Delayms
    366              /*0000 390K  50 
    367                0010 430K  55 
    368                0101 470K  60 
    369                1000 510K  65 
    370                1010 548K  70 
    371                1100 587K  75 
    372                1110 626K  80 */
    373              //LPLD_LCD_WriteReg(0x0025,0x8000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    374              LPLD_LCD_WriteReg(0x0025,0xe000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000045C   0xF44F 0x4160      MOV      R1,#+57344
   \   00000460   0x2025             MOVS     R0,#+37
   \   00000462   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000466   0x2002             MOVS     R0,#+2
   \   00000468   0x.... 0x....      BL       LPLD_LCD_Delayms
    375              //设定显示窗口       
    376              //LPLD_LCD_UpdateData();	//更新写入的数据使之生效*/
    377              LPLD_LCD_Delayms(20);         //等待LCD启动
   \   0000046C   0x2014             MOVS     R0,#+20
   \   0000046E   0x.... 0x....      BL       LPLD_LCD_Delayms
    378            }
    379            
    380            return dID;
   \                     ??LPLD_LCD_Init_1: (+1)
   \   00000472   0x0020             MOVS     R0,R4
   \   00000474   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000476   0xBD10             POP      {R4,PC}          ;; return
    381          }
    382          
    383          /*
    384           * LPLD_LCD_FillBackground
    385           * 填充LCD背景色
    386           * 
    387           * 参数:
    388           *    Color--16位RGB颜色值
    389           *
    390           * 输出:
    391           *    无
    392           */

   \                                 In section .text, align 2, keep-with-next
    393          void LPLD_LCD_FillBackground(uint16 Color)
    394          {
   \                     LPLD_LCD_FillBackground: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    395            uint32_t index=0;
   \   00000004   0x2500             MOVS     R5,#+0
    396            LPLD_LCD_SetCursor(0,0); 
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       LPLD_LCD_SetCursor
    397            LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000012   0x8840             LDRH     R0,[R0, #+2]
   \   00000014   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    398            for( index = 0; index < MAX_X * MAX_Y; index++ )
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0005             MOVS     R5,R0
   \                     ??LPLD_LCD_FillBackground_0: (+1)
   \   0000001C   0xF5B5 0x3F96      CMP      R5,#+76800
   \   00000020   0xD205             BCS.N    ??LPLD_LCD_FillBackground_1
    399            {
    400              LPLD_LCD_WriteData(Color);
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x.... 0x....      BL       LPLD_LCD_WriteData
    401            }
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \   0000002C   0xE7F6             B.N      ??LPLD_LCD_FillBackground_0
    402          }
   \                     ??LPLD_LCD_FillBackground_1: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    403          
    404          /*
    405           * LPLD_LCD_FillBackgroundGRAM
    406           * 填充LCD背景色到LCD_GRAM
    407           * 
    408           * 参数:
    409           *    *Color--16位RGB颜色值数组，长度为LCD_GRAM数组的长度
    410           *
    411           * 输出:
    412           *    无
    413           */

   \                                 In section .text, align 2, keep-with-next
    414          void LPLD_LCD_FillBackgroundGRAM(uint16 *Color)
    415          {
   \                     LPLD_LCD_FillBackgroundGRAM: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    416            uint32_t index=0;
   \   00000004   0x2500             MOVS     R5,#+0
    417            LPLD_LCD_SetCursor(0,0); 
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       LPLD_LCD_SetCursor
    418            LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000012   0x8840             LDRH     R0,[R0, #+2]
   \   00000014   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    419            for( index = 0; index < MAX_X * MAX_Y; index++ )
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0005             MOVS     R5,R0
   \                     ??LPLD_LCD_FillBackgroundGRAM_0: (+1)
   \   0000001C   0xF5B5 0x3F96      CMP      R5,#+76800
   \   00000020   0xD205             BCS.N    ??LPLD_LCD_FillBackgroundGRAM_1
    420            {
    421              LPLD_LCD_WriteData(Color[index]);
   \   00000022   0xF834 0x0015      LDRH     R0,[R4, R5, LSL #+1]
   \   00000026   0x.... 0x....      BL       LPLD_LCD_WriteData
    422            }
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \   0000002C   0xE7F6             B.N      ??LPLD_LCD_FillBackgroundGRAM_0
    423          }
   \                     ??LPLD_LCD_FillBackgroundGRAM_1: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    424          
    425          /*
    426           * LPLD_LCD_BGR2RGB
    427           * BGR颜色转RGB颜色
    428           * 
    429           * 参数:
    430           *    Color--16位BGR颜色值
    431           *
    432           * 输出:
    433           *    16位RGB颜色值
    434           */

   \                                 In section .text, align 2, keep-with-next
    435          uint16 LPLD_LCD_BGR2RGB(uint16 Color)
    436          {
   \                     LPLD_LCD_BGR2RGB: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0001             MOVS     R1,R0
    437            uint16  r, g, b, rgb;
    438            
    439            b = ( Color>>0 )  & 0x1f;
   \   00000004   0xF011 0x051F      ANDS     R5,R1,#0x1F
   \   00000008   0x002C             MOVS     R4,R5
    440            g = ( Color>>5 )  & 0x3f;
   \   0000000A   0xF3C1 0x1545      UBFX     R5,R1,#+5,#+6
   \   0000000E   0x002B             MOVS     R3,R5
    441            r = ( Color>>11 ) & 0x1f;
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x0ACD             LSRS     R5,R1,#+11
   \   00000014   0x002A             MOVS     R2,R5
    442            
    443            rgb =  (b<<11) + (g<<5) + (r<<0);
   \   00000016   0x015D             LSLS     R5,R3,#+5
   \   00000018   0xEB15 0x25C4      ADDS     R5,R5,R4, LSL #+11
   \   0000001C   0x1955             ADDS     R5,R2,R5
   \   0000001E   0x0028             MOVS     R0,R5
    444            
    445            return( rgb );
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0xBC30             POP      {R4,R5}
   \   00000024   0x4770             BX       LR               ;; return
    446          }
    447          
    448          /*
    449           * LPLD_LCD_U8GRAY2RGB
    450           * U8灰度颜色转为RGB颜色
    451           * 
    452           * 参数:
    453           *    Color--8位灰度颜色值
    454           *
    455           * 输出:
    456           *    16位RGB颜色值
    457           */

   \                                 In section .text, align 2, keep-with-next
    458          uint16 LPLD_LCD_U8GRAY2RGB(uint8 Color)
    459          {
   \                     LPLD_LCD_U8GRAY2RGB: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0001             MOVS     R1,R0
    460            uint16  r, g, b, rgb;
    461            
    462            b = ( Color>>3 )  & 0x1f;
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x08CD             LSRS     R5,R1,#+3
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x002C             MOVS     R4,R5
    463            g = ( Color>>2 )  & 0x3f;
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x088D             LSRS     R5,R1,#+2
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x002B             MOVS     R3,R5
    464            r = ( Color>>3 )  & 0x1f;
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x08CD             LSRS     R5,R1,#+3
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x002A             MOVS     R2,R5
    465            
    466            rgb =  (b<<11) + (g<<5) + (r<<0);
   \   0000001C   0x015D             LSLS     R5,R3,#+5
   \   0000001E   0xEB15 0x25C4      ADDS     R5,R5,R4, LSL #+11
   \   00000022   0x1955             ADDS     R5,R2,R5
   \   00000024   0x0028             MOVS     R0,R5
    467            
    468            return( rgb );
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0x4770             BX       LR               ;; return
    469          }
    470          
    471          /*
    472           * LPLD_LCD_GetPoint
    473           * 取得LCD某点的16位RGB值
    474           * 
    475           * 参数:
    476           *    Xpos--X轴坐标
    477           *    Ypos--Y轴坐标
    478           *
    479           * 输出:
    480           *    16位RGB颜色值
    481           */

   \                                 In section .text, align 2, keep-with-next
    482          uint16 LPLD_LCD_GetPoint(uint16 Xpos,uint16 Ypos)
    483          {
   \                     LPLD_LCD_GetPoint: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    484            uint16 dummy;
    485            
    486            LPLD_LCD_SetCursor(Xpos,Ypos);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       LPLD_LCD_SetCursor
    487            LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);  
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000016   0x8840             LDRH     R0,[R0, #+2]
   \   00000018   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    488           
    489            dummy = LPLD_LCD_ReadData();   /* 空读一次 */
   \   0000001C   0x.... 0x....      BL       LPLD_LCD_ReadData
   \   00000020   0x0006             MOVS     R6,R0
    490            dummy = LPLD_LCD_ReadData(); 
   \   00000022   0x.... 0x....      BL       LPLD_LCD_ReadData
   \   00000026   0x0006             MOVS     R6,R0
    491            return  dummy;	          
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xBD70             POP      {R4-R6,PC}       ;; return
    492          }
    493          
    494          /*
    495           * LPLD_LCD_SetPoint
    496           * 设置LCD某点的16位RGB值
    497           * 
    498           * 参数:
    499           *    Xpos--X轴坐标
    500           *    Ypos--Y轴坐标
    501           *    Color--16位RGB颜色值
    502           *
    503           * 输出:
    504           *    无
    505           */

   \                                 In section .text, align 2, keep-with-next
    506          void LPLD_LCD_SetPoint(uint16 Xpos,uint16 Ypos,uint16 Color)
    507          {
   \                     LPLD_LCD_SetPoint: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    508            if( Xpos >= MAX_X || Ypos >= MAX_Y )
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0xF5B4 0x7FA0      CMP      R4,#+320
   \   0000000E   0xDA02             BGE.N    ??LPLD_LCD_SetPoint_0
   \   00000010   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   0x2DF0             CMP      R5,#+240
   \   00000014   0xDB00             BLT.N    ??LPLD_LCD_SetPoint_1
    509            {
    510              return;
   \                     ??LPLD_LCD_SetPoint_0: (+1)
   \   00000016   0xE00C             B.N      ??LPLD_LCD_SetPoint_2
    511            } 
    512            LPLD_LCD_SetCursor(Xpos,Ypos);
   \                     ??LPLD_LCD_SetPoint_1: (+1)
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       LPLD_LCD_SetCursor
    513            LPLD_LCD_WriteReg(LPLD_LCD_INFO.Write_GRAM,Color);
   \   00000024   0x0031             MOVS     R1,R6
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   0000002C   0x8840             LDRH     R0,[R0, #+2]
   \   0000002E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    514          }
   \                     ??LPLD_LCD_SetPoint_2: (+1)
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    515          
    516          /*
    517           * LPLD_LCD_DrawLine
    518           * 在指定坐标显示直线
    519           * 
    520           * 参数:
    521           *    x0--X轴起始坐标
    522           *    y0--Y轴起始坐标
    523           *    x1--X轴结束坐标
    524           *    y1--Y轴结束坐标
    525           *    Color--16位RGB颜色值
    526           *
    527           * 输出:
    528           *    无
    529           */	 

   \                                 In section .text, align 2, keep-with-next
    530          void LPLD_LCD_DrawLine( uint16 x0, uint16 y0, uint16 x1, uint16 y1 , uint16 color )
    531          {
   \                     LPLD_LCD_DrawLine: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
    532            short dx,dy;      /* 定义X Y轴上增加的变量值 */
    533            short temp;       /* 起点 终点大小比较 交换数据时的中间变量 */
    534            
    535            if( x0 > x1 )     /* X轴上起点大于终点 交换数据 */
   \   0000000E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000010   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   0x42AF             CMP      R7,R5
   \   00000014   0xD202             BCS.N    ??LPLD_LCD_DrawLine_0
    536            {
    537              temp = x1;
   \   00000016   0x46BB             MOV      R11,R7
    538              x1 = x0;
   \   00000018   0x002F             MOVS     R7,R5
    539              x0 = temp;   
   \   0000001A   0x465D             MOV      R5,R11
    540            }
    541            if( y0 > y1 )     /* Y轴上起点大于终点 交换数据 */
   \                     ??LPLD_LCD_DrawLine_0: (+1)
   \   0000001C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000020   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000022   0x45B0             CMP      R8,R6
   \   00000024   0xD202             BCS.N    ??LPLD_LCD_DrawLine_1
    542            {
    543              temp = y1;
   \   00000026   0x46C3             MOV      R11,R8
    544              y1 = y0;
   \   00000028   0x46B0             MOV      R8,R6
    545              y0 = temp;   
   \   0000002A   0x465E             MOV      R6,R11
    546            }
    547            
    548            dx = x1-x0;       /* X轴方向上的增量 */
   \                     ??LPLD_LCD_DrawLine_1: (+1)
   \   0000002C   0x1B78             SUBS     R0,R7,R5
   \   0000002E   0x4681             MOV      R9,R0
    549            dy = y1-y0;       /* Y轴方向上的增量 */
   \   00000030   0xEBB8 0x0006      SUBS     R0,R8,R6
   \   00000034   0x4682             MOV      R10,R0
    550            
    551            if( dx == 0 )     /* X轴上没有增量 画垂直线 */ 
   \   00000036   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   0000003A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000003E   0xD10E             BNE.N    ??LPLD_LCD_DrawLine_2
    552            {
    553              do
    554              { 
    555                LPLD_LCD_SetPoint(x0, y0, color);   /* 逐点显示 描垂直线 */
   \                     ??LPLD_LCD_DrawLine_3: (+1)
   \   00000040   0x0022             MOVS     R2,R4
   \   00000042   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000044   0x0031             MOVS     R1,R6
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004C   0x.... 0x....      BL       LPLD_LCD_SetPoint
    556                y0++;
   \   00000050   0x1C76             ADDS     R6,R6,#+1
    557              }
    558              while( y1 >= y0 ); 
   \   00000052   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000056   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000058   0x45B0             CMP      R8,R6
   \   0000005A   0xD2F1             BCS.N    ??LPLD_LCD_DrawLine_3
    559                return; 
   \   0000005C   0xE082             B.N      ??LPLD_LCD_DrawLine_4
    560            }
    561            if( dy == 0 )     /* Y轴上没有增量 画水平直线 */ 
   \                     ??LPLD_LCD_DrawLine_2: (+1)
   \   0000005E   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000062   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000066   0xD10D             BNE.N    ??LPLD_LCD_DrawLine_5
    562            {
    563              do
    564              {
    565                LPLD_LCD_SetPoint(x0, y0, color);   /* 逐点显示 描水平线 */
   \                     ??LPLD_LCD_DrawLine_6: (+1)
   \   00000068   0x0022             MOVS     R2,R4
   \   0000006A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006C   0x0031             MOVS     R1,R6
   \   0000006E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000070   0x0028             MOVS     R0,R5
   \   00000072   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000074   0x.... 0x....      BL       LPLD_LCD_SetPoint
    566                x0++;
   \   00000078   0x1C6D             ADDS     R5,R5,#+1
    567              }
    568              while( x1 >= x0 ); 
   \   0000007A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000007C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007E   0x42AF             CMP      R7,R5
   \   00000080   0xD2F2             BCS.N    ??LPLD_LCD_DrawLine_6
    569                return;
   \   00000082   0xE06F             B.N      ??LPLD_LCD_DrawLine_4
    570            }
    571            /* 布兰森汉姆(Bresenham)算法画线 */
    572            if( dx > dy )                         /* 靠近X轴 */
   \                     ??LPLD_LCD_DrawLine_5: (+1)
   \   00000084   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000088   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   0000008C   0x45CA             CMP      R10,R9
   \   0000008E   0xDA34             BGE.N    ??LPLD_LCD_DrawLine_7
    573            {
    574              temp = 2 * dy - dx;               /* 计算下个点的位置 */         
   \   00000090   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000094   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   00000098   0xEBD9 0x004A      RSBS     R0,R9,R10, LSL #+1
   \   0000009C   0x4683             MOV      R11,R0
    575              while( x0 != x1 )
   \                     ??LPLD_LCD_DrawLine_8: (+1)
   \   0000009E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000A2   0x42BD             CMP      R5,R7
   \   000000A4   0xD020             BEQ.N    ??LPLD_LCD_DrawLine_9
    576              {
    577                LPLD_LCD_SetPoint(x0,y0,color);    /* 画起点 */ 
   \   000000A6   0x0022             MOVS     R2,R4
   \   000000A8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AA   0x0031             MOVS     R1,R6
   \   000000AC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000AE   0x0028             MOVS     R0,R5
   \   000000B0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B2   0x.... 0x....      BL       LPLD_LCD_SetPoint
    578                x0++;                         /* X轴上加1 */
   \   000000B6   0x1C6D             ADDS     R5,R5,#+1
    579                if( temp > 0 )                /* 判断下下个点的位置 */
   \   000000B8   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   000000BC   0xF1BB 0x0F01      CMP      R11,#+1
   \   000000C0   0xDB0B             BLT.N    ??LPLD_LCD_DrawLine_10
    580                {
    581                  y0++;                     /* 为右上相邻点，即（x0+1,y0+1） */ 
   \   000000C2   0x1C76             ADDS     R6,R6,#+1
    582                  temp += 2 * dy - 2 * dx; 
   \   000000C4   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000000C8   0xEA5F 0x004A      LSLS     R0,R10,#+1
   \   000000CC   0xFA00 0xF08B      SXTAH    R0,R0,R11
   \   000000D0   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   000000D4   0xEBB0 0x0B49      SUBS     R11,R0,R9, LSL #+1
   \   000000D8   0xE7E1             B.N      ??LPLD_LCD_DrawLine_8
    583                }
    584                else         
    585                {
    586                  temp += 2 * dy;           /* 判断下下个点的位置 */  
   \                     ??LPLD_LCD_DrawLine_10: (+1)
   \   000000DA   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000000DE   0xEA5F 0x004A      LSLS     R0,R10,#+1
   \   000000E2   0xFA00 0xFB8B      SXTAH    R11,R0,R11
   \   000000E6   0xE7DA             B.N      ??LPLD_LCD_DrawLine_8
    587                }       
    588              }
    589              LPLD_LCD_SetPoint(x0,y0,color);
   \                     ??LPLD_LCD_DrawLine_9: (+1)
   \   000000E8   0x0022             MOVS     R2,R4
   \   000000EA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000EC   0x0031             MOVS     R1,R6
   \   000000EE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F0   0x0028             MOVS     R0,R5
   \   000000F2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F4   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   000000F8   0xE034             B.N      ??LPLD_LCD_DrawLine_11
    590              }  
    591              else
    592              {
    593                temp = 2 * dx - dy;                      /* 靠近Y轴 */       
   \                     ??LPLD_LCD_DrawLine_7: (+1)
   \   000000FA   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   000000FE   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000102   0xEBDA 0x0049      RSBS     R0,R10,R9, LSL #+1
   \   00000106   0x4683             MOV      R11,R0
    594                while( y0 != y1 )
   \                     ??LPLD_LCD_DrawLine_12: (+1)
   \   00000108   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000010A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000010E   0x4546             CMP      R6,R8
   \   00000110   0xD020             BEQ.N    ??LPLD_LCD_DrawLine_13
    595                {
    596                  LPLD_LCD_SetPoint(x0,y0,color);     
   \   00000112   0x0022             MOVS     R2,R4
   \   00000114   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000116   0x0031             MOVS     R1,R6
   \   00000118   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000011A   0x0028             MOVS     R0,R5
   \   0000011C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000011E   0x.... 0x....      BL       LPLD_LCD_SetPoint
    597                  y0++;                 
   \   00000122   0x1C76             ADDS     R6,R6,#+1
    598                  if( temp > 0 )           
   \   00000124   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000128   0xF1BB 0x0F01      CMP      R11,#+1
   \   0000012C   0xDB0B             BLT.N    ??LPLD_LCD_DrawLine_14
    599                  {
    600                    x0++;               
   \   0000012E   0x1C6D             ADDS     R5,R5,#+1
    601                    temp+=2*dy-2*dx; 
   \   00000130   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000134   0xEA5F 0x004A      LSLS     R0,R10,#+1
   \   00000138   0xFA00 0xF08B      SXTAH    R0,R0,R11
   \   0000013C   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   00000140   0xEBB0 0x0B49      SUBS     R11,R0,R9, LSL #+1
   \   00000144   0xE7E0             B.N      ??LPLD_LCD_DrawLine_12
    602                  }
    603                  else
    604                  {
    605                    temp += 2 * dy;
   \                     ??LPLD_LCD_DrawLine_14: (+1)
   \   00000146   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   0000014A   0xEA5F 0x004A      LSLS     R0,R10,#+1
   \   0000014E   0xFA00 0xFB8B      SXTAH    R11,R0,R11
   \   00000152   0xE7D9             B.N      ??LPLD_LCD_DrawLine_12
    606                  }
    607               } 
    608            LPLD_LCD_SetPoint(x0,y0,color);
   \                     ??LPLD_LCD_DrawLine_13: (+1)
   \   00000154   0x0022             MOVS     R2,R4
   \   00000156   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000158   0x0031             MOVS     R1,R6
   \   0000015A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000015C   0x0028             MOVS     R0,R5
   \   0000015E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000160   0x.... 0x....      BL       LPLD_LCD_SetPoint
    609            }
    610          } 
   \                     ??LPLD_LCD_DrawLine_11: (+1)
   \                     ??LPLD_LCD_DrawLine_4: (+1)
   \   00000164   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    611          
    612          
    613          /*
    614           * LPLD_LCD_DrawSquare
    615           * 在指定坐标显示正方形
    616           * 
    617           * 参数： 
    618           *    x0--正方形的起始横坐标 
    619           *    y0--正方形的起始纵坐标
    620           *    side_length--正方形的边长
    621           *    Line_color--正方形边的颜色
    622           *    Fill_color--正方形整体填充的颜色
    623           *
    624           * 输出:
    625           *    无
    626           */

   \                                 In section .text, align 2, keep-with-next
    627          void LPLD_LCD_DrawSquare(uint16 x0,uint16 y0,uint16 side_length,uint16 Line_color,uint16 Fill_color)
    628          {
   \                     LPLD_LCD_DrawSquare: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C0A             LDR      R4,[SP, #+40]
    629            uint16 i,j;
    630            if(side_length > MAX_X || side_length > MAX_Y)
   \   00000010   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000012   0xF5B7 0x7FA0      CMP      R7,#+320
   \   00000016   0xDC02             BGT.N    ??LPLD_LCD_DrawSquare_0
   \   00000018   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000001A   0x2FF1             CMP      R7,#+241
   \   0000001C   0xDB00             BLT.N    ??LPLD_LCD_DrawSquare_1
    631              return;
   \                     ??LPLD_LCD_DrawSquare_0: (+1)
   \   0000001E   0xE064             B.N      ??LPLD_LCD_DrawSquare_2
    632            
    633            if(x0+side_length > MAX_X)
   \                     ??LPLD_LCD_DrawSquare_1: (+1)
   \   00000020   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000022   0xFA17 0xF085      UXTAH    R0,R7,R5
   \   00000026   0xF5B0 0x7FA0      CMP      R0,#+320
   \   0000002A   0xDC5E             BGT.N    ??LPLD_LCD_DrawSquare_2
    634              return;
    635            else
    636              LPLD_LCD_DrawLine(x0,y0,x0+side_length,y0,Line_color);
   \                     ??LPLD_LCD_DrawSquare_3: (+1)
   \   0000002C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000030   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000034   0x0033             MOVS     R3,R6
   \   00000036   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000038   0x197A             ADDS     R2,R7,R5
   \   0000003A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003C   0x0031             MOVS     R1,R6
   \   0000003E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0x.... 0x....      BL       LPLD_LCD_DrawLine
    637            
    638            if(y0+side_length > MAX_Y)
   \   00000048   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000004A   0xFA17 0xF086      UXTAH    R0,R7,R6
   \   0000004E   0x28F1             CMP      R0,#+241
   \   00000050   0xDA4B             BGE.N    ??LPLD_LCD_DrawSquare_2
    639              return;
    640            else
    641              LPLD_LCD_DrawLine(x0,y0,x0,y0+side_length,Line_color);
   \                     ??LPLD_LCD_DrawSquare_4: (+1)
   \   00000052   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000056   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000005A   0x19BB             ADDS     R3,R7,R6
   \   0000005C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005E   0x002A             MOVS     R2,R5
   \   00000060   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000062   0x0031             MOVS     R1,R6
   \   00000064   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006A   0x.... 0x....      BL       LPLD_LCD_DrawLine
    642            
    643            LPLD_LCD_DrawLine(x0+side_length,y0,x0+side_length,y0+side_length,Line_color);
   \   0000006E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000072   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000076   0x19BB             ADDS     R3,R7,R6
   \   00000078   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000007A   0x197A             ADDS     R2,R7,R5
   \   0000007C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007E   0x0031             MOVS     R1,R6
   \   00000080   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000082   0x1978             ADDS     R0,R7,R5
   \   00000084   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000086   0x.... 0x....      BL       LPLD_LCD_DrawLine
    644            LPLD_LCD_DrawLine(x0,y0+side_length,x0+side_length,y0+side_length,Line_color);
   \   0000008A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000008E   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000092   0x19BB             ADDS     R3,R7,R6
   \   00000094   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000096   0x197A             ADDS     R2,R7,R5
   \   00000098   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000009A   0x19B9             ADDS     R1,R7,R6
   \   0000009C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000009E   0x0028             MOVS     R0,R5
   \   000000A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A2   0x.... 0x....      BL       LPLD_LCD_DrawLine
    645            
    646            for(i=0;i<side_length-1;i++)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x4681             MOV      R9,R0
   \                     ??LPLD_LCD_DrawSquare_5: (+1)
   \   000000AA   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000AE   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000B0   0x1E78             SUBS     R0,R7,#+1
   \   000000B2   0x4581             CMP      R9,R0
   \   000000B4   0xDA19             BGE.N    ??LPLD_LCD_DrawSquare_6
    647            {
    648              for(j=0;j<side_length-1;j++)
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x4682             MOV      R10,R0
   \                     ??LPLD_LCD_DrawSquare_7: (+1)
   \   000000BA   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000BE   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C0   0x1E78             SUBS     R0,R7,#+1
   \   000000C2   0x4582             CMP      R10,R0
   \   000000C4   0xDA0E             BGE.N    ??LPLD_LCD_DrawSquare_8
    649              {
    650                LPLD_LCD_SetPoint(x0+1+i,y0+1+j,Fill_color);
   \   000000C6   0x0022             MOVS     R2,R4
   \   000000C8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000CA   0xEB1A 0x0006      ADDS     R0,R10,R6
   \   000000CE   0x1C41             ADDS     R1,R0,#+1
   \   000000D0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D2   0xEB19 0x0005      ADDS     R0,R9,R5
   \   000000D6   0x1C40             ADDS     R0,R0,#+1
   \   000000D8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   0x.... 0x....      BL       LPLD_LCD_SetPoint
    651              }
   \   000000DE   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000E2   0xE7EA             B.N      ??LPLD_LCD_DrawSquare_7
    652            }
   \                     ??LPLD_LCD_DrawSquare_8: (+1)
   \   000000E4   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000E8   0xE7DF             B.N      ??LPLD_LCD_DrawSquare_5
    653          }
   \                     ??LPLD_LCD_DrawSquare_6: (+1)
   \                     ??LPLD_LCD_DrawSquare_2: (+1)
   \   000000EA   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    654          
    655          /*
    656           * LPLD_LCD_DrawRectangle
    657           * 在指定坐标显示矩形
    658           * 
    659           * 参数： 
    660           *    x0--长方形的起始横坐标 
    661           *    y0--长方形的起始纵坐标
    662           *    side_xlength--长
    663           *    side_ylength--宽
    664           *    Line_color--长方形边的颜色
    665           *    Fill_color--长方形整体填充的颜色
    666           *
    667           * 输出:
    668           *    无
    669           */

   \                                 In section .text, align 2, keep-with-next
    670          void LPLD_LCD_DrawRectangle(uint16 x0,uint16 y0,uint16 side_xlength,uint16 side_ylength,uint16 Line_color,uint16 Fill_color)
    671          {
   \                     LPLD_LCD_DrawRectangle: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
   \   0000000E   0x9D0B             LDR      R5,[SP, #+44]
    672            uint16 i,j;
    673            if(side_xlength > MAX_X || side_ylength > MAX_Y)
   \   00000010   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000014   0xF5B8 0x7FA0      CMP      R8,#+320
   \   00000018   0xDC04             BGT.N    ??LPLD_LCD_DrawRectangle_0
   \   0000001A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000001E   0xF1B9 0x0FF1      CMP      R9,#+241
   \   00000022   0xDB00             BLT.N    ??LPLD_LCD_DrawRectangle_1
    674              return;
   \                     ??LPLD_LCD_DrawRectangle_0: (+1)
   \   00000024   0xE06A             B.N      ??LPLD_LCD_DrawRectangle_2
    675            
    676            if(x0+side_xlength > MAX_X)
   \                     ??LPLD_LCD_DrawRectangle_1: (+1)
   \   00000026   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002A   0xFA18 0xF086      UXTAH    R0,R8,R6
   \   0000002E   0xF5B0 0x7FA0      CMP      R0,#+320
   \   00000032   0xDC63             BGT.N    ??LPLD_LCD_DrawRectangle_2
    677              return;
    678            else
    679              LPLD_LCD_DrawLine(x0,y0,x0+side_xlength,y0,Line_color);
   \                     ??LPLD_LCD_DrawRectangle_3: (+1)
   \   00000034   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000036   0x9400             STR      R4,[SP, #+0]
   \   00000038   0x003B             MOVS     R3,R7
   \   0000003A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000003C   0xEB18 0x0206      ADDS     R2,R8,R6
   \   00000040   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000042   0x0039             MOVS     R1,R7
   \   00000044   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0x.... 0x....      BL       LPLD_LCD_DrawLine
    680            
    681            if(y0+side_ylength > MAX_Y)
   \   0000004E   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000052   0xFA19 0xF087      UXTAH    R0,R9,R7
   \   00000056   0x28F1             CMP      R0,#+241
   \   00000058   0xDA50             BGE.N    ??LPLD_LCD_DrawRectangle_2
    682              return;
    683            else
    684              LPLD_LCD_DrawLine(x0,y0,x0,y0+side_ylength,Line_color);
   \                     ??LPLD_LCD_DrawRectangle_4: (+1)
   \   0000005A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000005C   0x9400             STR      R4,[SP, #+0]
   \   0000005E   0xEB19 0x0307      ADDS     R3,R9,R7
   \   00000062   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000064   0x0032             MOVS     R2,R6
   \   00000066   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006C   0x0030             MOVS     R0,R6
   \   0000006E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000070   0x.... 0x....      BL       LPLD_LCD_DrawLine
    685            
    686            LPLD_LCD_DrawLine(x0+side_xlength,y0,x0+side_xlength,y0+side_ylength,Line_color);
   \   00000074   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000076   0x9400             STR      R4,[SP, #+0]
   \   00000078   0xEB19 0x0307      ADDS     R3,R9,R7
   \   0000007C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000007E   0xEB18 0x0206      ADDS     R2,R8,R6
   \   00000082   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000084   0x0039             MOVS     R1,R7
   \   00000086   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000088   0xEB18 0x0006      ADDS     R0,R8,R6
   \   0000008C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008E   0x.... 0x....      BL       LPLD_LCD_DrawLine
    687            LPLD_LCD_DrawLine(x0,y0+side_ylength,x0+side_xlength,y0+side_ylength,Line_color);
   \   00000092   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000094   0x9400             STR      R4,[SP, #+0]
   \   00000096   0xEB19 0x0307      ADDS     R3,R9,R7
   \   0000009A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000009C   0xEB18 0x0206      ADDS     R2,R8,R6
   \   000000A0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A2   0xEB19 0x0107      ADDS     R1,R9,R7
   \   000000A6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AC   0x.... 0x....      BL       LPLD_LCD_DrawLine
    688            
    689            for(i=0;i<side_xlength-1;i++)
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x4682             MOV      R10,R0
   \                     ??LPLD_LCD_DrawRectangle_5: (+1)
   \   000000B4   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000B8   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000BC   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   000000C0   0x4582             CMP      R10,R0
   \   000000C2   0xDA1B             BGE.N    ??LPLD_LCD_DrawRectangle_6
    690            {
    691              for(j=0;j<side_ylength-1;j++)
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x4683             MOV      R11,R0
   \                     ??LPLD_LCD_DrawRectangle_7: (+1)
   \   000000C8   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000000CC   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000D0   0xF1B9 0x0001      SUBS     R0,R9,#+1
   \   000000D4   0x4583             CMP      R11,R0
   \   000000D6   0xDA0E             BGE.N    ??LPLD_LCD_DrawRectangle_8
    692              {
    693                LPLD_LCD_SetPoint(x0+1+i,y0+1+j,Fill_color);
   \   000000D8   0x002A             MOVS     R2,R5
   \   000000DA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000DC   0xEB1B 0x0007      ADDS     R0,R11,R7
   \   000000E0   0x1C41             ADDS     R1,R0,#+1
   \   000000E2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E4   0xEB1A 0x0006      ADDS     R0,R10,R6
   \   000000E8   0x1C40             ADDS     R0,R0,#+1
   \   000000EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   0x.... 0x....      BL       LPLD_LCD_SetPoint
    694              }
   \   000000F0   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000F4   0xE7E8             B.N      ??LPLD_LCD_DrawRectangle_7
    695            }
   \                     ??LPLD_LCD_DrawRectangle_8: (+1)
   \   000000F6   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000FA   0xE7DB             B.N      ??LPLD_LCD_DrawRectangle_5
    696          }
   \                     ??LPLD_LCD_DrawRectangle_6: (+1)
   \                     ??LPLD_LCD_DrawRectangle_2: (+1)
   \   000000FC   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    697          
    698          /*
    699           * LPLD_LCD_GRAMFillRec
    700           * 填充指定颜色的矩形到LCD_GRAM
    701           * 
    702           * 参数： 
    703           *    x0--X轴起始坐标
    704           *    y0--Y轴起始坐标
    705           *    x1--X轴结束坐标
    706           *    y1--Y轴结束坐标
    707           *    Color--16位RGB颜色值
    708           *
    709           * 输出:
    710           *    无
    711           */

   \                                 In section .text, align 2, keep-with-next
    712          void LPLD_LCD_GRAMFillRec(uint16 x0,uint16 y0,uint16 x1,uint16 y1,uint16 Color)
    713          {          
   \                     LPLD_LCD_GRAMFillRec: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x9C05             LDR      R4,[SP, #+20]
    714            uint16 i,j;   
    715            for(i=y0;i<=y1;i++)
   \   00000004   0x000D             MOVS     R5,R1
   \                     ??LPLD_LCD_GRAMFillRec_0: (+1)
   \   00000006   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000008   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000A   0x42AB             CMP      R3,R5
   \   0000000C   0xD318             BCC.N    ??LPLD_LCD_GRAMFillRec_1
    716            {
    717              for(j=x0; j<x1; j++)
   \   0000000E   0x0006             MOVS     R6,R0
   \                     ??LPLD_LCD_GRAMFillRec_2: (+1)
   \   00000010   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000012   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000014   0x4296             CMP      R6,R2
   \   00000016   0xD211             BCS.N    ??LPLD_LCD_GRAMFillRec_3
    718              {
    719                LCD_GRAM[MAX_X*MAX_Y - (j-1)*MAX_Y - (i)] = Color;
   \   00000018   0x....             LDR.N    R7,??DataTable19_4
   \   0000001A   0x683F             LDR      R7,[R7, #+0]
   \   0000001C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001E   0xF1B6 0x0C01      SUBS     R12,R6,#+1
   \   00000022   0xF05F 0x0EF0      MOVS     LR,#+240
   \   00000026   0xFB0E 0xFC0C      MUL      R12,LR,R12
   \   0000002A   0xF5DC 0x3C96      RSBS     R12,R12,#+76800
   \   0000002E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000030   0xEBBC 0x0C05      SUBS     R12,R12,R5
   \   00000034   0xF827 0x401C      STRH     R4,[R7, R12, LSL #+1]
    720              }    
   \   00000038   0x1C76             ADDS     R6,R6,#+1
   \   0000003A   0xE7E9             B.N      ??LPLD_LCD_GRAMFillRec_2
    721            }
   \                     ??LPLD_LCD_GRAMFillRec_3: (+1)
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0xE7E2             B.N      ??LPLD_LCD_GRAMFillRec_0
    722          } 
   \                     ??LPLD_LCD_GRAMFillRec_1: (+1)
   \   00000040   0xBDF0             POP      {R4-R7,PC}       ;; return
    723          
    724          /*
    725           * LPLD_LCD_GRAMDrawHLine
    726           * 填充指定颜色的横线到LCD_GRAM
    727           * 
    728           * 参数： 
    729           *    x0--X轴起始坐标
    730           *    y0--Y轴起始坐标
    731           *    len--横线长度
    732           *    Color--16位RGB颜色值
    733           *
    734           * 输出:
    735           *    无
    736           */

   \                                 In section .text, align 2, keep-with-next
    737          void LPLD_LCD_GRAMDrawHLine(uint16 x0,uint16 y0,uint16 len,uint16 Color)
    738          {
   \                     LPLD_LCD_GRAMDrawHLine: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    739            uint16 i;
    740            for(i=0; i<len; i++)
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x002C             MOVS     R4,R5
   \                     ??LPLD_LCD_GRAMDrawHLine_0: (+1)
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000A   0x4294             CMP      R4,R2
   \   0000000C   0xD20F             BCS.N    ??LPLD_LCD_GRAMDrawHLine_1
    741            {
    742              LCD_GRAM[MAX_X*MAX_Y - (x0+i-1)*MAX_Y - (y0)] = Color;
   \   0000000E   0x....             LDR.N    R5,??DataTable19_4
   \   00000010   0x682D             LDR      R5,[R5, #+0]
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0xFA14 0xF680      UXTAH    R6,R4,R0
   \   00000018   0x1E76             SUBS     R6,R6,#+1
   \   0000001A   0x27F0             MOVS     R7,#+240
   \   0000001C   0x437E             MULS     R6,R7,R6
   \   0000001E   0xF5D6 0x3696      RSBS     R6,R6,#+76800
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x1A76             SUBS     R6,R6,R1
   \   00000026   0xF825 0x3016      STRH     R3,[R5, R6, LSL #+1]
    743            }
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \   0000002C   0xE7EB             B.N      ??LPLD_LCD_GRAMDrawHLine_0
    744          }
   \                     ??LPLD_LCD_GRAMDrawHLine_1: (+1)
   \   0000002E   0xBCF0             POP      {R4-R7}
   \   00000030   0x4770             BX       LR               ;; return
    745          
    746          /*
    747           * LPLD_LCD_GRAMDrawHLine
    748           * 显示一幅指定大小的U8灰度图像
    749           * 
    750           * 参数： 
    751           *    *Color--8位灰度图像数组
    752           *    w--图像宽
    753           *    h--图像高
    754           *
    755           * 输出:
    756           *    无
    757           */

   \                                 In section .text, align 2, keep-with-next
    758          void LPLD_LCD_DrawU8Gray(uint8 *Color, uint16 w, uint16 h)
    759          {
   \                     LPLD_LCD_DrawU8Gray: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    760            uint16 i=0, j=0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    761           
    762            for(i=0; i<w; i++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0007             MOVS     R7,R0
   \                     ??LPLD_LCD_DrawU8Gray_0: (+1)
   \   00000014   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000016   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000018   0x42AF             CMP      R7,R5
   \   0000001A   0xD221             BCS.N    ??LPLD_LCD_DrawU8Gray_1
    763            {  
    764              LPLD_LCD_SetCursor(w-i-1, 0); 
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x1BE8             SUBS     R0,R5,R7
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x.... 0x....      BL       LPLD_LCD_SetCursor
    765              LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);
   \   00000028   0x....             LDR.N    R0,??DataTable19_2
   \   0000002A   0x8840             LDRH     R0,[R0, #+2]
   \   0000002C   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    766              for(j=0; j<h; j++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x4680             MOV      R8,R0
   \                     ??LPLD_LCD_DrawU8Gray_2: (+1)
   \   00000034   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000038   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003A   0x45B0             CMP      R8,R6
   \   0000003C   0xD20E             BCS.N    ??LPLD_LCD_DrawU8Gray_3
    767              {
    768                LPLD_LCD_WriteData(LPLD_LCD_U8GRAY2RGB(Color[j*w+i]));
   \   0000003E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000046   0xFB05 0x7008      MLA      R0,R5,R8,R7
   \   0000004A   0x5D00             LDRB     R0,[R0, R4]
   \   0000004C   0x.... 0x....      BL       LPLD_LCD_U8GRAY2RGB
   \   00000050   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000052   0x.... 0x....      BL       LPLD_LCD_WriteData
    769              }   
   \   00000056   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000005A   0xE7EB             B.N      ??LPLD_LCD_DrawU8Gray_2
    770            }
   \                     ??LPLD_LCD_DrawU8Gray_3: (+1)
   \   0000005C   0x1C7F             ADDS     R7,R7,#+1
   \   0000005E   0xE7D9             B.N      ??LPLD_LCD_DrawU8Gray_0
    771          }
   \                     ??LPLD_LCD_DrawU8Gray_1: (+1)
   \   00000060   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    772          
    773          /*
    774           * LPLD_LCD_ShowChar
    775           * 在指定坐标显示字符
    776           * 
    777           * 参数： 
    778           *    Xpos--X轴坐标
    779           *    Ypos--Y轴坐标
    780           *    ASCI--ASCI码
    781           *    charColor--字符字体颜色
    782           *    bkColor--字符背景颜色
    783           *
    784           * 输出:
    785           *    无
    786           */

   \                                 In section .text, align 2, keep-with-next
    787          void LPLD_LCD_ShowChar( uint16 Xpos, uint16 Ypos, uint8 ASCI, uint16 charColor, uint16 bkColor )
    788          {
   \                     LPLD_LCD_ShowChar: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
    789            uint16 i, j;
    790            uint8 tmp_char;
    791            for( i=0; i<16; i++ )
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4681             MOV      R9,R0
   \                     ??LPLD_LCD_ShowChar_0: (+1)
   \   00000012   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000016   0xF1B9 0x0F10      CMP      R9,#+16
   \   0000001A   0xDA33             BGE.N    ??LPLD_LCD_ShowChar_1
    792            {
    793              tmp_char = asc2_1608[ASCI-32][i];
   \   0000001C   0x....             LDR.N    R0,??DataTable19_5
   \   0000001E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000020   0xEB10 0x1007      ADDS     R0,R0,R7, LSL #+4
   \   00000024   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000028   0xEB19 0x0000      ADDS     R0,R9,R0
   \   0000002C   0xF5B0 0x7000      SUBS     R0,R0,#+512
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x4683             MOV      R11,R0
    794              for( j=0; j<8; j++ )
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x4682             MOV      R10,R0
   \                     ??LPLD_LCD_ShowChar_2: (+1)
   \   00000038   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000003C   0xF1BA 0x0F08      CMP      R10,#+8
   \   00000040   0xDA1D             BGE.N    ??LPLD_LCD_ShowChar_3
    795              {
    796                if( (tmp_char >> j) & 0x01 == 0x01 )
   \   00000042   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000046   0xFA5B 0xF00A      ASRS     R0,R11,R10
   \   0000004A   0x07C0             LSLS     R0,R0,#+31
   \   0000004C   0xD50A             BPL.N    ??LPLD_LCD_ShowChar_4
    797                {
    798                  LPLD_LCD_SetPoint( Xpos + j, Ypos + i, charColor );  /* 字符颜色 */
   \   0000004E   0x4642             MOV      R2,R8
   \   00000050   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000052   0xEB19 0x0106      ADDS     R1,R9,R6
   \   00000056   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000058   0xEB1A 0x0005      ADDS     R0,R10,R5
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   00000062   0xE009             B.N      ??LPLD_LCD_ShowChar_5
    799                }
    800                else
    801                {
    802                  LPLD_LCD_SetPoint( Xpos + j, Ypos + i, bkColor );  /* 背景颜色 */
   \                     ??LPLD_LCD_ShowChar_4: (+1)
   \   00000064   0x0022             MOVS     R2,R4
   \   00000066   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000068   0xEB19 0x0106      ADDS     R1,R9,R6
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0xEB1A 0x0005      ADDS     R0,R10,R5
   \   00000072   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000074   0x.... 0x....      BL       LPLD_LCD_SetPoint
    803                }
    804              }
   \                     ??LPLD_LCD_ShowChar_5: (+1)
   \   00000078   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   0000007C   0xE7DC             B.N      ??LPLD_LCD_ShowChar_2
    805            }
   \                     ??LPLD_LCD_ShowChar_3: (+1)
   \   0000007E   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000082   0xE7C6             B.N      ??LPLD_LCD_ShowChar_0
    806          }
   \                     ??LPLD_LCD_ShowChar_1: (+1)
   \   00000084   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    807          

   \                                 In section .text, align 2, keep-with-next
    808          uint32 mypow(uint8 m,uint8 n)
    809          {
   \                     mypow: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    810          	uint32 result=1;	 
   \   00000002   0x2001             MOVS     R0,#+1
    811          	while(n--)result*=m;    
   \                     ??mypow_0: (+1)
   \   00000004   0x000B             MOVS     R3,R1
   \   00000006   0x1E59             SUBS     R1,R3,#+1
   \   00000008   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD002             BEQ.N    ??mypow_1
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x4350             MULS     R0,R2,R0
   \   00000012   0xE7F7             B.N      ??mypow_0
    812          	return result;
   \                     ??mypow_1: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    813          }
    814          
    815          /*
    816           * LPLD_LCD_ShowNum
    817           * 在指定坐标显示数字
    818           * 
    819           * 参数： 
    820           *    Xpos--X轴坐标
    821           *    Ypos--Y轴坐标
    822           *    num--数字
    823           *    len--数字长度
    824           *    charColor--字符字体颜色
    825           *    bkColor--字符背景颜色
    826           *
    827           * 输出:
    828           *    无
    829           */

   \                                 In section .text, align 2, keep-with-next
    830          void LPLD_LCD_ShowNum(uint16 Xpos, uint16 Ypos, uint16 num, uint8 len, uint16 charColor, uint16 bkColor )
    831          {         	
   \                     LPLD_LCD_ShowNum: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
   \   0000000E   0x9D0B             LDR      R5,[SP, #+44]
    832            uint8 t,temp;						   
    833            for(t=0;t<len;t++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4682             MOV      R10,R0
   \                     ??LPLD_LCD_ShowNum_0: (+1)
   \   00000014   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000018   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000001C   0x45CA             CMP      R10,R9
   \   0000001E   0xD22A             BCS.N    ??LPLD_LCD_ShowNum_1
    834            {
    835              temp=(num/mypow(10,len-t-1))%10;
   \   00000020   0xEBB9 0x000A      SUBS     R0,R9,R10
   \   00000024   0x1E41             SUBS     R1,R0,#+1
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x200A             MOVS     R0,#+10
   \   0000002A   0x.... 0x....      BL       mypow
   \   0000002E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000032   0xFBB8 0xF0F0      UDIV     R0,R8,R0
   \   00000036   0x210A             MOVS     R1,#+10
   \   00000038   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000003C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000040   0x4683             MOV      R11,R0
    836              LPLD_LCD_ShowChar(Xpos+(8)*t,Ypos,temp+'0',charColor,bkColor); 
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x9500             STR      R5,[SP, #+0]
   \   00000046   0x0023             MOVS     R3,R4
   \   00000048   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000004A   0xF11B 0x0230      ADDS     R2,R11,#+48
   \   0000004E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000050   0x0039             MOVS     R1,R7
   \   00000052   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000054   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000058   0xEA5F 0x00CA      LSLS     R0,R10,#+3
   \   0000005C   0xFA10 0xF086      UXTAH    R0,R0,R6
   \   00000060   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000062   0x.... 0x....      BL       LPLD_LCD_ShowChar
    837              CurX = CurX + 8;  
   \   00000066   0x....             LDR.N    R0,??DataTable19_6
   \   00000068   0x8800             LDRH     R0,[R0, #+0]
   \   0000006A   0x3008             ADDS     R0,R0,#+8
   \   0000006C   0x....             LDR.N    R1,??DataTable19_6
   \   0000006E   0x8008             STRH     R0,[R1, #+0]
    838            }
   \   00000070   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000074   0xE7CE             B.N      ??LPLD_LCD_ShowNum_0
    839          } 
   \                     ??LPLD_LCD_ShowNum_1: (+1)
   \   00000076   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    840          
    841          /*
    842           * LPLD_LCD_ShowString
    843           * 在指定坐标显示字符串
    844           * 
    845           * 参数： 
    846           *    Xpos--X轴坐标
    847           *    Ypos--Y轴坐标
    848           *    *str--字符串
    849           *    strColor--字符串字体颜色
    850           *    bkColor--字符背景颜色
    851           *
    852           * 输出:
    853           *    无
    854           */

   \                                 In section .text, align 2, keep-with-next
    855          void LPLD_LCD_ShowString(uint16 Xpos, uint16 Ypos, uint8 *str,uint16 strColor, uint16 bkColor)
    856          {
   \                     LPLD_LCD_ShowString: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x001D             MOVS     R5,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    857            uint8 TempChar;
    858            do
    859            {
    860              TempChar = *str++;  
   \                     ??LPLD_LCD_ShowString_0: (+1)
   \   0000000E   0x7838             LDRB     R0,[R7, #+0]
   \   00000010   0x0006             MOVS     R6,R0
   \   00000012   0x1C7F             ADDS     R7,R7,#+1
    861              LPLD_LCD_ShowChar( Xpos, Ypos, TempChar, strColor, bkColor );    
   \   00000014   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   0x9400             STR      R4,[SP, #+0]
   \   00000018   0x002B             MOVS     R3,R5
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0x0032             MOVS     R2,R6
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x4649             MOV      R1,R9
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x4640             MOV      R0,R8
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0x.... 0x....      BL       LPLD_LCD_ShowChar
    862              if( Xpos <= MAX_X - 8 )
   \   0000002C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000030   0xF5B8 0x7F9C      CMP      R8,#+312
   \   00000034   0xDC02             BGT.N    ??LPLD_LCD_ShowString_1
    863              {
    864                Xpos += 8;
   \   00000036   0xF118 0x0808      ADDS     R8,R8,#+8
   \   0000003A   0xE00D             B.N      ??LPLD_LCD_ShowString_2
    865              } 
    866              else if ( Ypos <= MAX_Y - 16 )
   \                     ??LPLD_LCD_ShowString_1: (+1)
   \   0000003C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000040   0xF1B9 0x0FE1      CMP      R9,#+225
   \   00000044   0xDA04             BGE.N    ??LPLD_LCD_ShowString_3
    867              {
    868                Xpos = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x4680             MOV      R8,R0
    869                Ypos += 16;
   \   0000004A   0xF119 0x0910      ADDS     R9,R9,#+16
   \   0000004E   0xE003             B.N      ??LPLD_LCD_ShowString_2
    870              }   
    871              else
    872              {
    873                Xpos = 0;
   \                     ??LPLD_LCD_ShowString_3: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x4680             MOV      R8,R0
    874                Ypos = 0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x4681             MOV      R9,R0
    875              } 
    876              CurX = CurX + 8;  
   \                     ??LPLD_LCD_ShowString_2: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable19_6
   \   0000005A   0x8800             LDRH     R0,[R0, #+0]
   \   0000005C   0x3008             ADDS     R0,R0,#+8
   \   0000005E   0x....             LDR.N    R1,??DataTable19_6
   \   00000060   0x8008             STRH     R0,[R1, #+0]
    877            }
    878            while ( *str != 0 );
   \   00000062   0x7838             LDRB     R0,[R7, #+0]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD1D2             BNE.N    ??LPLD_LCD_ShowString_0
    879          }
   \   00000068   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    880          
    881          /*
    882           * LPLD_LCD_PrintStringLine
    883           * 另起一行显示字符串
    884           * 
    885           * 参数： 
    886           *    *str--字符串
    887           *    strColor--字符串字体颜色
    888           *    bkColor--字符背景颜色
    889           *
    890           * 输出:
    891           *    无
    892           */

   \                                 In section .text, align 2, keep-with-next
    893          void LPLD_LCD_PrintStringLine(uint8 *str,uint16 strColor, uint16 bkColor)
    894          {
   \                     LPLD_LCD_PrintStringLine: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    895            CurX = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable19_6
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    896            LPLD_LCD_ShowString(0, CurY*18, str, strColor, bkColor);
   \   00000010   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000012   0x9600             STR      R6,[SP, #+0]
   \   00000014   0x002B             MOVS     R3,R5
   \   00000016   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0x....             LDR.N    R0,??DataTable19_7
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0x2112             MOVS     R1,#+18
   \   00000020   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       LPLD_LCD_ShowString
    897            CurY++;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_7
   \   0000002E   0x8800             LDRH     R0,[R0, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable19_7
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    898            if((CurY+1)*18>MAX_Y)
   \   00000036   0x....             LDR.N    R0,??DataTable19_7
   \   00000038   0x8800             LDRH     R0,[R0, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x2112             MOVS     R1,#+18
   \   0000003E   0x4348             MULS     R0,R1,R0
   \   00000040   0x28F1             CMP      R0,#+241
   \   00000042   0xDB02             BLT.N    ??LPLD_LCD_PrintStringLine_0
    899            {
    900              CurY=0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable19_7
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    901            }
    902          }
   \                     ??LPLD_LCD_PrintStringLine_0: (+1)
   \   0000004A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    903          
    904          /*
    905           * LPLD_LCD_PrintString
    906           * 接着当前行显示字符串
    907           * 
    908           * 参数： 
    909           *    *str--字符串
    910           *    strColor--字符串字体颜色
    911           *    bkColor--字符背景颜色
    912           *
    913           * 输出:
    914           *    无
    915           */

   \                                 In section .text, align 2, keep-with-next
    916          void LPLD_LCD_PrintString(uint8 *str,uint16 Color, uint16 bkColor)
    917          {
   \                     LPLD_LCD_PrintString: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    918            LPLD_LCD_ShowString(CurX, (CurY-1)*18, str, Color, bkColor);
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0x9600             STR      R6,[SP, #+0]
   \   0000000E   0x002B             MOVS     R3,R5
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0x0022             MOVS     R2,R4
   \   00000014   0x....             LDR.N    R0,??DataTable19_7
   \   00000016   0x8800             LDRH     R0,[R0, #+0]
   \   00000018   0x1E40             SUBS     R0,R0,#+1
   \   0000001A   0x2112             MOVS     R1,#+18
   \   0000001C   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable19_6
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       LPLD_LCD_ShowString
    919          }
   \   0000002A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    920          
    921          /*
    922           * LPLD_LCD_PrintNumLine
    923           * 另起一行显示数字
    924           * 
    925           * 参数： 
    926           *    num--数字
    927           *    len--数字长度
    928           *    numColor--字符字体颜色
    929           *    bkColor--字符背景颜色
    930           *
    931           * 输出:
    932           *    无
    933           */

   \                                 In section .text, align 2, keep-with-next
    934          void LPLD_LCD_PrintNumLine(uint16 num,uint8 len,uint16 numColor, uint16 bkColor)
    935          {
   \                     LPLD_LCD_PrintNumLine: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    936            CurX = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable19_6
   \   00000010   0x8008             STRH     R0,[R1, #+0]
    937            LPLD_LCD_ShowNum(0, CurY*18, num, len, numColor, bkColor);
   \   00000012   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000014   0x9701             STR      R7,[SP, #+4]
   \   00000016   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000018   0x9600             STR      R6,[SP, #+0]
   \   0000001A   0x002B             MOVS     R3,R5
   \   0000001C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001E   0x0022             MOVS     R2,R4
   \   00000020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable19_7
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x2112             MOVS     R1,#+18
   \   00000028   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   0000002C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       LPLD_LCD_ShowNum
    938            CurY++;
   \   00000034   0x....             LDR.N    R0,??DataTable19_7
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable19_7
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    939            if((CurY+1)*18>MAX_Y)
   \   0000003E   0x....             LDR.N    R0,??DataTable19_7
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x2112             MOVS     R1,#+18
   \   00000046   0x4348             MULS     R0,R1,R0
   \   00000048   0x28F1             CMP      R0,#+241
   \   0000004A   0xDB02             BLT.N    ??LPLD_LCD_PrintNumLine_0
    940            {
    941              CurY=0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x....             LDR.N    R1,??DataTable19_7
   \   00000050   0x8008             STRH     R0,[R1, #+0]
    942            }
    943          }
   \                     ??LPLD_LCD_PrintNumLine_0: (+1)
   \   00000052   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    944          
    945          /*
    946           * LPLD_LCD_PrintNum
    947           * 接着当前行显示数字
    948           * 
    949           * 参数： 
    950           *    num--数字
    951           *    len--数字长度
    952           *    numColor--字符字体颜色
    953           *    bkColor--字符背景颜色
    954           *
    955           * 输出:
    956           *    无
    957           */

   \                                 In section .text, align 2, keep-with-next
    958          void LPLD_LCD_PrintNum(uint16 num,uint8 len,uint16 Color, uint16 bkColor)
    959          {
   \                     LPLD_LCD_PrintNum: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    960            LPLD_LCD_ShowNum(CurX, (CurY-1)*18, num,len, Color, bkColor);
   \   0000000C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000000E   0x9701             STR      R7,[SP, #+4]
   \   00000010   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000012   0x9600             STR      R6,[SP, #+0]
   \   00000014   0x002B             MOVS     R3,R5
   \   00000016   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001C   0x....             LDR.N    R0,??DataTable19_7
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0x2112             MOVS     R1,#+18
   \   00000024   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   00000028   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   0x....             LDR.N    R0,??DataTable19_6
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       LPLD_LCD_ShowNum
    961          }
   \   00000032   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x60010000         DC32     0x60010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     LPLD_LCD_INFO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x43FE104C         DC32     0x43fe104c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x........         DC32     LCD_GRAM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x........         DC32     asc2_1608

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x........         DC32     CurX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x........         DC32     CurY
    962          
    963          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_LCD_BGR2RGB
       0   LPLD_LCD_Delayms
      40   LPLD_LCD_DrawLine
        40   -> LPLD_LCD_SetPoint
      40   LPLD_LCD_DrawRectangle
        40   -> LPLD_LCD_DrawLine
        40   -> LPLD_LCD_SetPoint
      40   LPLD_LCD_DrawSquare
        40   -> LPLD_LCD_DrawLine
        40   -> LPLD_LCD_SetPoint
      24   LPLD_LCD_DrawU8Gray
        24   -> LPLD_LCD_SetCursor
        24   -> LPLD_LCD_U8GRAY2RGB
        24   -> LPLD_LCD_WriteData
        24   -> LPLD_LCD_WriteIndex
      48   LPLD_LCD_FLEXBUS_Init
        32   -> LPLD_FlexBus_Init
        48   -> __aeabi_memcpy4
      16   LPLD_LCD_FillBackground
        16   -> LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteData
        16   -> LPLD_LCD_WriteIndex
      16   LPLD_LCD_FillBackgroundGRAM
        16   -> LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteData
        16   -> LPLD_LCD_WriteIndex
      16   LPLD_LCD_GRAMDrawHLine
      20   LPLD_LCD_GRAMFillRec
      16   LPLD_LCD_GetPoint
        16   -> LPLD_LCD_ReadData
        16   -> LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteIndex
      48   LPLD_LCD_IO_Cfg
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   LPLD_LCD_Init
         8   -> LPLD_LCD_Delayms
         8   -> LPLD_LCD_FLEXBUS_Init
         8   -> LPLD_LCD_IO_Cfg
         8   -> LPLD_LCD_ReadReg
         8   -> LPLD_LCD_Reset
         8   -> LPLD_LCD_WriteReg
      32   LPLD_LCD_PrintNum
        32   -> LPLD_LCD_ShowNum
      32   LPLD_LCD_PrintNumLine
        32   -> LPLD_LCD_ShowNum
      24   LPLD_LCD_PrintString
        24   -> LPLD_LCD_ShowString
      24   LPLD_LCD_PrintStringLine
        24   -> LPLD_LCD_ShowString
       0   LPLD_LCD_ReadData
      16   LPLD_LCD_ReadReg
        16   -> LPLD_LCD_ReadData
        16   -> LPLD_LCD_WriteIndex
       8   LPLD_LCD_Reset
         8   -> LPLD_LCD_Delayms
      16   LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteReg
      16   LPLD_LCD_SetPoint
        16   -> LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteReg
      40   LPLD_LCD_ShowChar
        40   -> LPLD_LCD_SetPoint
      40   LPLD_LCD_ShowNum
        40   -> LPLD_LCD_ShowChar
        40   -> mypow
      32   LPLD_LCD_ShowString
        32   -> LPLD_LCD_ShowChar
       8   LPLD_LCD_U8GRAY2RGB
       0   LPLD_LCD_WriteData
       0   LPLD_LCD_WriteIndex
      16   LPLD_LCD_WriteReg
        16   -> LPLD_LCD_WriteData
        16   -> LPLD_LCD_WriteIndex
       0   mypow


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       2  CurX
       2  CurY
       4  LCD_GRAM
      38  LPLD_LCD_BGR2RGB
      30  LPLD_LCD_Delayms
     360  LPLD_LCD_DrawLine
     256  LPLD_LCD_DrawRectangle
     238  LPLD_LCD_DrawSquare
     100  LPLD_LCD_DrawU8Gray
      82  LPLD_LCD_FLEXBUS_Init
      48  LPLD_LCD_FillBackground
      48  LPLD_LCD_FillBackgroundGRAM
      50  LPLD_LCD_GRAMDrawHLine
      66  LPLD_LCD_GRAMFillRec
      46  LPLD_LCD_GetPoint
       8  LPLD_LCD_INFO
      54  LPLD_LCD_IO_Cfg
    1144  LPLD_LCD_Init
      52  LPLD_LCD_PrintNum
      84  LPLD_LCD_PrintNumLine
      44  LPLD_LCD_PrintString
      76  LPLD_LCD_PrintStringLine
      12  LPLD_LCD_ReadData
      24  LPLD_LCD_ReadReg
      26  LPLD_LCD_Reset
      42  LPLD_LCD_SetCursor
      52  LPLD_LCD_SetPoint
     136  LPLD_LCD_ShowChar
     122  LPLD_LCD_ShowNum
     108  LPLD_LCD_ShowString
      44  LPLD_LCD_U8GRAY2RGB
       8  LPLD_LCD_WriteData
       8  LPLD_LCD_WriteIndex
      24  LPLD_LCD_WriteReg
       2  PreX
       2  PreY
    1520  asc2_1608
      22  mypow

 
    20 bytes in section .bss
 1 520 bytes in section .rodata
 3 476 bytes in section .text
 
 3 476 bytes of CODE  memory
 1 520 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: none
