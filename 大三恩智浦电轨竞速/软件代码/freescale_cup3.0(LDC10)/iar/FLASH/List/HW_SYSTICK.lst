###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        12/Mar/2016  16:29:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SYSTICK.c
#    Command line =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SYSTICK.c -D LPLD_K60 -D
#        USE_K60DZ10 -lCN
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\FLASH\List\"
#        -lB
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\FLASH\List\"
#        -o
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\app\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\app\MAIN\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\app\BSP\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\app\CTL\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\app\sensor\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\app\ITAC\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\CPU\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\common\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\LPLD\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\LPLD\FUNC\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\FatFs\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\USB\common\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\USB\driver\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\..\..\..\lib\USB\class\"
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\FLASH\List\HW_SYSTICK.lst
#    Object file  =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup3.0(LDC10)\iar\FLASH\Obj\HW_SYSTICK.o
#
###############################################################################

D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SYSTICK.c
      1          /**
      2           * @file HW_SYSTICK.c
      3           * @version 3.02[By LPLD]
      4           * @date 2013-11-29
      5           * @brief SYSTICK底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable7  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable7_1  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000008   0x010A             LSLS     R2,R1,#+4
   \   0000000A   0x....             LDR.N    R3,??DataTable7_2  ;; 0xe000ed18
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0xF010 0x040F      ANDS     R4,R0,#0xF
   \   00000012   0x18E3             ADDS     R3,R4,R3
   \   00000014   0xF803 0x2C04      STRB     R2,[R3, #-4]
   \   00000018   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   0000001A   0x010A             LSLS     R2,R1,#+4
   \   0000001C   0x....             LDR.N    R3,??DataTable7_3  ;; 0xe000e400
   \   0000001E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000020   0x54C2             STRB     R2,[R0, R3]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000022   0xBC10             POP      {R4}
   \   00000024   0x4770             BX       LR               ;; return
     23          #include "HW_SYSTICK.h"
     24          
     25          /*
     26          *   SyStick是一款Cotex-M4内核的定时器
     27          *   SyStick采用减计数的方式，如果减到零，则设置COUNTFLAG标志位，如果使能中断，则产生中断
     28          *   然后继续加载RVR中的值，继续计数；
     29          *   具体配置参考Cortex-M4 Reference Manual
     30          */

   \                                 In section .bss, align 4
     31          SYSTICK_ISR_CALLBACK SYSTICK_ISR;
   \                     SYSTICK_ISR:
   \   00000000                      DS8 4
     32          /*
     33          * LPLD_SYSTICK_Init
     34          * SYSTICK初始化函数，启动SYStick定时器，设置时钟源为内核时钟
     35          * >如果在结构体初始化的时候定义回调函数，在LPLD_SYSTICK_Init中开启中断功能
     36          * >如果没有用到中断，可以通过循环判断LPLD_SYSTICK_ISDONE的方式获得SYSTICK是否计数完成
     37          * 
     38          * 参数:
     39          *    systick_init_structure--SYSTICK初始化结构体，
     40          *                        具体定义见SYSTICK_InitType
     41          *
     42          * 输出：
     43          *   无
     44          */

   \                                 In section .text, align 2, keep-with-next
     45          void LPLD_SYSTICK_Init(SYSTICK_InitType systick_init_structure)  
     46          {      
   \                     LPLD_SYSTICK_Init: (+1)
   \   00000000   0xB517             PUSH     {R0-R2,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     47            //如果内核时钟是100Mhz，最大定时167ms
     48            uint32 ldval = systick_init_structure.SYSTICK_PeriodUs * SYSTICK_UINT_US(g_core_clock)
     49                       + systick_init_structure.SYSTICK_PeriodMs * SYSTICK_UINT_MS(g_core_clock);
   \   00000004   0x9801             LDR      R0,[SP, #+4]
   \   00000006   0x....             LDR.N    R1,??DataTable7_4
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x....             LDR.N    R2,??DataTable7_5  ;; 0xf4240
   \   0000000C   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000010   0x9A02             LDR      R2,[SP, #+8]
   \   00000012   0x....             LDR.N    R3,??DataTable7_4
   \   00000014   0x681B             LDR      R3,[R3, #+0]
   \   00000016   0xF44F 0x747A      MOV      R4,#+1000
   \   0000001A   0xFBB3 0xF3F4      UDIV     R3,R3,R4
   \   0000001E   0x435A             MULS     R2,R3,R2
   \   00000020   0xFB01 0x2400      MLA      R4,R1,R0,R2
     50            //计数寄存器的值不能超过0xFFFFFF           
     51            if( ldval > SYSTICK_COUNTER_MAX)
   \   00000024   0xF1B4 0x7F80      CMP      R4,#+16777216
   \   00000028   0xD223             BCS.N    ??LPLD_SYSTICK_Init_0
     52            {
     53              return;
     54            }
     55            
     56            SYSTICK->CSR = 0 & (~SYSTICK_CSR_ENABLE_MASK)      //禁止SYSTICK
     57                              | SYSTICK_CSR_CLKSOURCE_MASK     //选择内核时钟作为时钟源
     58                              | SYSTICK_CSR_COUNTFLAG_MASK;    //清除标志位
   \                     ??LPLD_SYSTICK_Init_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable7_6  ;; 0x10004
   \   0000002C   0x....             LDR.N    R1,??DataTable7_7  ;; 0xe000e010
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     59            if(systick_init_structure.SYSTICK_Isr != NULL)
   \   00000030   0x9803             LDR      R0,[SP, #+12]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD011             BEQ.N    ??LPLD_SYSTICK_Init_2
     60            {
     61              SYSTICK->CSR |= SYSTICK_CSR_TICKINT_MASK;  //使能systick中断
   \   00000036   0x....             LDR.N    R0,??DataTable7_7  ;; 0xe000e010
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003E   0x....             LDR.N    R1,??DataTable7_7  ;; 0xe000e010
   \   00000040   0x6008             STR      R0,[R1, #+0]
     62              SYSTICK_ISR = systick_init_structure.SYSTICK_Isr;
   \   00000042   0x9803             LDR      R0,[SP, #+12]
   \   00000044   0x....             LDR.N    R1,??DataTable7_8
   \   00000046   0x6008             STR      R0,[R1, #+0]
     63              NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
   \   00000048   0x210F             MOVS     R1,#+15
   \   0000004A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000004E   0x.... 0x....      BL       NVIC_SetPriority
     64              enable_irq(SysTick_IRQn);                 //使能SYSTICK中断
   \   00000052   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000056   0x.... 0x....      BL       NVIC_EnableIRQ
     65            }
     66            SYSTICK->RVR = ldval - 1;  
   \                     ??LPLD_SYSTICK_Init_2: (+1)
   \   0000005A   0x1E60             SUBS     R0,R4,#+1
   \   0000005C   0x....             LDR.N    R1,??DataTable7_9  ;; 0xe000e014
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     67            SYSTICK->CVR = 0x00;  
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR.N    R1,??DataTable7_10  ;; 0xe000e018
   \   00000064   0x6008             STR      R0,[R1, #+0]
     68            SYSTICK->CSR |= SYSTICK_CSR_ENABLE_MASK;  //使能SYSTICK
   \   00000066   0x....             LDR.N    R0,??DataTable7_7  ;; 0xe000e010
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000006E   0x....             LDR.N    R1,??DataTable7_7  ;; 0xe000e010
   \   00000070   0x6008             STR      R0,[R1, #+0]
     69          }
   \                     ??LPLD_SYSTICK_Init_0: (+1)
   \   00000072   0xBD1F             POP      {R0-R4,PC}       ;; return
     70          
     71          /*
     72          * LPLD_SYSTICK_Init
     73          * SYSTICK反初始化函数，关闭SYStick定时器
     74          * 关闭中断，清空计数器
     75          * 
     76          * 参数:
     77          *   无
     78          *
     79          * 输出：
     80          *   无
     81          */

   \                                 In section .text, align 2, keep-with-next
     82          void LPLD_SYSTICK_DeInit(void)
     83          {
   \                     LPLD_SYSTICK_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     84            SYSTICK->CSR = 0 & (~SYSTICK_CSR_ENABLE_MASK)   //禁止SYSTICK
     85                             & (~SYSTICK_CSR_TICKINT_MASK)  //禁止产生内核SYSTICK异常
     86                             & (~SYSTICK_CSR_CLKSOURCE_MASK)//选择内核时钟作为时钟源
     87                             | SYSTICK_CSR_COUNTFLAG_MASK;  //清除标志位                     
   \   00000002   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000006   0x....             LDR.N    R1,??DataTable7_7  ;; 0xe000e010
   \   00000008   0x6008             STR      R0,[R1, #+0]
     88            disable_irq(SysTick_IRQn);         //禁止SYSTICK中断       
   \   0000000A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
     89            SYSTICK->CVR = 0x00;  
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable7_10  ;; 0xe000e018
   \   00000016   0x6008             STR      R0,[R1, #+0]
     90          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
     91          
     92          /*
     93          * LPLD_SYSTICK_DelayUs
     94          *
     95          * 利用SYSTICK产生Us延时,已在函数内部初始化，直接调用该函数既可以产生延时
     96          * 启动SYStick定时器，设置定时器的计数间隔为1/g_core_clock us
     97          * 设置加载寄存器，加载寄存器的值为1/g_core_clock us 的period_us整数倍
     98          *
     99          * 参数:
    100          *    period_us--延时的微秒值
    101          *
    102          * 输出:
    103          *   无
    104          */

   \                                 In section .text, align 2, keep-with-next
    105          void LPLD_SYSTICK_DelayUs(uint32 period_us)
    106          {  
    107            uint32 i;
    108            
    109            SYSTICK->CSR = 0 & (~SYSTICK_CSR_ENABLE_MASK)      //禁止SYSTICK
    110                           & (~SYSTICK_CSR_TICKINT_MASK)       //禁止产生内核SYSTICK异常
    111                           | SYSTICK_CSR_CLKSOURCE_MASK        //选择内核时钟作为时钟源
    112                           | SYSTICK_CSR_COUNTFLAG_MASK;       //清除标志位
   \                     LPLD_SYSTICK_DelayUs: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable7_6  ;; 0x10004
   \   00000002   0x....             LDR.N    R3,??DataTable7_7  ;; 0xe000e010
   \   00000004   0x601A             STR      R2,[R3, #+0]
    113                            
    114            i = period_us * SYSTICK_UINT_US(g_core_clock) - 1; 
   \   00000006   0x....             LDR.N    R2,??DataTable7_4
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x....             LDR.N    R3,??DataTable7_5  ;; 0xf4240
   \   0000000C   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000010   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000014   0x1E52             SUBS     R2,R2,#+1
   \   00000016   0x0011             MOVS     R1,R2
    115            //计数寄存器的值不能超过0xFFFFFF
    116            if( i > SYSTICK_COUNTER_MAX)
   \   00000018   0xF1B1 0x7F80      CMP      R1,#+16777216
   \   0000001C   0xD217             BCS.N    ??LPLD_SYSTICK_DelayUs_0
    117            {
    118              return;
    119            }
    120            SYSTICK->RVR = i;  
   \                     ??LPLD_SYSTICK_DelayUs_1: (+1)
   \   0000001E   0x....             LDR.N    R2,??DataTable7_9  ;; 0xe000e014
   \   00000020   0x6011             STR      R1,[R2, #+0]
    121            SYSTICK->CVR = 0x00;  
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x....             LDR.N    R3,??DataTable7_10  ;; 0xe000e018
   \   00000026   0x601A             STR      R2,[R3, #+0]
    122            SYSTICK->CSR |= SYSTICK_CSR_ENABLE_MASK;  
   \   00000028   0x....             LDR.N    R2,??DataTable7_7  ;; 0xe000e010
   \   0000002A   0x6812             LDR      R2,[R2, #+0]
   \   0000002C   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   00000030   0x....             LDR.N    R3,??DataTable7_7  ;; 0xe000e010
   \   00000032   0x601A             STR      R2,[R3, #+0]
    123            do  
    124            {  
    125              i = SYSTICK->CSR;  
   \                     ??LPLD_SYSTICK_DelayUs_2: (+1)
   \   00000034   0x....             LDR.N    R2,??DataTable7_7  ;; 0xe000e010
   \   00000036   0x6812             LDR      R2,[R2, #+0]
   \   00000038   0x0011             MOVS     R1,R2
    126            }  
    127            while(i & SYSTICK_CSR_ENABLE_MASK \
    128                  && !(i & SYSTICK_CSR_COUNTFLAG_MASK)); 
   \   0000003A   0xF011 0x1201      ANDS     R2,R1,#0x10001
   \   0000003E   0x2A01             CMP      R2,#+1
   \   00000040   0xD0F8             BEQ.N    ??LPLD_SYSTICK_DelayUs_2
    129             
    130            SYSTICK->CSR = 0 & (~SYSTICK_CSR_ENABLE_MASK)     //禁止SYSTICK
    131                           & (~SYSTICK_CSR_TICKINT_MASK)      //禁止产生内核SYSTICK异常
    132                           | SYSTICK_CSR_CLKSOURCE_MASK       //选择内核时钟作为时钟源
    133                           | SYSTICK_CSR_COUNTFLAG_MASK;      //清除标志位  
   \   00000042   0x....             LDR.N    R2,??DataTable7_6  ;; 0x10004
   \   00000044   0x....             LDR.N    R3,??DataTable7_7  ;; 0xe000e010
   \   00000046   0x601A             STR      R2,[R3, #+0]
    134                           
    135            SYSTICK->CVR = 0x00;  
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x....             LDR.N    R3,??DataTable7_10  ;; 0xe000e018
   \   0000004C   0x601A             STR      R2,[R3, #+0]
    136          }  
   \                     ??LPLD_SYSTICK_DelayUs_0: (+1)
   \   0000004E   0x4770             BX       LR               ;; return
    137          
    138          /*
    139          * LPLD_SYSTICK_DelayMs
    140          *
    141          * 利用SYSTICK产生Ms延时,已在函数内部初始化，直接调用该函数既可以产生延时
    142          * 启动SYStick定时器，设置定时器的计数间隔为1/g_core_clock ms
    143          * 设置加载寄存器，加载寄存器的值为1/g_core_clock ms 的period_ms整数倍
    144          *
    145          * 参数:
    146          *    period_ms--延时的毫秒值
    147          *
    148          * 输出:
    149          *   无
    150          */

   \                                 In section .text, align 2, keep-with-next
    151          void LPLD_SYSTICK_DelayMs(uint32 period_ms)
    152          {  
    153            uint32 i;
    154            
    155            SYSTICK->CSR = 0 & (~SYSTICK_CSR_ENABLE_MASK)    //禁止SYSTICK
    156                         & (~SYSTICK_CSR_TICKINT_MASK)       //禁止产生内核SYSTICK异常
    157                         | SYSTICK_CSR_CLKSOURCE_MASK        //选择内核时钟作为时钟源
    158                         | SYSTICK_CSR_COUNTFLAG_MASK;       //清除标志位
   \                     LPLD_SYSTICK_DelayMs: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable7_6  ;; 0x10004
   \   00000002   0x....             LDR.N    R3,??DataTable7_7  ;; 0xe000e010
   \   00000004   0x601A             STR      R2,[R3, #+0]
    159                         
    160            i = period_ms * SYSTICK_UINT_MS(g_core_clock) - 1;
   \   00000006   0x....             LDR.N    R2,??DataTable7_4
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0xF44F 0x737A      MOV      R3,#+1000
   \   0000000E   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000012   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000016   0x1E52             SUBS     R2,R2,#+1
   \   00000018   0x0011             MOVS     R1,R2
    161            //计数寄存器的值不能超过0xFFFFFF
    162            if( i > SYSTICK_COUNTER_MAX)
   \   0000001A   0xF1B1 0x7F80      CMP      R1,#+16777216
   \   0000001E   0xD217             BCS.N    ??LPLD_SYSTICK_DelayMs_0
    163            {
    164              return;
    165            }
    166            SYSTICK->RVR = i;  
   \                     ??LPLD_SYSTICK_DelayMs_1: (+1)
   \   00000020   0x....             LDR.N    R2,??DataTable7_9  ;; 0xe000e014
   \   00000022   0x6011             STR      R1,[R2, #+0]
    167            SYSTICK->CVR = 0x00;  
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x....             LDR.N    R3,??DataTable7_10  ;; 0xe000e018
   \   00000028   0x601A             STR      R2,[R3, #+0]
    168            SYSTICK->CSR |= SYSTICK_CSR_ENABLE_MASK;  
   \   0000002A   0x....             LDR.N    R2,??DataTable7_7  ;; 0xe000e010
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   00000032   0x....             LDR.N    R3,??DataTable7_7  ;; 0xe000e010
   \   00000034   0x601A             STR      R2,[R3, #+0]
    169            do  
    170            {  
    171              i = SYSTICK->CSR;  
   \                     ??LPLD_SYSTICK_DelayMs_2: (+1)
   \   00000036   0x....             LDR.N    R2,??DataTable7_7  ;; 0xe000e010
   \   00000038   0x6812             LDR      R2,[R2, #+0]
   \   0000003A   0x0011             MOVS     R1,R2
    172            }  
    173            while(i & SYSTICK_CSR_ENABLE_MASK \
    174                  && !(i & SYSTICK_CSR_COUNTFLAG_MASK)); 
   \   0000003C   0xF011 0x1201      ANDS     R2,R1,#0x10001
   \   00000040   0x2A01             CMP      R2,#+1
   \   00000042   0xD0F8             BEQ.N    ??LPLD_SYSTICK_DelayMs_2
    175             
    176            SYSTICK->CSR = 0 & (~SYSTICK_CSR_ENABLE_MASK)    //禁止SYSTICK
    177                           & (~SYSTICK_CSR_TICKINT_MASK)     //禁止产生内核SYSTICK异常
    178                           | SYSTICK_CSR_CLKSOURCE_MASK      //选择内核时钟作为时钟源
    179                           | SYSTICK_CSR_COUNTFLAG_MASK;     //清除标志位  
   \   00000044   0x....             LDR.N    R2,??DataTable7_6  ;; 0x10004
   \   00000046   0x....             LDR.N    R3,??DataTable7_7  ;; 0xe000e010
   \   00000048   0x601A             STR      R2,[R3, #+0]
    180                           
    181            SYSTICK->CVR = 0x00;  
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x....             LDR.N    R3,??DataTable7_10  ;; 0xe000e018
   \   0000004E   0x601A             STR      R2,[R3, #+0]
    182          } 
   \                     ??LPLD_SYSTICK_DelayMs_0: (+1)
   \   00000050   0x4770             BX       LR               ;; return
    183          
    184          #if (UCOS_II == 0u)

   \                                 In section .text, align 2, keep-with-next
    185          void OS_CPU_SysTickHandler(void)
    186          {
   \                     OS_CPU_SysTickHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    187            SYSTICK_ISR();
   \   00000002   0x....             LDR.N    R0,??DataTable7_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    188          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     g_core_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x00010004         DC32     0x10004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     SYSTICK_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0xE000E018         DC32     0xe000e018
    189          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_SYSTICK_DeInit
         8   -> NVIC_DisableIRQ
       0   LPLD_SYSTICK_DelayMs
       0   LPLD_SYSTICK_DelayUs
      24   LPLD_SYSTICK_Init
        24   -> NVIC_EnableIRQ
        24   -> NVIC_SetPriority
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       4   NVIC_SetPriority
       8   OS_CPU_SysTickHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      26  LPLD_SYSTICK_DeInit
      82  LPLD_SYSTICK_DelayMs
      80  LPLD_SYSTICK_DelayUs
     116  LPLD_SYSTICK_Init
      20  NVIC_DisableIRQ
      20  NVIC_EnableIRQ
      38  NVIC_SetPriority
      10  OS_CPU_SysTickHandler
       4  SYSTICK_ISR

 
   4 bytes in section .bss
 436 bytes in section .text
 
 436 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
