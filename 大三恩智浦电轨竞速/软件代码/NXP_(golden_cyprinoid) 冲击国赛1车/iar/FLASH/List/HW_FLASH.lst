###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        16/Aug/2016  11:11:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLASH.c
#    Command line =  
#        E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLASH.c -D
#        LPLD_K60 -lCN
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\FLASH\List\" -lB
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\FLASH\List\" -o
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\FLASH\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\app\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\app\BSP\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\app\ITAC\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\app\CTL\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\app\MAIN\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\app\SENSOR\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\CPU\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\common\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\LPLD\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\LPLD\HW\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\LPLD\DEV\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\FatFs\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\FatFs\option\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\USB\common\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\USB\driver\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\USB\descriptor\" -I
#        "E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\..\..\..\lib\USB\class\" -On -I D:\IAR\arm\CMSIS\Include\ -D
#        ARM_MATH_CM4
#    List file    =  
#        E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\FLASH\List\HW_FLASH.lst
#    Object file  =  
#        E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\project\NXP_(golden_cyprinoid)
#        1.9\iar\FLASH\Obj\HW_FLASH.o
#
###############################################################################

E:\飞思卡尔\新工程\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLASH.c
      1          /**
      2           * @file HW_FLASH.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTFL底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "HW_FLASH.h"
     24          
     25          /*
     26           * LPLD_Flash_Init
     27           * Flash模块初始化
     28           * 
     29           * 参数:
     30           *    无
     31           *
     32           * 输出:
     33           *    无
     34           */

   \                                 In section .text, align 2, keep-with-next
     35          void LPLD_Flash_Init(void)
     36          {
     37            //检查Flash访问错误
     38            if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \                     LPLD_Flash_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x0680             LSLS     R0,R0,#+26
   \   00000006   0xD506             BPL.N    ??LPLD_Flash_Init_0
     39            {
     40              FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;       //清除错误标志
   \   00000008   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000010   0x....             LDR.N    R1,??DataTable3  ;; 0x40020000
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   \   00000014   0xE014             B.N      ??LPLD_Flash_Init_1
     41            }
     42            //检查保护错误
     43            else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??LPLD_Flash_Init_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x06C0             LSLS     R0,R0,#+27
   \   0000001C   0xD506             BPL.N    ??LPLD_Flash_Init_2
     44            {
     45              FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000026   0x....             LDR.N    R1,??DataTable3  ;; 0x40020000
   \   00000028   0x7008             STRB     R0,[R1, #+0]
   \   0000002A   0xE009             B.N      ??LPLD_Flash_Init_1
     46            }
     47            //检查读冲突错误
     48            else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??LPLD_Flash_Init_2: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x0640             LSLS     R0,R0,#+25
   \   00000032   0xD505             BPL.N    ??LPLD_Flash_Init_1
     49            {
     50              FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \   00000034   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000003C   0x....             LDR.N    R1,??DataTable3  ;; 0x40020000
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
     51            }
     52            
     53            //禁用Flash模块的数据缓存
     54            FMC->PFB0CR &= ~FMC_PFB0CR_B0DCE_MASK;
   \                     ??LPLD_Flash_Init_1: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable3_1  ;; 0x4001f004
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000048   0x....             LDR.N    R1,??DataTable3_1  ;; 0x4001f004
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     55            FMC->PFB1CR &= ~FMC_PFB1CR_B1DCE_MASK;
   \   0000004C   0x....             LDR.N    R0,??DataTable3_2  ;; 0x4001f008
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000054   0x....             LDR.N    R1,??DataTable3_2  ;; 0x4001f008
   \   00000056   0x6008             STR      R0,[R1, #+0]
     56          } 
   \   00000058   0x4770             BX       LR               ;; return
     57          
     58          
     59          /*
     60           * LPLD_Flash_SectorErase
     61           * 擦除Flash扇区
     62           * 
     63           * 参数:
     64           *    FlashPtr--扇区地址指针，即扇区号乘以2048
     65           *
     66           * 输出:
     67           *    错误代码
     68           */

   \                                 In section .text, align 2, keep-with-next
     69          uint8 LPLD_Flash_SectorErase(uint32 FlashPtr)
     70          {
   \                     LPLD_Flash_SectorErase: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     71            uint8 Return = FLASH_OK;
   \   00000002   0x2000             MOVS     R0,#+0
     72            
     73            //等待CCIF置1
     74            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)){};
   \                     ??LPLD_Flash_SectorErase_0: (+1)
   \   00000004   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000006   0x7812             LDRB     R2,[R2, #+0]
   \   00000008   0x0612             LSLS     R2,R2,#+24
   \   0000000A   0xD5FB             BPL.N    ??LPLD_Flash_SectorErase_0
     75            //写入命令道FCCOB寄存器
     76            FTFL->FCCOB0 = FLASH_CMD_ERSSCR;
   \   0000000C   0x2209             MOVS     R2,#+9
   \   0000000E   0x....             LDR.N    R3,??DataTable3_3  ;; 0x40020007
   \   00000010   0x701A             STRB     R2,[R3, #+0]
     77            FTFL->FCCOB1 = (uint8) (FlashPtr >> 16);
   \   00000012   0x0C0A             LSRS     R2,R1,#+16
   \   00000014   0x....             LDR.N    R3,??DataTable3_4  ;; 0x40020006
   \   00000016   0x701A             STRB     R2,[R3, #+0]
     78            FTFL->FCCOB2 = (uint8)((FlashPtr >> 8 ) & 0xFF);
   \   00000018   0x0A0A             LSRS     R2,R1,#+8
   \   0000001A   0x....             LDR.N    R3,??DataTable3_5  ;; 0x40020005
   \   0000001C   0x701A             STRB     R2,[R3, #+0]
     79            FTFL->FCCOB3 = (uint8)( FlashPtr & 0xFF);
   \   0000001E   0x....             LDR.N    R2,??DataTable3_6  ;; 0x40020004
   \   00000020   0x7011             STRB     R1,[R2, #+0]
     80            
     81            //执行命令
     82            FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
   \   00000022   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000024   0x7812             LDRB     R2,[R2, #+0]
   \   00000026   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000002A   0x....             LDR.N    R3,??DataTable3  ;; 0x40020000
   \   0000002C   0x701A             STRB     R2,[R3, #+0]
     83            //等待命令完成
     84            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
   \                     ??LPLD_Flash_SectorErase_1: (+1)
   \   0000002E   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000030   0x7812             LDRB     R2,[R2, #+0]
   \   00000032   0x0612             LSLS     R2,R2,#+24
   \   00000034   0xD5FB             BPL.N    ??LPLD_Flash_SectorErase_1
     85            
     86            //检查Flash访问错误
     87            if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \   00000036   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000038   0x7812             LDRB     R2,[R2, #+0]
   \   0000003A   0x0692             LSLS     R2,R2,#+26
   \   0000003C   0xD508             BPL.N    ??LPLD_Flash_SectorErase_2
     88            {
     89              FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;       //清除错误标志
   \   0000003E   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000040   0x7812             LDRB     R2,[R2, #+0]
   \   00000042   0xF052 0x0220      ORRS     R2,R2,#0x20
   \   00000046   0x....             LDR.N    R3,??DataTable3  ;; 0x40020000
   \   00000048   0x701A             STRB     R2,[R3, #+0]
     90              Return |= FLASH_FACCERR;                    //更新返回值
   \   0000004A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000004E   0xE01F             B.N      ??LPLD_Flash_SectorErase_3
     91            }
     92            //检查Flash保护标志
     93            else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??LPLD_Flash_SectorErase_2: (+1)
   \   00000050   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000052   0x7812             LDRB     R2,[R2, #+0]
   \   00000054   0x06D2             LSLS     R2,R2,#+27
   \   00000056   0xD508             BPL.N    ??LPLD_Flash_SectorErase_4
     94            {
     95              FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \   00000058   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   0000005A   0x7812             LDRB     R2,[R2, #+0]
   \   0000005C   0xF052 0x0210      ORRS     R2,R2,#0x10
   \   00000060   0x....             LDR.N    R3,??DataTable3  ;; 0x40020000
   \   00000062   0x701A             STRB     R2,[R3, #+0]
     96              Return |= FLASH_FPVIOL;
   \   00000064   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000068   0xE012             B.N      ??LPLD_Flash_SectorErase_3
     97            }
     98            //检查Flash读冲突错误
     99            else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??LPLD_Flash_SectorErase_4: (+1)
   \   0000006A   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   0000006C   0x7812             LDRB     R2,[R2, #+0]
   \   0000006E   0x0652             LSLS     R2,R2,#+25
   \   00000070   0xD508             BPL.N    ??LPLD_Flash_SectorErase_5
    100            {
    101              FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \   00000072   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000074   0x7812             LDRB     R2,[R2, #+0]
   \   00000076   0xF052 0x0240      ORRS     R2,R2,#0x40
   \   0000007A   0x....             LDR.N    R3,??DataTable3  ;; 0x40020000
   \   0000007C   0x701A             STRB     R2,[R3, #+0]
    102              Return |= FLASH_RDCOLERR;
   \   0000007E   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000082   0xE005             B.N      ??LPLD_Flash_SectorErase_3
    103            }
    104            //检查MGSTAT0非可纠正错误
    105            else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
   \                     ??LPLD_Flash_SectorErase_5: (+1)
   \   00000084   0x....             LDR.N    R2,??DataTable3  ;; 0x40020000
   \   00000086   0x7812             LDRB     R2,[R2, #+0]
   \   00000088   0x07D2             LSLS     R2,R2,#+31
   \   0000008A   0xD501             BPL.N    ??LPLD_Flash_SectorErase_3
    106            {
    107              Return |= FLASH_MGSTAT0;
   \   0000008C   0xF050 0x0004      ORRS     R0,R0,#0x4
    108            } 
    109            
    110            return  Return;
   \                     ??LPLD_Flash_SectorErase_3: (+1)
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x4770             BX       LR               ;; return
    111          }
    112          
    113          /*
    114           * LPLD_Flash_ByteProgram
    115           * 编程Flash
    116           * 
    117           * 参数:
    118           *    FlashStartAdd--Flash编程起始地址
    119           *    *DataSrcPtr--数据源指针
    120           *    NumberOfBytes--数据字节长度
    121           *
    122           * 输出:
    123           *    错误代码
    124           */

   \                                 In section .text, align 2, keep-with-next
    125          uint8 LPLD_Flash_ByteProgram(uint32 FlashStartAdd, uint32 *DataSrcPtr, uint32 NumberOfBytes)
    126          {
   \                     LPLD_Flash_ByteProgram: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0003             MOVS     R3,R0
    127            uint8 Return = FLASH_OK;
   \   00000004   0x2400             MOVS     R4,#+0
    128            
    129            uint32 size_buffer;
    130            
    131            if (NumberOfBytes == 0)
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD101             BNE.N    ??LPLD_Flash_ByteProgram_0
    132            {
    133              return FLASH_CONTENTERR;
   \   0000000A   0x2011             MOVS     R0,#+17
   \   0000000C   0xE060             B.N      ??LPLD_Flash_ByteProgram_1
    134            }
    135            else
    136            {
    137              size_buffer = (NumberOfBytes - 1)/4 + 1;
   \                     ??LPLD_Flash_ByteProgram_0: (+1)
   \   0000000E   0x1E50             SUBS     R0,R2,#+1
   \   00000010   0x0880             LSRS     R0,R0,#+2
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x0005             MOVS     R5,R0
    138            }
    139            //等待直到CCIF设置
    140            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)){};
   \                     ??LPLD_Flash_ByteProgram_2: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0600             LSLS     R0,R0,#+24
   \   0000001C   0xD5FB             BPL.N    ??LPLD_Flash_ByteProgram_2
    141          
    142            while ((size_buffer) && (Return == FLASH_OK))
   \                     ??LPLD_Flash_ByteProgram_3: (+1)
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xD054             BEQ.N    ??LPLD_Flash_ByteProgram_4
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD151             BNE.N    ??LPLD_Flash_ByteProgram_4
    143            {
    144              //写FLASH命令到FCCOB
    145              FTFL->FCCOB0 = FLASH_CMD_PGM4;
   \   00000028   0x2006             MOVS     R0,#+6
   \   0000002A   0x....             LDR.N    R6,??DataTable3_3  ;; 0x40020007
   \   0000002C   0x7030             STRB     R0,[R6, #+0]
    146              FTFL->FCCOB1 = (uint8)(FlashStartAdd >> 16);
   \   0000002E   0x0C18             LSRS     R0,R3,#+16
   \   00000030   0x....             LDR.N    R6,??DataTable3_4  ;; 0x40020006
   \   00000032   0x7030             STRB     R0,[R6, #+0]
    147              FTFL->FCCOB2 = (uint8)((FlashStartAdd >> 8) & 0xFF);
   \   00000034   0x0A18             LSRS     R0,R3,#+8
   \   00000036   0x....             LDR.N    R6,??DataTable3_5  ;; 0x40020005
   \   00000038   0x7030             STRB     R0,[R6, #+0]
    148              FTFL->FCCOB3 = (uint8)(FlashStartAdd & 0xFF);
   \   0000003A   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40020004
   \   0000003C   0x7003             STRB     R3,[R0, #+0]
    149              //如果K60设置成为小端格式，进行如下操作
    150              FTFL->FCCOB4 = (uint8)(*((uint8*)DataSrcPtr+3));
   \   0000003E   0x78C8             LDRB     R0,[R1, #+3]
   \   00000040   0x....             LDR.N    R6,??DataTable3_7  ;; 0x4002000b
   \   00000042   0x7030             STRB     R0,[R6, #+0]
    151              FTFL->FCCOB5 = (uint8)(*((uint8*)DataSrcPtr+2));
   \   00000044   0x7888             LDRB     R0,[R1, #+2]
   \   00000046   0x....             LDR.N    R6,??DataTable3_8  ;; 0x4002000a
   \   00000048   0x7030             STRB     R0,[R6, #+0]
    152              FTFL->FCCOB6 = (uint8)(*((uint8*)DataSrcPtr+1));
   \   0000004A   0x7848             LDRB     R0,[R1, #+1]
   \   0000004C   0x....             LDR.N    R6,??DataTable3_9  ;; 0x40020009
   \   0000004E   0x7030             STRB     R0,[R6, #+0]
    153              FTFL->FCCOB7 = (uint8)(*((uint8*)DataSrcPtr+0));
   \   00000050   0x7808             LDRB     R0,[R1, #+0]
   \   00000052   0x....             LDR.N    R6,??DataTable3_10  ;; 0x40020008
   \   00000054   0x7030             STRB     R0,[R6, #+0]
    154              //如果K60设置成为大端格式，进行如下操作
    155              //FTFL_FCCOB4 = (uint8)(*((uint_8*)DataSrcPtr+0));
    156              //FTFL_FCCOB5 = (uint8)(*((uint_8*)DataSrcPtr+1));
    157              //FTFL_FCCOB6 = (uint8)(*((uint_8*)DataSrcPtr+2));
    158              //FTFL_FCCOB7 = (uint8)(*((uint_8*)DataSrcPtr+3));
    159              //设置FLASH加载命令
    160              FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
   \   00000056   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000005E   0x....             LDR.N    R6,??DataTable3  ;; 0x40020000
   \   00000060   0x7030             STRB     R0,[R6, #+0]
    161              //等待命令完成
    162              while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
   \                     ??LPLD_Flash_ByteProgram_5: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x0600             LSLS     R0,R0,#+24
   \   00000068   0xD5FB             BPL.N    ??LPLD_Flash_ByteProgram_5
    163              
    164              //检测FLASH访问错误
    165              if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \   0000006A   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x0680             LSLS     R0,R0,#+26
   \   00000070   0xD508             BPL.N    ??LPLD_Flash_ByteProgram_6
    166              {
    167                  
    168                  FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;
   \   00000072   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000007A   0x....             LDR.N    R6,??DataTable3  ;; 0x40020000
   \   0000007C   0x7030             STRB     R0,[R6, #+0]
    169              
    170                  Return |= FLASH_FACCERR;
   \   0000007E   0xF054 0x0401      ORRS     R4,R4,#0x1
   \   00000082   0xE01F             B.N      ??LPLD_Flash_ByteProgram_7
    171              }
    172              //检测FLASH保护错误
    173              else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??LPLD_Flash_ByteProgram_6: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x06C0             LSLS     R0,R0,#+27
   \   0000008A   0xD508             BPL.N    ??LPLD_Flash_ByteProgram_8
    174              {
    175                  FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \   0000008C   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000094   0x....             LDR.N    R6,??DataTable3  ;; 0x40020000
   \   00000096   0x7030             STRB     R0,[R6, #+0]
    176              
    177                  Return |= FLASH_FPVIOL;
   \   00000098   0xF054 0x0402      ORRS     R4,R4,#0x2
   \   0000009C   0xE012             B.N      ??LPLD_Flash_ByteProgram_7
    178              }
    179              
    180              else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??LPLD_Flash_ByteProgram_8: (+1)
   \   0000009E   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x0640             LSLS     R0,R0,#+25
   \   000000A4   0xD508             BPL.N    ??LPLD_Flash_ByteProgram_9
    181              {
    182                  FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \   000000A6   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   000000A8   0x7800             LDRB     R0,[R0, #+0]
   \   000000AA   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000AE   0x....             LDR.N    R6,??DataTable3  ;; 0x40020000
   \   000000B0   0x7030             STRB     R0,[R6, #+0]
    183              
    184                  Return |= FLASH_RDCOLERR;
   \   000000B2   0xF054 0x0408      ORRS     R4,R4,#0x8
   \   000000B6   0xE005             B.N      ??LPLD_Flash_ByteProgram_7
    185              }
    186              else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
   \                     ??LPLD_Flash_ByteProgram_9: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x07C0             LSLS     R0,R0,#+31
   \   000000BE   0xD501             BPL.N    ??LPLD_Flash_ByteProgram_7
    187              {
    188                  Return |= FLASH_MGSTAT0;
   \   000000C0   0xF054 0x0404      ORRS     R4,R4,#0x4
    189              } 
    190              size_buffer --;
   \                     ??LPLD_Flash_ByteProgram_7: (+1)
   \   000000C4   0x1E6D             SUBS     R5,R5,#+1
    191              (uint32*)DataSrcPtr++;
   \   000000C6   0x1D09             ADDS     R1,R1,#+4
    192              FlashStartAdd +=4;
   \   000000C8   0x1D1B             ADDS     R3,R3,#+4
   \   000000CA   0xE7A8             B.N      ??LPLD_Flash_ByteProgram_3
    193            } 
    194            return  Return;
   \                     ??LPLD_Flash_ByteProgram_4: (+1)
   \   000000CC   0x0020             MOVS     R0,R4
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_Flash_ByteProgram_1: (+1)
   \   000000D0   0xBC70             POP      {R4-R6}
   \   000000D2   0x4770             BX       LR               ;; return
    195          } 
    196          
    197          
    198          //=================用于uint16的存储================================

   \                                 In section .text, align 2, keep-with-next
    199          uint8 flash_write(uint16 sectorNo,uint16 offset,int16 data)
    200          {
   \                     flash_write: (+1)
   \   00000000   0xB43C             PUSH     {R2-R5}
   \   00000002   0x0003             MOVS     R3,R0
    201              Dtype	addr;	
    202              Dtype	Data;
    203              uint8 Return = FLASH_OK;	
   \   00000004   0x2000             MOVS     R0,#+0
    204              
    205              addr.DW = (uint32)((sectorNo<<11) + offset);//计算地址
   \   00000006   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000008   0x02DC             LSLS     R4,R3,#+11
   \   0000000A   0xFA14 0xF481      UXTAH    R4,R4,R1
   \   0000000E   0x9401             STR      R4,[SP, #+4]
    206          	Data.W[0]=data;	
   \   00000010   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    207          	    
    208              FTFL->FCCOB0 = FLASH_CMD_PGM4;	// 设置写入命令
   \   00000014   0x2406             MOVS     R4,#+6
   \   00000016   0x....             LDR.N    R5,??DataTable3_3  ;; 0x40020007
   \   00000018   0x702C             STRB     R4,[R5, #+0]
    209          
    210              FTFL->FCCOB1 = addr.B[2];// 设置目标地址
   \   0000001A   0xF89D 0x4006      LDRB     R4,[SP, #+6]
   \   0000001E   0x....             LDR.N    R5,??DataTable3_4  ;; 0x40020006
   \   00000020   0x702C             STRB     R4,[R5, #+0]
    211              FTFL->FCCOB2 = addr.B[1];
   \   00000022   0xF89D 0x4005      LDRB     R4,[SP, #+5]
   \   00000026   0x....             LDR.N    R5,??DataTable3_5  ;; 0x40020005
   \   00000028   0x702C             STRB     R4,[R5, #+0]
    212              FTFL->FCCOB3 = addr.B[0];
   \   0000002A   0xF89D 0x4004      LDRB     R4,[SP, #+4]
   \   0000002E   0x....             LDR.N    R5,??DataTable3_6  ;; 0x40020004
   \   00000030   0x702C             STRB     R4,[R5, #+0]
    213          
    214          
    215              FTFL->FCCOB4 = Data.B[3];// 设置写入数据
   \   00000032   0xF89D 0x4003      LDRB     R4,[SP, #+3]
   \   00000036   0x....             LDR.N    R5,??DataTable3_7  ;; 0x4002000b
   \   00000038   0x702C             STRB     R4,[R5, #+0]
    216              FTFL->FCCOB5 = Data.B[2];
   \   0000003A   0xF89D 0x4002      LDRB     R4,[SP, #+2]
   \   0000003E   0x....             LDR.N    R5,??DataTable3_8  ;; 0x4002000a
   \   00000040   0x702C             STRB     R4,[R5, #+0]
    217              FTFL->FCCOB6 = Data.B[1];
   \   00000042   0xF89D 0x4001      LDRB     R4,[SP, #+1]
   \   00000046   0x....             LDR.N    R5,??DataTable3_9  ;; 0x40020009
   \   00000048   0x702C             STRB     R4,[R5, #+0]
    218              FTFL->FCCOB7 = Data.B[0];
   \   0000004A   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   \   0000004E   0x....             LDR.N    R5,??DataTable3_10  ;; 0x40020008
   \   00000050   0x702C             STRB     R4,[R5, #+0]
    219              
    220             FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
   \   00000052   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   00000054   0x7824             LDRB     R4,[R4, #+0]
   \   00000056   0xF054 0x0480      ORRS     R4,R4,#0x80
   \   0000005A   0x....             LDR.N    R5,??DataTable3  ;; 0x40020000
   \   0000005C   0x702C             STRB     R4,[R5, #+0]
    221              //等待命令完成
    222              while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
   \                     ??flash_write_0: (+1)
   \   0000005E   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   00000060   0x7824             LDRB     R4,[R4, #+0]
   \   00000062   0x0624             LSLS     R4,R4,#+24
   \   00000064   0xD5FB             BPL.N    ??flash_write_0
    223              
    224              //检测FLASH访问错误
    225              if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \   00000066   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   00000068   0x7824             LDRB     R4,[R4, #+0]
   \   0000006A   0x06A4             LSLS     R4,R4,#+26
   \   0000006C   0xD508             BPL.N    ??flash_write_1
    226              {
    227                  
    228                  FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;
   \   0000006E   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   00000070   0x7824             LDRB     R4,[R4, #+0]
   \   00000072   0xF054 0x0420      ORRS     R4,R4,#0x20
   \   00000076   0x....             LDR.N    R5,??DataTable3  ;; 0x40020000
   \   00000078   0x702C             STRB     R4,[R5, #+0]
    229              
    230                  Return |= FLASH_FACCERR;
   \   0000007A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000007E   0xE01F             B.N      ??flash_write_2
    231              }
    232              //检测FLASH保护错误
    233              else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??flash_write_1: (+1)
   \   00000080   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   00000082   0x7824             LDRB     R4,[R4, #+0]
   \   00000084   0x06E4             LSLS     R4,R4,#+27
   \   00000086   0xD508             BPL.N    ??flash_write_3
    234              {
    235                  FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \   00000088   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   0000008A   0x7824             LDRB     R4,[R4, #+0]
   \   0000008C   0xF054 0x0410      ORRS     R4,R4,#0x10
   \   00000090   0x....             LDR.N    R5,??DataTable3  ;; 0x40020000
   \   00000092   0x702C             STRB     R4,[R5, #+0]
    236              
    237                  Return |= FLASH_FPVIOL;
   \   00000094   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000098   0xE012             B.N      ??flash_write_2
    238              }
    239              
    240              else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??flash_write_3: (+1)
   \   0000009A   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   0000009C   0x7824             LDRB     R4,[R4, #+0]
   \   0000009E   0x0664             LSLS     R4,R4,#+25
   \   000000A0   0xD508             BPL.N    ??flash_write_4
    241              {
    242                  FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \   000000A2   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   000000A4   0x7824             LDRB     R4,[R4, #+0]
   \   000000A6   0xF054 0x0440      ORRS     R4,R4,#0x40
   \   000000AA   0x....             LDR.N    R5,??DataTable3  ;; 0x40020000
   \   000000AC   0x702C             STRB     R4,[R5, #+0]
    243              
    244                  Return |= FLASH_RDCOLERR;
   \   000000AE   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000B2   0xE005             B.N      ??flash_write_2
    245              }
    246              else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
   \                     ??flash_write_4: (+1)
   \   000000B4   0x....             LDR.N    R4,??DataTable3  ;; 0x40020000
   \   000000B6   0x7824             LDRB     R4,[R4, #+0]
   \   000000B8   0x07E4             LSLS     R4,R4,#+31
   \   000000BA   0xD501             BPL.N    ??flash_write_2
    247              {
    248                  Return |= FLASH_MGSTAT0;
   \   000000BC   0xF050 0x0004      ORRS     R0,R0,#0x4
    249              } 
    250               
    251            return  Return;
   \                     ??flash_write_2: (+1)
   \   000000C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C2   0xBC36             POP      {R1,R2,R4,R5}
   \   000000C4   0x4770             BX       LR               ;; return
    252          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4001F004         DC32     0x4001f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4001F008         DC32     0x4001f008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40020007         DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40020006         DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4002000B         DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4002000A         DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40020008         DC32     0x40020008

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   LPLD_Flash_ByteProgram
       0   LPLD_Flash_Init
       0   LPLD_Flash_SectorErase
      16   flash_write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     212  LPLD_Flash_ByteProgram
      90  LPLD_Flash_Init
     148  LPLD_Flash_SectorErase
     198  flash_write

 
 692 bytes in section .text
 
 692 bytes of CODE memory

Errors: none
Warnings: none
