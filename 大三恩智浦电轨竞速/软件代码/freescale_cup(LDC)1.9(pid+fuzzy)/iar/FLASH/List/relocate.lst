###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        05/Mar/2016  08:12:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\common\relocate.c
#    Command line =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\common\relocate.c -D LPLD_K60 -D
#        USE_K60DZ10 -lCN
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\FLASH\List\"
#        -lB
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\FLASH\List\"
#        -o
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\app\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\app\MAIN\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\app\BSP\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\app\CTL\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\app\sensor\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\app\ITAC\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\CPU\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\common\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\LPLD\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\LPLD\FUNC\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\FatFs\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\USB\common\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\USB\driver\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\..\..\..\lib\USB\class\"
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\FLASH\List\relocate.lst
#    Object file  =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.9(pid+fuzzy)\iar\FLASH\Obj\relocate.o
#
###############################################################################

D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\common\relocate.c
      1          /**
      2           * @file relocate.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief Kinetis通用数据代码迁移函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 实现数据、代码由ROM向RAM迁移的过程
     10           *
     11           * 版权所有:北京拉普兰德电子技术有限公司
     12           * http://www.lpld.cn
     13           * mail:support@lpld.cn
     14           *
     15           * @par
     16           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     17           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     18           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     19           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     20           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     21           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     22           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     23           */
     24          
     25          #include "common.h"
     26          
     27          #if defined(__IAR_SYSTEMS_ICC__)
     28            #pragma section = ".data"
     29            #pragma section = ".data_init"
     30            #pragma section = ".bss"
     31            #pragma section = "CodeRelocate"
     32            #pragma section = "CodeRelocateRam"
     33          #endif
     34             
     35          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
     36          void common_relocate(void)
     37          {
   \                     common_relocate: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
     38              #ifndef __IAR_SYSTEMS_ICC__
     39                #warning 非IAR编译器需确定此处地址
     40                extern char __START_BSS[];
     41                extern char __END_BSS[];
     42                extern uint32 __DATA_ROM[];
     43                extern uint32 __DATA_RAM[];
     44                extern char __DATA_END[];
     45              #endif
     46            
     47            /* 声明一个计数器在拷贝循环中使用 */
     48            uint32 n;
     49            
     50            /* 为不同的数据段定义指针。
     51            * 这些变量将由链接文件中获取的值初始化
     52            */
     53            uint8 * data_ram, * data_rom, * data_rom_end;
     54            uint8 * bss_start, * bss_end;
     55            
     56            
     57            /* 引进链接文件中的VECTOR_TABLE和VECTOR_RAM的地址 */
     58            extern uint32 __VECTOR_TABLE[];
     59            extern uint32 __VECTOR_RAM[];
     60            
     61            /* 将中断向量表复制到RAM中 */
     62            if (__VECTOR_RAM != __VECTOR_TABLE)
   \   00000002   0x4E24             LDR.N    R6,??common_relocate_0
   \   00000004   0x4F24             LDR.N    R7,??common_relocate_0+0x4
   \   00000006   0x42BE             CMP      R6,R7
   \   00000008   0xD00C             BEQ.N    ??common_relocate_1
     63            {
     64              for (n = 0; n < 0x410; n++)
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x0030             MOVS     R0,R6
   \                     ??common_relocate_2: (+1)
   \   0000000E   0xF5B0 0x6F82      CMP      R0,#+1040
   \   00000012   0xD207             BCS.N    ??common_relocate_1
     65                __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \   00000014   0x4E20             LDR.N    R6,??common_relocate_0+0x4
   \   00000016   0xF856 0x6020      LDR      R6,[R6, R0, LSL #+2]
   \   0000001A   0x4F1E             LDR.N    R7,??common_relocate_0
   \   0000001C   0xF847 0x6020      STR      R6,[R7, R0, LSL #+2]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0xE7F4             B.N      ??common_relocate_2
     66            }
     67            /* 将新的中断向量表指针赋给VTOR寄存器 */
     68            write_vtor((uint32)__VECTOR_RAM);
   \                     ??common_relocate_1: (+1)
   \   00000024   0x4E1B             LDR.N    R6,??common_relocate_0
   \   00000026   0x4F1D             LDR.N    R7,??common_relocate_0+0x8  ;; 0xe000ed08
   \   00000028   0x603E             STR      R6,[R7, #+0]
     69            
     70            /* 获得.data段的地址(已初始化的数据段) */
     71            #if defined(__IAR_SYSTEMS_ICC__)
     72              data_ram = __section_begin(".data");
   \   0000002A   0x4E1D             LDR.N    R6,??common_relocate_0+0xC
   \   0000002C   0x0031             MOVS     R1,R6
     73              data_rom = __section_begin(".data_init");
   \   0000002E   0x4E1D             LDR.N    R6,??common_relocate_0+0x10
   \   00000030   0x0032             MOVS     R2,R6
     74              data_rom_end = __section_end(".data_init");
   \   00000032   0x4E1D             LDR.N    R6,??common_relocate_0+0x14
   \   00000034   0x0033             MOVS     R3,R6
     75              n = data_rom_end - data_rom;	
   \   00000036   0x1A9E             SUBS     R6,R3,R2
   \   00000038   0x0030             MOVS     R0,R6
     76            #else
     77              #warning 非IAR编译器需确定此处地址
     78              data_ram = (uint8 *)__DATA_RAM;
     79              data_rom = (uint8 *)__DATA_ROM;
     80              data_rom_end  = (uint8 *)__DATA_END; /* 该段在CodeWarrior编译器中为RAM地址 */
     81              n = data_rom_end - data_rom;
     82            #endif
     83            
     84            /* 从ROM复制已初始化的数据到RAM */
     85            while (n--)
   \                     ??common_relocate_3: (+1)
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0x1E70             SUBS     R0,R6,#+1
   \   0000003E   0x2E00             CMP      R6,#+0
   \   00000040   0xD004             BEQ.N    ??common_relocate_4
     86              *data_ram++ = *data_rom++;
   \   00000042   0x7816             LDRB     R6,[R2, #+0]
   \   00000044   0x700E             STRB     R6,[R1, #+0]
   \   00000046   0x1C52             ADDS     R2,R2,#+1
   \   00000048   0x1C49             ADDS     R1,R1,#+1
   \   0000004A   0xE7F6             B.N      ??common_relocate_3
     87            
     88            
     89            /* 获得.bss段的地址 (初始化为0的数据) */
     90            #if defined(__IAR_SYSTEMS_ICC__)
     91            bss_start = __section_begin(".bss");
   \                     ??common_relocate_4: (+1)
   \   0000004C   0x4E17             LDR.N    R6,??common_relocate_0+0x18
   \   0000004E   0x0034             MOVS     R4,R6
     92            bss_end = __section_end(".bss");  
   \   00000050   0x4E17             LDR.N    R6,??common_relocate_0+0x1C
   \   00000052   0x0035             MOVS     R5,R6
     93            #else
     94            #warning 非IAR编译器需确定此处地址
     95            bss_start = (uint8 *)__START_BSS;
     96            bss_end = (uint8 *)__END_BSS;
     97            #endif
     98            
     99            /* 清零初始化为0的数据段 */
    100            n = bss_end - bss_start;
   \   00000054   0x1B2E             SUBS     R6,R5,R4
   \   00000056   0x0030             MOVS     R0,R6
    101            while(n--)
   \                     ??common_relocate_5: (+1)
   \   00000058   0x0006             MOVS     R6,R0
   \   0000005A   0x1E70             SUBS     R0,R6,#+1
   \   0000005C   0x2E00             CMP      R6,#+0
   \   0000005E   0xD003             BEQ.N    ??common_relocate_6
    102              *bss_start++ = 0;
   \   00000060   0x2600             MOVS     R6,#+0
   \   00000062   0x7026             STRB     R6,[R4, #+0]
   \   00000064   0x1C64             ADDS     R4,R4,#+1
   \   00000066   0xE7F7             B.N      ??common_relocate_5
    103            
    104            /* 取得所有应该从ROM复制到RAM的代码段的地址。
    105            * IAR有一个预定义的关键字可以标记独立的函数为从RAM执行。
    106            * 在函数的返回类型前添加"__ramfunc"关键字可以将函数标记为从RAM中执行。
    107            * 例如:__ramfunc void foo(void);
    108            */
    109            #if defined(__IAR_SYSTEMS_ICC__)
    110            uint8* code_relocate_ram = __section_begin("CodeRelocateRam");
   \                     ??common_relocate_6: (+1)
   \   00000068   0x4E12             LDR.N    R6,??common_relocate_0+0x20
    111            uint8* code_relocate = __section_begin("CodeRelocate");
   \   0000006A   0x4F13             LDR.N    R7,??common_relocate_0+0x24
    112            uint8* code_relocate_end = __section_end("CodeRelocate");
   \   0000006C   0xF8DF 0xC04C      LDR.W    R12,??common_relocate_0+0x28
    113            
    114            /* 将函数从ROM复制到RAM */
    115            n = code_relocate_end - code_relocate;
   \   00000070   0xEBBC 0x0E07      SUBS     LR,R12,R7
   \   00000074   0x4670             MOV      R0,LR
    116            while (n--)
   \                     ??common_relocate_7: (+1)
   \   00000076   0x4686             MOV      LR,R0
   \   00000078   0xF1BE 0x0001      SUBS     R0,LR,#+1
   \   0000007C   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000080   0xD006             BEQ.N    ??common_relocate_8
    117              *code_relocate_ram++ = *code_relocate++;
   \   00000082   0xF897 0xE000      LDRB     LR,[R7, #+0]
   \   00000086   0xF886 0xE000      STRB     LR,[R6, #+0]
   \   0000008A   0x1C7F             ADDS     R7,R7,#+1
   \   0000008C   0x1C76             ADDS     R6,R6,#+1
   \   0000008E   0xE7F2             B.N      ??common_relocate_7
    118            #endif
    119          }
   \                     ??common_relocate_8: (+1)
   \   00000090   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   00000092   0xBF00             Nop      
   \                     ??common_relocate_0:
   \   00000094   0x........         DC32     __VECTOR_RAM
   \   00000098   0x........         DC32     __VECTOR_TABLE
   \   0000009C   0xE000ED08         DC32     0xe000ed08
   \   000000A0   0x........         DC32     SFB(`.data`)
   \   000000A4   0x........         DC32     SFB(`.data_init`)
   \   000000A8   0x........         DC32     SFE(`.data_init`)
   \   000000AC   0x........         DC32     SFB(`.bss`)
   \   000000B0   0x........         DC32     SFE(`.bss`)
   \   000000B4   0x........         DC32     SFB(CodeRelocateRam)
   \   000000B8   0x........         DC32     SFB(CodeRelocate)
   \   000000BC   0x........         DC32     SFE(CodeRelocate)
    120          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   common_relocate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     192  common_relocate

 
 192 bytes in section .text
 
 192 bytes of CODE memory

Errors: none
Warnings: none
