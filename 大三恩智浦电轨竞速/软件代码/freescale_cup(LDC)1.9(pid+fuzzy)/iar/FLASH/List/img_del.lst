###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        18/Oct/2015  16:10:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\app\IMG\img_del.c
#    Command line =  
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\app\IMG\img_del.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\FLASH\List\
#        -lB
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\FLASH\List\
#        -o
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\app\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\app\MAIN\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\app\BSP\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\app\CTL\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\app\IMG\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\app\ITAC\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\CPU\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\common\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\LPLD\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\LPLD\HW\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\FatFs\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\FatFs\option\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\USB\common\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\USB\driver\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\USB\descriptor\
#        -I
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\..\..\..\lib\USB\class\
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\FLASH\List\img_del.lst
#    Object file  =  
#        X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\iar\FLASH\Obj\img_del.o
#
###############################################################################

X:\whutddk\·ÉË¼¿¨¶û\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup1.0\app\IMG\img_del.c
      1          #include "include.h"
      2          

   \                                 In section .bss, align 4
      3          struct _img img;
   \                     img:
   \   00000000                      DS8 432
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void OST_AVE()
      6          {
   \                     OST_AVE: (+1)
   \   00000000   0xB410             PUSH     {R4}
      7            uint8 i ;
      8            uint8 max = 0;
   \   00000002   0x2000             MOVS     R0,#+0
      9            uint8 min = 255;
   \   00000004   0x21FF             MOVS     R1,#+255
     10            
     11            for ( i = 0;i < 128; i++ )
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x001A             MOVS     R2,R3
   \                     ??OST_AVE_0: (+1)
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x2A80             CMP      R2,#+128
   \   0000000E   0xDA15             BGE.N    ??OST_AVE_1
     12            {
     13              if ( img.Pixel[0][i] > max )
   \   00000010   0x....             LDR.N    R3,??DataTable1
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x5CD3             LDRB     R3,[R2, R3]
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x4298             CMP      R0,R3
   \   0000001A   0xD203             BCS.N    ??OST_AVE_2
     14              {
     15                max = img.Pixel[0][i];
   \   0000001C   0x....             LDR.N    R3,??DataTable1
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x5CD3             LDRB     R3,[R2, R3]
   \   00000022   0x0018             MOVS     R0,R3
     16              }
     17              if ( img.Pixel[0][i] < min )
   \                     ??OST_AVE_2: (+1)
   \   00000024   0x....             LDR.N    R3,??DataTable1
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x5CD3             LDRB     R3,[R2, R3]
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x428B             CMP      R3,R1
   \   0000002E   0xD203             BCS.N    ??OST_AVE_3
     18              {
     19                min = img.Pixel[0][i];
   \   00000030   0x....             LDR.N    R3,??DataTable1
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x5CD3             LDRB     R3,[R2, R3]
   \   00000036   0x0019             MOVS     R1,R3
     20              }
     21            }
   \                     ??OST_AVE_3: (+1)
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \   0000003A   0xE7E6             B.N      ??OST_AVE_0
     22            
     23            img.THR = min + ( max - min ) / 2;
   \                     ??OST_AVE_1: (+1)
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x1A43             SUBS     R3,R0,R1
   \   00000042   0x2402             MOVS     R4,#+2
   \   00000044   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   00000048   0x185B             ADDS     R3,R3,R1
   \   0000004A   0x....             LDR.N    R4,??DataTable1
   \   0000004C   0xF884 0x3180      STRB     R3,[R4, #+384]
     24          }
   \   00000050   0xBC10             POP      {R4}
   \   00000052   0x4770             BX       LR               ;; return
     25          
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void OTSU_Method()
     28          {
   \                     OTSU_Method: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x7D0B      SUB      SP,SP,#+556
     29            uint8* ImgAddr = &img.Pixel[0][0];            //Ö¸ÕëÖ¸ÏòÏñËØBUFF
   \   00000008   0x....             LDR.N    R0,??DataTable1
   \   0000000A   0x9003             STR      R0,[SP, #+12]
     30            
     31            //³õÊ¼»¯
     32            uint16 GrayLevel[256]={ 0 };         //buffÖ±·½Í¼
   \   0000000C   0xA80B             ADD      R0,SP,#+44
   \   0000000E   0xF44F 0x7100      MOV      R1,#+512
   \   00000012   0x.... 0x....      BL       __aeabi_memclr4
     33            float u0 = 0 , u1 = 0;
   \   00000016   0xF05F 0x0900      MOVS     R9,#+0
   \   0000001A   0xF05F 0x0800      MOVS     R8,#+0
     34            float w0 = 0 , w1 = 0 , RlTempO , RlMaxO = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9007             STR      R0,[SP, #+28]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x900A             STR      R0,[SP, #+40]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9008             STR      R0,[SP, #+32]
     35            uint16 Size = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     36            uint32 TotalGrayLevel = 0 ;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9004             STR      R0,[SP, #+16]
     37            uint16 Count = 0 ;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     38            uint32 CurrentGrayLevel ;
     39            uint32 SumGray = 0;
   \   0000003A   0x2400             MOVS     R4,#+0
     40            uint8   ThresholdVal = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF88D 0x0005      STRB     R0,[SP, #+5]
     41            uint32 Total;
     42            int32  p;
     43            uint8 j ,i;
     44            uint16 Gray;
     45            uint8 num;
     46            
     47            uint16* GrayPtr = & GrayLevel[0];
   \   00000042   0xF10D 0x0B2C      ADD      R11,SP,#+44
     48              
     49              //Ö±·½Í¼Í³¼Æ
     50              for(j = 0; j < CCD_USED ; j ++) //Ö»ÓÃ0,1²»ÓÃBUFF¡¾2¡¿ n¸öccdÒ»ÆðÍ³¼Æ
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \                     ??OTSU_Method_0: (+1)
   \   0000004C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD129             BNE.N    ??OTSU_Method_1
     51              {
     52                ImgAddr = &img.Pixel[0][0] + j * 128;
   \   00000054   0x....             LDR.N    R0,??DataTable1
   \   00000056   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000005A   0x2280             MOVS     R2,#+128
   \   0000005C   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000060   0x9003             STR      R0,[SP, #+12]
     53                for( i = 0; i < 127; i = i+ 2)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x0006             MOVS     R6,R0
   \                     ??OTSU_Method_2: (+1)
   \   00000066   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000068   0x2E7F             CMP      R6,#+127
   \   0000006A   0xDA17             BGE.N    ??OTSU_Method_3
     54                {                                                 //Ö»Í³¼ÆÁË°ë¸öÍ¼
     55                  if( *(ImgAddr + i) > CCD_GIT )               //¶ÔÔ­Ê¼ÇúÏß½øÐÐÒ»¸öÏÞ·ù£¬·ÀÖ¹·´¹â
   \   0000006C   0x9803             LDR      R0,[SP, #+12]
   \   0000006E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000070   0x5C30             LDRB     R0,[R6, R0]
   \   00000072   0x28BF             CMP      R0,#+191
   \   00000074   0xDB03             BLT.N    ??OTSU_Method_4
     56                  {
     57                    *(ImgAddr + i) = CCD_GIT;                //¶ÔÔ­Ê¼ÇúÏß½øÐÐÒ»¸öÏÞ·ù£¬·ÀÖ¹·´¹â
   \   00000076   0x20BE             MOVS     R0,#+190
   \   00000078   0x9903             LDR      R1,[SP, #+12]
   \   0000007A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007C   0x5470             STRB     R0,[R6, R1]
     58                  }
     59                  GrayLevel[*(ImgAddr + i)]++;               //Ö±·½Í¼Í³¼Æ
   \                     ??OTSU_Method_4: (+1)
   \   0000007E   0xA80B             ADD      R0,SP,#+44
   \   00000080   0x9903             LDR      R1,[SP, #+12]
   \   00000082   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000084   0x5C71             LDRB     R1,[R6, R1]
   \   00000086   0xAA0B             ADD      R2,SP,#+44
   \   00000088   0x9B03             LDR      R3,[SP, #+12]
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x5CF3             LDRB     R3,[R6, R3]
   \   0000008E   0xF832 0x2013      LDRH     R2,[R2, R3, LSL #+1]
   \   00000092   0x1C52             ADDS     R2,R2,#+1
   \   00000094   0xF820 0x2011      STRH     R2,[R0, R1, LSL #+1]
     60                }
   \   00000098   0x1CB6             ADDS     R6,R6,#+2
   \   0000009A   0xE7E4             B.N      ??OTSU_Method_2
     61          //      if( j == 0 )
     62          //        FindMaxMinGray(GrayLevel);     //Î´ÖªÓÃÍ¾£¬ÔÝÊ±ÆÁ±Î
     63              }  
   \                     ??OTSU_Method_3: (+1)
   \   0000009C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000A0   0x1C40             ADDS     R0,R0,#+1
   \   000000A2   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   000000A6   0xE7D1             B.N      ??OTSU_Method_0
     64              
     65              //Æ½¾ùÂË²¨
     66              for( Gray = 0; Gray < 256; Gray++ )     //»Ò¶È±éÀú
   \                     ??OTSU_Method_1: (+1)
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x0005             MOVS     R5,R0
   \                     ??OTSU_Method_5: (+1)
   \   000000AC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AE   0x2DFF             CMP      R5,#+255
   \   000000B0   0xDC2E             BGT.N    ??OTSU_Method_6
     67              {
     68                Total = 0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x9006             STR      R0,[SP, #+24]
     69                for( num = 0; num < 5; num++ )         //ÕâÖÖÂË²¨£¿£¿£¿£¿
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x0007             MOVS     R7,R0
   \                     ??OTSU_Method_7: (+1)
   \   000000BA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BC   0x2F05             CMP      R7,#+5
   \   000000BE   0xDA12             BGE.N    ??OTSU_Method_8
     70                {
     71                  p = Gray + num;
   \   000000C0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C2   0xFA17 0xF085      UXTAH    R0,R7,R5
   \   000000C6   0x9005             STR      R0,[SP, #+20]
     72                  if( p > 255 ) 
   \   000000C8   0x9805             LDR      R0,[SP, #+20]
   \   000000CA   0x28FF             CMP      R0,#+255
   \   000000CC   0xDD01             BLE.N    ??OTSU_Method_9
     73                  { 
     74                    p = 255; 
   \   000000CE   0x20FF             MOVS     R0,#+255
   \   000000D0   0x9005             STR      R0,[SP, #+20]
     75                  }
     76                  Total += GrayLevel[p];
   \                     ??OTSU_Method_9: (+1)
   \   000000D2   0x9806             LDR      R0,[SP, #+24]
   \   000000D4   0xA90B             ADD      R1,SP,#+44
   \   000000D6   0x9A05             LDR      R2,[SP, #+20]
   \   000000D8   0xF831 0x1012      LDRH     R1,[R1, R2, LSL #+1]
   \   000000DC   0xFA10 0xF081      UXTAH    R0,R0,R1
   \   000000E0   0x9006             STR      R0,[SP, #+24]
     77                }
   \   000000E2   0x1C7F             ADDS     R7,R7,#+1
   \   000000E4   0xE7E9             B.N      ??OTSU_Method_7
     78                GrayLevel[Gray] = (uint8)((float)Total / 5 + 0.5);    //ºÏ³Éµ½Ò»¸ö»Ò¶ÈÖµµÄÊýÄ¿
   \                     ??OTSU_Method_8: (+1)
   \   000000E6   0x9806             LDR      R0,[SP, #+24]
   \   000000E8   0x.... 0x....      BL       __aeabi_ui2f
   \   000000EC   0x....             LDR.N    R1,??DataTable1_1  ;; 0x40a00000
   \   000000EE   0x.... 0x....      BL       __aeabi_fdiv
   \   000000F2   0x.... 0x....      BL       __aeabi_f2d
   \   000000F6   0x2200             MOVS     R2,#+0
   \   000000F8   0x....             LDR.N    R3,??DataTable1_2  ;; 0x3fe00000
   \   000000FA   0x.... 0x....      BL       __aeabi_dadd
   \   000000FE   0x.... 0x....      BL       __aeabi_d2iz
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0xA90B             ADD      R1,SP,#+44
   \   00000106   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000108   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
     79              }
   \   0000010C   0x1C6D             ADDS     R5,R5,#+1
   \   0000010E   0xE7CD             B.N      ??OTSU_Method_5
     80              
     81              
     82              //Çó³ö×ÜÏñËØÖµ
     83              for(Gray = 0; Gray <= 255; Gray++)
   \                     ??OTSU_Method_6: (+1)
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x0005             MOVS     R5,R0
   \                     ??OTSU_Method_10: (+1)
   \   00000114   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000116   0x2DFF             CMP      R5,#+255
   \   00000118   0xDC15             BGT.N    ??OTSU_Method_11
     84              {
     85                if( *(GrayPtr) != 0 )
   \   0000011A   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD00D             BEQ.N    ??OTSU_Method_12
     86                {
     87                  TotalGrayLevel += (uint32)(*(GrayPtr) * i); //×ÜµÄÖÊÁ¿¾à
   \   00000122   0x9804             LDR      R0,[SP, #+16]
   \   00000124   0xF8BB 0x1000      LDRH     R1,[R11, #+0]
   \   00000128   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000012A   0xFB06 0x0001      MLA      R0,R6,R1,R0
   \   0000012E   0x9004             STR      R0,[SP, #+16]
     88                  Size += *(GrayPtr);                         //×ÜµÄµãÊý
   \   00000130   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000134   0xF8BB 0x1000      LDRH     R1,[R11, #+0]
   \   00000138   0x1808             ADDS     R0,R1,R0
   \   0000013A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     89                }
     90                GrayPtr++;
   \                     ??OTSU_Method_12: (+1)
   \   0000013E   0xF11B 0x0B02      ADDS     R11,R11,#+2
     91              }
   \   00000142   0x1C6D             ADDS     R5,R5,#+1
   \   00000144   0xE7E6             B.N      ??OTSU_Method_10
     92              
     93              
     94              //±éÀúÑ°ÕÒ×î´ó
     95              for(CurrentGrayLevel = 0; CurrentGrayLevel < 256; CurrentGrayLevel++)
   \                     ??OTSU_Method_11: (+1)
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x4682             MOV      R10,R0
   \                     ??OTSU_Method_13: (+1)
   \   0000014A   0xF1BA 0x0FFF      CMP      R10,#+255
   \   0000014E   0xD879             BHI.N    ??OTSU_Method_14
     96              {
     97                if(SumGray == TotalGrayLevel)   //¾ÓÈ»»á³¬£¿£¿£¿£¿£¿
   \   00000150   0x9804             LDR      R0,[SP, #+16]
   \   00000152   0x4284             CMP      R4,R0
   \   00000154   0xD076             BEQ.N    ??OTSU_Method_14
     98                {
     99                  break;
    100                }
    101                if(GrayLevel[CurrentGrayLevel] == 0)
   \                     ??OTSU_Method_15: (+1)
   \   00000156   0xA80B             ADD      R0,SP,#+44
   \   00000158   0xF830 0x001A      LDRH     R0,[R0, R10, LSL #+1]
   \   0000015C   0x2800             CMP      R0,#+0
   \   0000015E   0xD06E             BEQ.N    ??OTSU_Method_16
    102                {
    103                  continue;
    104                }
    105                
    106                SumGray += (uint32)(GrayLevel[CurrentGrayLevel] * CurrentGrayLevel);   //Ç°¾°ÖÊÁ¿¾à
   \                     ??OTSU_Method_17: (+1)
   \   00000160   0xA80B             ADD      R0,SP,#+44
   \   00000162   0xF830 0x001A      LDRH     R0,[R0, R10, LSL #+1]
   \   00000166   0xFB0A 0x4400      MLA      R4,R10,R0,R4
    107                Count += GrayLevel[CurrentGrayLevel];     //Ç°¾°µãÊý                                                      
   \   0000016A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000016E   0xA90B             ADD      R1,SP,#+44
   \   00000170   0xF831 0x101A      LDRH     R1,[R1, R10, LSL #+1]
   \   00000174   0x1808             ADDS     R0,R1,R0
   \   00000176   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    108                
    109                w0 = (float)Count / Size;                 //²»³ýSiZEÒ²¿ÉÒÔ,²»Ó°Ïì×î´óÖµµãµÄÎ»ÖÃ
   \   0000017A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000017E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000182   0x9000             STR      R0,[SP, #+0]
   \   00000184   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000188   0x.... 0x....      BL       __aeabi_ui2f
   \   0000018C   0x0001             MOVS     R1,R0
   \   0000018E   0x9800             LDR      R0,[SP, #+0]
   \   00000190   0x.... 0x....      BL       __aeabi_fdiv
   \   00000194   0x9007             STR      R0,[SP, #+28]
    110                u0 = (Count == 0 ? 0 : ((float)SumGray / Count));
   \   00000196   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000019A   0x2800             CMP      R0,#+0
   \   0000019C   0xD102             BNE.N    ??OTSU_Method_18
   \   0000019E   0xF05F 0x0900      MOVS     R9,#+0
   \   000001A2   0xE00C             B.N      ??OTSU_Method_19
   \                     ??OTSU_Method_18: (+1)
   \   000001A4   0x0020             MOVS     R0,R4
   \   000001A6   0x.... 0x....      BL       __aeabi_ui2f
   \   000001AA   0x4681             MOV      R9,R0
   \   000001AC   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   000001B0   0x.... 0x....      BL       __aeabi_ui2f
   \   000001B4   0x0001             MOVS     R1,R0
   \   000001B6   0x4648             MOV      R0,R9
   \   000001B8   0x.... 0x....      BL       __aeabi_fdiv
   \   000001BC   0x4681             MOV      R9,R0
    111                
    112                w1 = (float)(1 - w0);
   \                     ??OTSU_Method_19: (+1)
   \   000001BE   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   000001C2   0x9907             LDR      R1,[SP, #+28]
   \   000001C4   0x.... 0x....      BL       __aeabi_fsub
   \   000001C8   0x900A             STR      R0,[SP, #+40]
    113                u1 = ( Size - Count != 0 ? (float)(TotalGrayLevel - SumGray) / (Size - Count) : 0 );
   \   000001CA   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   000001CE   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   000001D2   0x1A40             SUBS     R0,R0,R1
   \   000001D4   0x2800             CMP      R0,#+0
   \   000001D6   0xD011             BEQ.N    ??OTSU_Method_20
   \   000001D8   0x9804             LDR      R0,[SP, #+16]
   \   000001DA   0x1B00             SUBS     R0,R0,R4
   \   000001DC   0x.... 0x....      BL       __aeabi_ui2f
   \   000001E0   0x4680             MOV      R8,R0
   \   000001E2   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   000001E6   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   000001EA   0x1A40             SUBS     R0,R0,R1
   \   000001EC   0x.... 0x....      BL       __aeabi_i2f
   \   000001F0   0x0001             MOVS     R1,R0
   \   000001F2   0x4640             MOV      R0,R8
   \   000001F4   0x.... 0x....      BL       __aeabi_fdiv
   \   000001F8   0x4680             MOV      R8,R0
   \   000001FA   0xE001             B.N      ??OTSU_Method_21
   \                     ??OTSU_Method_20: (+1)
   \   000001FC   0xF05F 0x0800      MOVS     R8,#+0
    114                
    115                RlTempO = w0 * w1 * (u0 - u1) * (u0 - u1);
   \                     ??OTSU_Method_21: (+1)
   \   00000200   0x9807             LDR      R0,[SP, #+28]
   \   00000202   0x990A             LDR      R1,[SP, #+40]
   \   00000204   0x.... 0x....      BL       __aeabi_fmul
   \   00000208   0x9000             STR      R0,[SP, #+0]
   \   0000020A   0x4648             MOV      R0,R9
   \   0000020C   0x4641             MOV      R1,R8
   \   0000020E   0x.... 0x....      BL       __aeabi_fsub
   \   00000212   0x9900             LDR      R1,[SP, #+0]
   \   00000214   0x.... 0x....      BL       __aeabi_fmul
   \   00000218   0x9000             STR      R0,[SP, #+0]
   \   0000021A   0x4648             MOV      R0,R9
   \   0000021C   0x4641             MOV      R1,R8
   \   0000021E   0x.... 0x....      BL       __aeabi_fsub
   \   00000222   0x9900             LDR      R1,[SP, #+0]
   \   00000224   0x.... 0x....      BL       __aeabi_fmul
   \   00000228   0x9009             STR      R0,[SP, #+36]
    116                if(RlTempO > RlMaxO)
   \   0000022A   0x9808             LDR      R0,[SP, #+32]
   \   0000022C   0x9909             LDR      R1,[SP, #+36]
   \   0000022E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000232   0xD204             BCS.N    ??OTSU_Method_16
    117                {
    118                  RlMaxO = RlTempO;
   \   00000234   0x9809             LDR      R0,[SP, #+36]
   \   00000236   0x9008             STR      R0,[SP, #+32]
    119                  //img.THR = (uint8)CurrentGrayLevel;
    120                  ThresholdVal = (uint8)CurrentGrayLevel;
   \   00000238   0x4650             MOV      R0,R10
   \   0000023A   0xF88D 0x0005      STRB     R0,[SP, #+5]
    121                }
    122              }
   \                     ??OTSU_Method_16: (+1)
   \   0000023E   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000242   0xE782             B.N      ??OTSU_Method_13
    123              
    124            
    125            img.THR =  ThresholdVal ;
   \                     ??OTSU_Method_14: (+1)
   \   00000244   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000248   0x....             LDR.N    R1,??DataTable1
   \   0000024A   0xF881 0x0180      STRB     R0,[R1, #+384]
    126          }
   \   0000024E   0xF50D 0x7D0B      ADD      SP,SP,#+556
   \   00000252   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     img

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .rodata, align 4
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000012   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000022   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000032   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000042   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000052   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000062   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000072   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000082   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000092   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000102   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000112   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000122   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000132   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000142   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000152   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000162   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000172   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000182   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000192   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    127          
    128          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   OST_AVE
     592   OTSU_Method
       592   -> __aeabi_d2iz
       592   -> __aeabi_dadd
       592   -> __aeabi_f2d
       592   -> __aeabi_fdiv
       592   -> __aeabi_fmul
       592   -> __aeabi_fsub
       592   -> __aeabi_i2f
       592   -> __aeabi_memclr4
       592   -> __aeabi_ui2f
       592 __aeabi_cfcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
     512  ?_0
      84  OST_AVE
     598  OTSU_Method
     432  img

 
 432 bytes in section .bss
 512 bytes in section .rodata
 694 bytes in section .text
 
 694 bytes of CODE  memory
 512 bytes of CONST memory
 432 bytes of DATA  memory

Errors: none
Warnings: none
