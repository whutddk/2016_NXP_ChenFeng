###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        31/Dec/2015  15:17:54
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_UART.c
#    Command line =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_UART.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\"
#        -lB
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\"
#        -o
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\MAIN\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\BSP\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\CTL\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\sensor\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\ITAC\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\common\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\FUNC\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\class\"
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\HW_UART.lst
#    Object file  =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\Obj\HW_UART.o
#
###############################################################################

G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_UART.c
      1          /**
      2           * @file HW_UART.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief UART底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_UART.h"
     24          
     25          //用户接收中断函数入口地址数组

   \                                 In section .bss, align 4
     26          UART_ISR_CALLBACK UART_R_ISR[6];
   \                     UART_R_ISR:
   \   00000000                      DS8 24
     27          //用户发送中断函数入口地址数组

   \                                 In section .bss, align 4
     28          UART_ISR_CALLBACK UART_T_ISR[6];  
   \                     UART_T_ISR:
   \   00000000                      DS8 24
     29          
     30          
     31          /*
     32           * LPLD_UART_Init
     33           * 初始化UART通道、波特率、发送接收引脚
     34           * 
     35           * 参数:
     36           *    uart_init_structure--UART初始化结构体，
     37           *                        具体定义见UART_InitTypeDef
     38           *
     39           * 输出:
     40           *    无
     41           *
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          void LPLD_UART_Init(UART_InitTypeDef uart_init_structure)
     44          {
   \                     LPLD_UART_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
     45            register uint16 sbr, brfa;
     46            uint32 sysclk;
     47            uint8 temp, x ,len;
     48            UART_Type *uartx = uart_init_structure.UART_Uartx;
   \   00000006   0x9E09             LDR      R6,[SP, #+36]
     49            uint32 baud = uart_init_structure.UART_BaudRate;
   \   00000008   0x9F0A             LDR      R7,[SP, #+40]
     50            PortPinsEnum_Type tx_pin = uart_init_structure.UART_TxPin;
   \   0000000A   0xF89D 0xC02C      LDRB     R12,[SP, #+44]
     51            PortPinsEnum_Type rx_pin = uart_init_structure.UART_RxPin;
   \   0000000E   0xF89D 0xE02D      LDRB     LR,[SP, #+45]
     52            UART_ISR_CALLBACK rx_isr = uart_init_structure.UART_RxIsr;
   \   00000012   0xF8DD 0x8038      LDR      R8,[SP, #+56]
     53            UART_ISR_CALLBACK tx_isr = uart_init_structure.UART_TxIsr;
   \   00000016   0xF8DD 0x903C      LDR      R9,[SP, #+60]
     54            
     55            if(baud == NULL)
   \   0000001A   0x2F00             CMP      R7,#+0
   \   0000001C   0xD102             BNE.N    ??LPLD_UART_Init_0
     56            {
     57              baud = 9600;
   \   0000001E   0xF44F 0x5A16      MOV      R10,#+9600
   \   00000022   0x4657             MOV      R7,R10
     58            }
     59            
     60            //使能选中的UART串口通道时钟，相应GPIO的UART复用功能   
     61            if(uartx == UART0)
   \                     ??LPLD_UART_Init_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R10,??DataTable10_2  ;; 0x4006a000
   \   00000028   0x4556             CMP      R6,R10
   \   0000002A   0xD14E             BNE.N    ??LPLD_UART_Init_1
     62            {
     63              x = 0;
   \   0000002C   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000030   0x4654             MOV      R4,R10
     64              sysclk = g_core_clock;
   \   00000032   0x.... 0x....      LDR.W    R10,??DataTable10_3
   \   00000036   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   0000003A   0x4652             MOV      R2,R10
     65              SIM->SCGC4 |= SIM_SCGC4_UART0_MASK;
   \   0000003C   0x.... 0x....      LDR.W    R10,??DataTable10_4  ;; 0x40048034
   \   00000040   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   00000044   0xF45A 0x6A80      ORRS     R10,R10,#0x400
   \   00000048   0x.... 0x....      LDR.W    R11,??DataTable10_4  ;; 0x40048034
   \   0000004C   0xF8CB 0xA000      STR      R10,[R11, #+0]
     66              
     67              if(tx_pin == PTA2)
   \   00000050   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000054   0xF1BC 0x0F02      CMP      R12,#+2
   \   00000058   0xD106             BNE.N    ??LPLD_UART_Init_2
     68                PORTA->PCR[2] = PORT_PCR_MUX(2); 
   \   0000005A   0xF44F 0x7A00      MOV      R10,#+512
   \   0000005E   0x.... 0x....      LDR.W    R11,??DataTable10_5  ;; 0x40049008
   \   00000062   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000066   0xE011             B.N      ??LPLD_UART_Init_3
     69              else if(tx_pin == PTA14)
   \                     ??LPLD_UART_Init_2: (+1)
   \   00000068   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000006C   0xF1BC 0x0F0E      CMP      R12,#+14
   \   00000070   0xD106             BNE.N    ??LPLD_UART_Init_4
     70                PORTA->PCR[14] = PORT_PCR_MUX(3); 
   \   00000072   0xF44F 0x7A40      MOV      R10,#+768
   \   00000076   0x.... 0x....      LDR.W    R11,??DataTable10_6  ;; 0x40049038
   \   0000007A   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000007E   0xE005             B.N      ??LPLD_UART_Init_3
     71              else
     72                PORTB->PCR[17] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_4: (+1)
   \   00000080   0xF44F 0x7A40      MOV      R10,#+768
   \   00000084   0x.... 0x....      LDR.W    R11,??DataTable10_7  ;; 0x4004a044
   \   00000088   0xF8CB 0xA000      STR      R10,[R11, #+0]
     73              
     74              if(rx_pin == PTA1)
   \                     ??LPLD_UART_Init_3: (+1)
   \   0000008C   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000090   0xF1BE 0x0F01      CMP      LR,#+1
   \   00000094   0xD106             BNE.N    ??LPLD_UART_Init_5
     75                PORTA->PCR[1] = PORT_PCR_MUX(2); 
   \   00000096   0xF44F 0x7A00      MOV      R10,#+512
   \   0000009A   0x.... 0x....      LDR.W    R11,??DataTable10_8  ;; 0x40049004
   \   0000009E   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000000A2   0xE128             B.N      ??LPLD_UART_Init_6
     76              else if(rx_pin == PTA15)
   \                     ??LPLD_UART_Init_5: (+1)
   \   000000A4   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000000A8   0xF1BE 0x0F0F      CMP      LR,#+15
   \   000000AC   0xD106             BNE.N    ??LPLD_UART_Init_7
     77                PORTA->PCR[15] = PORT_PCR_MUX(3); 
   \   000000AE   0xF44F 0x7A40      MOV      R10,#+768
   \   000000B2   0x.... 0x....      LDR.W    R11,??DataTable10_9  ;; 0x4004903c
   \   000000B6   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000000BA   0xE11C             B.N      ??LPLD_UART_Init_6
     78              else
     79                PORTB->PCR[16] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_7: (+1)
   \   000000BC   0xF44F 0x7A40      MOV      R10,#+768
   \   000000C0   0x.... 0x....      LDR.W    R11,??DataTable10_10  ;; 0x4004a040
   \   000000C4   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000000C8   0xE115             B.N      ??LPLD_UART_Init_6
     80            }
     81            else
     82            {
     83              if (uartx == UART1)
   \                     ??LPLD_UART_Init_1: (+1)
   \   000000CA   0x.... 0x....      LDR.W    R10,??DataTable10_11  ;; 0x4006b000
   \   000000CE   0x4556             CMP      R6,R10
   \   000000D0   0xD136             BNE.N    ??LPLD_UART_Init_8
     84              {
     85                x = 1;
   \   000000D2   0xF05F 0x0A01      MOVS     R10,#+1
   \   000000D6   0x4654             MOV      R4,R10
     86                sysclk = g_core_clock;
   \   000000D8   0x.... 0x....      LDR.W    R10,??DataTable10_3
   \   000000DC   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   000000E0   0x4652             MOV      R2,R10
     87                SIM->SCGC4 |= SIM_SCGC4_UART1_MASK;
   \   000000E2   0x.... 0x....      LDR.W    R10,??DataTable10_4  ;; 0x40048034
   \   000000E6   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   000000EA   0xF45A 0x6A00      ORRS     R10,R10,#0x800
   \   000000EE   0x.... 0x....      LDR.W    R11,??DataTable10_4  ;; 0x40048034
   \   000000F2   0xF8CB 0xA000      STR      R10,[R11, #+0]
     88                
     89                if(tx_pin == PTE0)   
   \   000000F6   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000FA   0xF1BC 0x0F7C      CMP      R12,#+124
   \   000000FE   0xD106             BNE.N    ??LPLD_UART_Init_9
     90                  PORTE->PCR[0] = PORT_PCR_MUX(3); 
   \   00000100   0xF44F 0x7A40      MOV      R10,#+768
   \   00000104   0x.... 0x....      LDR.W    R11,??DataTable10_12  ;; 0x4004d000
   \   00000108   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000010C   0xE005             B.N      ??LPLD_UART_Init_10
     91                else
     92                  PORTC->PCR[4] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_9: (+1)
   \   0000010E   0xF44F 0x7A40      MOV      R10,#+768
   \   00000112   0x.... 0x....      LDR.W    R11,??DataTable10_13  ;; 0x4004b010
   \   00000116   0xF8CB 0xA000      STR      R10,[R11, #+0]
     93                
     94                if(rx_pin == PTE1)
   \                     ??LPLD_UART_Init_10: (+1)
   \   0000011A   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000011E   0xF1BE 0x0F7D      CMP      LR,#+125
   \   00000122   0xD106             BNE.N    ??LPLD_UART_Init_11
     95                  PORTE->PCR[1] = PORT_PCR_MUX(3); 
   \   00000124   0xF44F 0x7A40      MOV      R10,#+768
   \   00000128   0x.... 0x....      LDR.W    R11,??DataTable10_14  ;; 0x4004d004
   \   0000012C   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000130   0xE0E1             B.N      ??LPLD_UART_Init_6
     96                else
     97                  PORTC->PCR[3] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_11: (+1)
   \   00000132   0xF44F 0x7A40      MOV      R10,#+768
   \   00000136   0x.... 0x....      LDR.W    R11,??DataTable10_15  ;; 0x4004b00c
   \   0000013A   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000013E   0xE0DA             B.N      ??LPLD_UART_Init_6
     98              }
     99              else
    100              {
    101                sysclk = g_bus_clock;
   \                     ??LPLD_UART_Init_8: (+1)
   \   00000140   0x.... 0x....      LDR.W    R10,??DataTable10_16
   \   00000144   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   00000148   0x4652             MOV      R2,R10
    102                if (uartx == UART2)
   \   0000014A   0x.... 0x....      LDR.W    R10,??DataTable10_17  ;; 0x4006c000
   \   0000014E   0x4556             CMP      R6,R10
   \   00000150   0xD119             BNE.N    ??LPLD_UART_Init_12
    103                {
    104                  x = 2;
   \   00000152   0xF05F 0x0A02      MOVS     R10,#+2
   \   00000156   0x4654             MOV      R4,R10
    105                  SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
   \   00000158   0x.... 0x....      LDR.W    R10,??DataTable10_4  ;; 0x40048034
   \   0000015C   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   00000160   0xF45A 0x5A80      ORRS     R10,R10,#0x1000
   \   00000164   0x.... 0x....      LDR.W    R11,??DataTable10_4  ;; 0x40048034
   \   00000168   0xF8CB 0xA000      STR      R10,[R11, #+0]
    106                  
    107                  PORTD->PCR[3] = PORT_PCR_MUX(3); 
   \   0000016C   0xF44F 0x7A40      MOV      R10,#+768
   \   00000170   0x.... 0x....      LDR.W    R11,??DataTable10_18  ;; 0x4004c00c
   \   00000174   0xF8CB 0xA000      STR      R10,[R11, #+0]
    108                  PORTD->PCR[2] = PORT_PCR_MUX(3);
   \   00000178   0xF44F 0x7A40      MOV      R10,#+768
   \   0000017C   0x.... 0x....      LDR.W    R11,??DataTable10_19  ;; 0x4004c008
   \   00000180   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000184   0xE0B7             B.N      ??LPLD_UART_Init_6
    109                }
    110                else
    111                {
    112                  if(uartx == UART3)
   \                     ??LPLD_UART_Init_12: (+1)
   \   00000186   0x.... 0x....      LDR.W    R10,??DataTable10_20  ;; 0x4006d000
   \   0000018A   0x4556             CMP      R6,R10
   \   0000018C   0xD149             BNE.N    ??LPLD_UART_Init_13
    113                  {
    114                    x = 3;
   \   0000018E   0xF05F 0x0A03      MOVS     R10,#+3
   \   00000192   0x4654             MOV      R4,R10
    115                    SIM->SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   00000194   0x.... 0x....      LDR.W    R10,??DataTable10_4  ;; 0x40048034
   \   00000198   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   0000019C   0xF45A 0x5A00      ORRS     R10,R10,#0x2000
   \   000001A0   0x.... 0x....      LDR.W    R11,??DataTable10_4  ;; 0x40048034
   \   000001A4   0xF8CB 0xA000      STR      R10,[R11, #+0]
    116                    
    117                    if(tx_pin == PTE4)
   \   000001A8   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000001AC   0xF1BC 0x0F80      CMP      R12,#+128
   \   000001B0   0xD106             BNE.N    ??LPLD_UART_Init_14
    118                      PORTE->PCR[4] = PORT_PCR_MUX(3); 
   \   000001B2   0xF44F 0x7A40      MOV      R10,#+768
   \   000001B6   0x.... 0x....      LDR.W    R11,??DataTable10_21  ;; 0x4004d010
   \   000001BA   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000001BE   0xE011             B.N      ??LPLD_UART_Init_15
    119                    else if(tx_pin == PTB11)
   \                     ??LPLD_UART_Init_14: (+1)
   \   000001C0   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000001C4   0xF1BC 0x0F2B      CMP      R12,#+43
   \   000001C8   0xD106             BNE.N    ??LPLD_UART_Init_16
    120                      PORTB->PCR[11] = PORT_PCR_MUX(3); 
   \   000001CA   0xF44F 0x7A40      MOV      R10,#+768
   \   000001CE   0x.... 0x....      LDR.W    R11,??DataTable10_22  ;; 0x4004a02c
   \   000001D2   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000001D6   0xE005             B.N      ??LPLD_UART_Init_15
    121                    else 
    122                      PORTC->PCR[17] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_16: (+1)
   \   000001D8   0xF44F 0x7A40      MOV      R10,#+768
   \   000001DC   0x.... 0x....      LDR.W    R11,??DataTable10_23  ;; 0x4004b044
   \   000001E0   0xF8CB 0xA000      STR      R10,[R11, #+0]
    123                    
    124                    if(rx_pin == PTE5)
   \                     ??LPLD_UART_Init_15: (+1)
   \   000001E4   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000001E8   0xF1BE 0x0F81      CMP      LR,#+129
   \   000001EC   0xD106             BNE.N    ??LPLD_UART_Init_17
    125                      PORTE->PCR[5] = PORT_PCR_MUX(3); 
   \   000001EE   0xF44F 0x7A40      MOV      R10,#+768
   \   000001F2   0x.... 0x....      LDR.W    R11,??DataTable10_24  ;; 0x4004d014
   \   000001F6   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000001FA   0xE07C             B.N      ??LPLD_UART_Init_6
    126                    else if(rx_pin == PTB10)
   \                     ??LPLD_UART_Init_17: (+1)
   \   000001FC   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000200   0xF1BE 0x0F2A      CMP      LR,#+42
   \   00000204   0xD106             BNE.N    ??LPLD_UART_Init_18
    127                      PORTB->PCR[10] = PORT_PCR_MUX(3); 
   \   00000206   0xF44F 0x7A40      MOV      R10,#+768
   \   0000020A   0x.... 0x....      LDR.W    R11,??DataTable10_25  ;; 0x4004a028
   \   0000020E   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000212   0xE070             B.N      ??LPLD_UART_Init_6
    128                    else
    129                      PORTC->PCR[16] = PORT_PCR_MUX(3);
   \                     ??LPLD_UART_Init_18: (+1)
   \   00000214   0xF44F 0x7A40      MOV      R10,#+768
   \   00000218   0x.... 0x....      LDR.W    R11,??DataTable10_26  ;; 0x4004b040
   \   0000021C   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000220   0xE069             B.N      ??LPLD_UART_Init_6
    130                  }
    131                  else
    132                  {
    133                    if(uartx == UART4)
   \                     ??LPLD_UART_Init_13: (+1)
   \   00000222   0x.... 0x....      LDR.W    R10,??DataTable10_27  ;; 0x400ea000
   \   00000226   0x4556             CMP      R6,R10
   \   00000228   0xD131             BNE.N    ??LPLD_UART_Init_19
    134                    {
    135                      x = 4;
   \   0000022A   0xF05F 0x0A04      MOVS     R10,#+4
   \   0000022E   0x4654             MOV      R4,R10
    136                      SIM->SCGC1 |= SIM_SCGC1_UART4_MASK;
   \   00000230   0x.... 0x....      LDR.W    R10,??DataTable10_28  ;; 0x40048028
   \   00000234   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   00000238   0xF45A 0x6A80      ORRS     R10,R10,#0x400
   \   0000023C   0x.... 0x....      LDR.W    R11,??DataTable10_28  ;; 0x40048028
   \   00000240   0xF8CB 0xA000      STR      R10,[R11, #+0]
    137                      
    138                      if(tx_pin == PTE24)
   \   00000244   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000248   0xF1BC 0x0F94      CMP      R12,#+148
   \   0000024C   0xD106             BNE.N    ??LPLD_UART_Init_20
    139                        PORTE->PCR[24] = PORT_PCR_MUX(3); 
   \   0000024E   0xF44F 0x7A40      MOV      R10,#+768
   \   00000252   0x.... 0x....      LDR.W    R11,??DataTable10_29  ;; 0x4004d060
   \   00000256   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000025A   0xE005             B.N      ??LPLD_UART_Init_21
    140                      else
    141                        PORTC->PCR[15] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_20: (+1)
   \   0000025C   0xF44F 0x7A40      MOV      R10,#+768
   \   00000260   0x.... 0x....      LDR.W    R11,??DataTable10_30  ;; 0x4004b03c
   \   00000264   0xF8CB 0xA000      STR      R10,[R11, #+0]
    142                      
    143                      if(rx_pin == PTE25)
   \                     ??LPLD_UART_Init_21: (+1)
   \   00000268   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000026C   0xF1BE 0x0F95      CMP      LR,#+149
   \   00000270   0xD106             BNE.N    ??LPLD_UART_Init_22
    144                        PORTE->PCR[25] = PORT_PCR_MUX(3); 
   \   00000272   0xF44F 0x7A40      MOV      R10,#+768
   \   00000276   0x.... 0x....      LDR.W    R11,??DataTable10_31  ;; 0x4004d064
   \   0000027A   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000027E   0xE03A             B.N      ??LPLD_UART_Init_6
    145                      else
    146                        PORTC->PCR[14] = PORT_PCR_MUX(3);
   \                     ??LPLD_UART_Init_22: (+1)
   \   00000280   0xF44F 0x7A40      MOV      R10,#+768
   \   00000284   0x.... 0x....      LDR.W    R11,??DataTable10_32  ;; 0x4004b038
   \   00000288   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000028C   0xE033             B.N      ??LPLD_UART_Init_6
    147                    }
    148                    else
    149                    {
    150                      x = 5;
   \                     ??LPLD_UART_Init_19: (+1)
   \   0000028E   0xF05F 0x0A05      MOVS     R10,#+5
   \   00000292   0x4654             MOV      R4,R10
    151                      uartx = UART5;
   \   00000294   0x.... 0x....      LDR.W    R10,??DataTable10_33  ;; 0x400eb000
   \   00000298   0x4656             MOV      R6,R10
    152                      SIM->SCGC1 |= SIM_SCGC1_UART5_MASK;
   \   0000029A   0x.... 0x....      LDR.W    R10,??DataTable10_28  ;; 0x40048028
   \   0000029E   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   000002A2   0xF45A 0x6A00      ORRS     R10,R10,#0x800
   \   000002A6   0x.... 0x....      LDR.W    R11,??DataTable10_28  ;; 0x40048028
   \   000002AA   0xF8CB 0xA000      STR      R10,[R11, #+0]
    153                      
    154                      if(tx_pin == PTD9)
   \   000002AE   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000002B2   0xF1BC 0x0F65      CMP      R12,#+101
   \   000002B6   0xD106             BNE.N    ??LPLD_UART_Init_23
    155                        PORTD->PCR[9] = PORT_PCR_MUX(3); 
   \   000002B8   0xF44F 0x7A40      MOV      R10,#+768
   \   000002BC   0x.... 0x....      LDR.W    R11,??DataTable10_34  ;; 0x4004c024
   \   000002C0   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000002C4   0xE005             B.N      ??LPLD_UART_Init_24
    156                      else
    157                        PORTE->PCR[8] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_23: (+1)
   \   000002C6   0xF44F 0x7A40      MOV      R10,#+768
   \   000002CA   0x.... 0x....      LDR.W    R11,??DataTable10_35  ;; 0x4004d020
   \   000002CE   0xF8CB 0xA000      STR      R10,[R11, #+0]
    158                      
    159                      if(rx_pin == PTD8)
   \                     ??LPLD_UART_Init_24: (+1)
   \   000002D2   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000002D6   0xF1BE 0x0F64      CMP      LR,#+100
   \   000002DA   0xD106             BNE.N    ??LPLD_UART_Init_25
    160                        PORTD->PCR[8] = PORT_PCR_MUX(3); 
   \   000002DC   0xF44F 0x7A40      MOV      R10,#+768
   \   000002E0   0x.... 0x....      LDR.W    R11,??DataTable10_36  ;; 0x4004c020
   \   000002E4   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000002E8   0xE005             B.N      ??LPLD_UART_Init_6
    161                      else
    162                        PORTE->PCR[9] = PORT_PCR_MUX(3); 
   \                     ??LPLD_UART_Init_25: (+1)
   \   000002EA   0xF44F 0x7A40      MOV      R10,#+768
   \   000002EE   0x.... 0x....      LDR.W    R11,??DataTable10_37  ;; 0x4004d024
   \   000002F2   0xF8CB 0xA000      STR      R10,[R11, #+0]
    163                    }
    164                  }
    165                }
    166              }
    167            }
    168            
    169            //在配置好其他寄存器前，先关闭发送器和接收器
    170            uartx->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
   \                     ??LPLD_UART_Init_6: (+1)
   \   000002F6   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   000002FA   0xF01A 0x0AF3      ANDS     R10,R10,#0xF3
   \   000002FE   0xF886 0xA003      STRB     R10,[R6, #+3]
    171            
    172            //配置UART为 8位, 无奇偶校验 */
    173            uartx->C1 = 0;	
   \   00000302   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000306   0xF886 0xA002      STRB     R10,[R6, #+2]
    174            
    175            //计算波特率
    176            sbr = (uint16)((sysclk)/(baud * 16));
   \   0000030A   0xEA5F 0x1A07      LSLS     R10,R7,#+4
   \   0000030E   0xFBB2 0xFAFA      UDIV     R10,R2,R10
   \   00000312   0x4650             MOV      R0,R10
    177            
    178            //保存UARTx_BDH寄存器中除了SBR的值
    179            temp = uartx->BDH & ~(UART_BDH_SBR(0x1F));
   \   00000314   0xF896 0xA000      LDRB     R10,[R6, #+0]
   \   00000318   0xF01A 0x0AE0      ANDS     R10,R10,#0xE0
   \   0000031C   0x4653             MOV      R3,R10
    180            
    181            uartx->BDH = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
   \   0000031E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000320   0xEA5F 0x2A10      LSRS     R10,R0,#+8
   \   00000324   0xF01A 0x0A1F      ANDS     R10,R10,#0x1F
   \   00000328   0xEA5A 0x0A03      ORRS     R10,R10,R3
   \   0000032C   0xF886 0xA000      STRB     R10,[R6, #+0]
    182            uartx->BDL = (uint8)(sbr & UART_BDL_SBR_MASK);
   \   00000330   0x7070             STRB     R0,[R6, #+1]
    183            
    184            //配置波特率的微调分数
    185            brfa = (((sysclk*32)/(baud * 16)) - (sbr * 32));
   \   00000332   0xEA5F 0x1A42      LSLS     R10,R2,#+5
   \   00000336   0xEA5F 0x1B07      LSLS     R11,R7,#+4
   \   0000033A   0xFBBA 0xFAFB      UDIV     R10,R10,R11
   \   0000033E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000340   0xEBBA 0x1A40      SUBS     R10,R10,R0, LSL #+5
   \   00000344   0x4651             MOV      R1,R10
    186            
    187            //保存UARTx_C4寄存器中除了BRFA的值
    188            temp = uartx->C4 & ~(UART_C4_BRFA(0x1F));
   \   00000346   0xF896 0xA00A      LDRB     R10,[R6, #+10]
   \   0000034A   0xF01A 0x0AE0      ANDS     R10,R10,#0xE0
   \   0000034E   0x4653             MOV      R3,R10
    189            
    190            uartx->C4 = temp |  UART_C4_BRFA(brfa);    
   \   00000350   0xF011 0x0A1F      ANDS     R10,R1,#0x1F
   \   00000354   0xEA5A 0x0A03      ORRS     R10,R10,R3
   \   00000358   0xF886 0xA00A      STRB     R10,[R6, #+10]
    191            
    192            //配置UART接收DMA方式
    193            if( uart_init_structure.UART_RxDMAEnable == TRUE 
    194              && uart_init_structure.UART_RxIntEnable == TRUE )
   \   0000035C   0xF89D 0xA031      LDRB     R10,[SP, #+49]
   \   00000360   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000364   0xD111             BNE.N    ??LPLD_UART_Init_26
   \   00000366   0xF89D 0xA02E      LDRB     R10,[SP, #+46]
   \   0000036A   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000036E   0xD10C             BNE.N    ??LPLD_UART_Init_26
    195            {
    196              //使能接收中断或者DMA
    197              uartx->C2 |= UART_C2_RIE_MASK;
   \   00000370   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   00000374   0xF05A 0x0A20      ORRS     R10,R10,#0x20
   \   00000378   0xF886 0xA003      STRB     R10,[R6, #+3]
    198              //使能接收DMA
    199              uartx->C5 |= UART_C5_RDMAS_MASK;
   \   0000037C   0xF896 0xA00B      LDRB     R10,[R6, #+11]
   \   00000380   0xF05A 0x0A20      ORRS     R10,R10,#0x20
   \   00000384   0xF886 0xA00B      STRB     R10,[R6, #+11]
   \   00000388   0xE020             B.N      ??LPLD_UART_Init_27
    200            }//配置UART接收中断方式
    201            else if(uart_init_structure.UART_RxIntEnable == TRUE 
    202                  && rx_isr != NULL)
   \                     ??LPLD_UART_Init_26: (+1)
   \   0000038A   0xF89D 0xA02E      LDRB     R10,[SP, #+46]
   \   0000038E   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000392   0xD10F             BNE.N    ??LPLD_UART_Init_28
   \   00000394   0x46C2             MOV      R10,R8
   \   00000396   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000039A   0xD00B             BEQ.N    ??LPLD_UART_Init_28
    203            {
    204              //使能接收中断
    205              uartx->C2 |= UART_C2_RIE_MASK; 
   \   0000039C   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   000003A0   0xF05A 0x0A20      ORRS     R10,R10,#0x20
   \   000003A4   0xF886 0xA003      STRB     R10,[R6, #+3]
    206              UART_R_ISR[x] = rx_isr;
   \   000003A8   0x.... 0x....      LDR.W    R10,??DataTable10_38
   \   000003AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003AE   0xF84A 0x8024      STR      R8,[R10, R4, LSL #+2]
   \   000003B2   0xE00B             B.N      ??LPLD_UART_Init_27
    207            } 
    208            else
    209            {
    210              uartx->C2 &= ~(UART_C2_RIE_MASK); 
   \                     ??LPLD_UART_Init_28: (+1)
   \   000003B4   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   000003B8   0xF01A 0x0ADF      ANDS     R10,R10,#0xDF
   \   000003BC   0xF886 0xA003      STRB     R10,[R6, #+3]
    211              uartx->C5 &= ~(UART_C5_RDMAS_MASK);
   \   000003C0   0xF896 0xA00B      LDRB     R10,[R6, #+11]
   \   000003C4   0xF01A 0x0ADF      ANDS     R10,R10,#0xDF
   \   000003C8   0xF886 0xA00B      STRB     R10,[R6, #+11]
    212            }
    213            
    214            //配置UART接收DMA方式
    215            if( uart_init_structure.UART_TxDMAEnable == TRUE 
    216              && uart_init_structure.UART_TxIntEnable == TRUE )
   \                     ??LPLD_UART_Init_27: (+1)
   \   000003CC   0xF89D 0xA030      LDRB     R10,[SP, #+48]
   \   000003D0   0xF1BA 0x0F01      CMP      R10,#+1
   \   000003D4   0xD111             BNE.N    ??LPLD_UART_Init_29
   \   000003D6   0xF89D 0xA02F      LDRB     R10,[SP, #+47]
   \   000003DA   0xF1BA 0x0F01      CMP      R10,#+1
   \   000003DE   0xD10C             BNE.N    ??LPLD_UART_Init_29
    217            {
    218              //使能发送中断或者DMA
    219              uartx->C2 |= UART_C2_TIE_MASK;
   \   000003E0   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   000003E4   0xF05A 0x0A80      ORRS     R10,R10,#0x80
   \   000003E8   0xF886 0xA003      STRB     R10,[R6, #+3]
    220              //使能接收DMA
    221              uartx->C5 |= UART_C5_TDMAS_MASK;
   \   000003EC   0xF896 0xA00B      LDRB     R10,[R6, #+11]
   \   000003F0   0xF05A 0x0A80      ORRS     R10,R10,#0x80
   \   000003F4   0xF886 0xA00B      STRB     R10,[R6, #+11]
   \   000003F8   0xE020             B.N      ??LPLD_UART_Init_30
    222            }//配置UART发送中断方式
    223            else if(uart_init_structure.UART_TxIntEnable == TRUE 
    224                  && tx_isr != NULL)
   \                     ??LPLD_UART_Init_29: (+1)
   \   000003FA   0xF89D 0xA02F      LDRB     R10,[SP, #+47]
   \   000003FE   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000402   0xD10F             BNE.N    ??LPLD_UART_Init_31
   \   00000404   0x46CA             MOV      R10,R9
   \   00000406   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000040A   0xD00B             BEQ.N    ??LPLD_UART_Init_31
    225            {
    226              //使能发送中断
    227              uartx->C2 |= UART_C2_TIE_MASK; 
   \   0000040C   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   00000410   0xF05A 0x0A80      ORRS     R10,R10,#0x80
   \   00000414   0xF886 0xA003      STRB     R10,[R6, #+3]
    228              UART_T_ISR[x] = tx_isr;
   \   00000418   0x.... 0x....      LDR.W    R10,??DataTable10_39
   \   0000041C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000041E   0xF84A 0x9024      STR      R9,[R10, R4, LSL #+2]
   \   00000422   0xE00B             B.N      ??LPLD_UART_Init_30
    229            } 
    230            else
    231            {
    232              uartx->C2 &= ~(UART_C2_TIE_MASK);
   \                     ??LPLD_UART_Init_31: (+1)
   \   00000424   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   00000428   0xF01A 0x0A7F      ANDS     R10,R10,#0x7F
   \   0000042C   0xF886 0xA003      STRB     R10,[R6, #+3]
    233              uartx->C5 &= ~(UART_C5_TDMAS_MASK);
   \   00000430   0xF896 0xA00B      LDRB     R10,[R6, #+11]
   \   00000434   0xF01A 0x0A7F      ANDS     R10,R10,#0x7F
   \   00000438   0xF886 0xA00B      STRB     R10,[R6, #+11]
    234            }
    235            
    236            //配置UART FIFO 功能
    237            if( (uartx->C2 & UART_C2_RE_MASK) == 0 
    238               && uart_init_structure.RxFIFO.FIFO_Enable == TRUE)
   \                     ??LPLD_UART_Init_30: (+1)
   \   0000043C   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   00000440   0xEA5F 0x7A4A      LSLS     R10,R10,#+29
   \   00000444   0xD42F             BMI.N    ??LPLD_UART_Init_32
   \   00000446   0xF89D 0xA035      LDRB     R10,[SP, #+53]
   \   0000044A   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000044E   0xD12A             BNE.N    ??LPLD_UART_Init_32
    239            {
    240              //使能 UART 接收FIFO
    241              uartx->PFIFO |= UART_PFIFO_RXFE_MASK;
   \   00000450   0xF896 0xA010      LDRB     R10,[R6, #+16]
   \   00000454   0xF05A 0x0A08      ORRS     R10,R10,#0x8
   \   00000458   0xF886 0xA010      STRB     R10,[R6, #+16]
    242              
    243              if(uart_init_structure.RxFIFO.FIFO_BufFlow_IntEnable == TRUE)
   \   0000045C   0xF89D 0xA036      LDRB     R10,[SP, #+54]
   \   00000460   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000464   0xD105             BNE.N    ??LPLD_UART_Init_33
    244              {
    245                uartx->CFIFO |= UART_CFIFO_RXUFE_MASK;
   \   00000466   0xF896 0xA011      LDRB     R10,[R6, #+17]
   \   0000046A   0xF05A 0x0A01      ORRS     R10,R10,#0x1
   \   0000046E   0xF886 0xA011      STRB     R10,[R6, #+17]
    246              }
    247              
    248              //读取 FIFO buffer 深度
    249              len = (uint8)( uartx->PFIFO & UART_PFIFO_RXFIFOSIZE_MASK ) >> UART_PFIFO_RXFIFOSIZE_SHIFT;
   \                     ??LPLD_UART_Init_33: (+1)
   \   00000472   0xF896 0xA010      LDRB     R10,[R6, #+16]
   \   00000476   0xF01A 0x0A07      ANDS     R10,R10,#0x7
   \   0000047A   0x4655             MOV      R5,R10
    250              len = len > 0 ? 1 << (len + 1) : 1;
   \   0000047C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000047E   0x2D00             CMP      R5,#+0
   \   00000480   0xD005             BEQ.N    ??LPLD_UART_Init_34
   \   00000482   0xF05F 0x0A01      MOVS     R10,#+1
   \   00000486   0x1C6D             ADDS     R5,R5,#+1
   \   00000488   0xFA1A 0xF505      LSLS     R5,R10,R5
   \   0000048C   0xE000             B.N      ??LPLD_UART_Init_35
   \                     ??LPLD_UART_Init_34: (+1)
   \   0000048E   0x2501             MOVS     R5,#+1
    251              //如果Rx FIFO buffer中的DataWords 大于等于 UART_FIFOWaterMark
    252              //将产生中断或者DMA信号，取决C2_RIE和C5_RDMAS的状态
    253              if( uart_init_structure.RxFIFO.FIFO_WaterMark > len )
   \                     ??LPLD_UART_Init_35: (+1)
   \   00000490   0xF89D 0xA037      LDRB     R10,[SP, #+55]
   \   00000494   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000496   0x4555             CMP      R5,R10
   \   00000498   0xD201             BCS.N    ??LPLD_UART_Init_36
    254              {
    255                uartx->RWFIFO = UART_RWFIFO_RXWATER(len);
   \   0000049A   0x7575             STRB     R5,[R6, #+21]
   \   0000049C   0xE003             B.N      ??LPLD_UART_Init_32
    256              }
    257              else
    258              {
    259                uartx->RWFIFO = UART_RWFIFO_RXWATER(uart_init_structure.RxFIFO.FIFO_WaterMark);
   \                     ??LPLD_UART_Init_36: (+1)
   \   0000049E   0xF89D 0xA037      LDRB     R10,[SP, #+55]
   \   000004A2   0xF886 0xA015      STRB     R10,[R6, #+21]
    260              }  
    261            }
    262            
    263            if( (uartx->C2 & UART_C2_TE_MASK) == 0 
    264               && uart_init_structure.TxFIFO.FIFO_Enable == TRUE)
   \                     ??LPLD_UART_Init_32: (+1)
   \   000004A6   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   000004AA   0xEA5F 0x7A0A      LSLS     R10,R10,#+28
   \   000004AE   0xD42F             BMI.N    ??LPLD_UART_Init_37
   \   000004B0   0xF89D 0xA032      LDRB     R10,[SP, #+50]
   \   000004B4   0xF1BA 0x0F01      CMP      R10,#+1
   \   000004B8   0xD12A             BNE.N    ??LPLD_UART_Init_37
    265            {
    266              //使能 UART 发送FIFO
    267              uartx->PFIFO |= UART_PFIFO_TXFE_MASK;
   \   000004BA   0xF896 0xA010      LDRB     R10,[R6, #+16]
   \   000004BE   0xF05A 0x0A80      ORRS     R10,R10,#0x80
   \   000004C2   0xF886 0xA010      STRB     R10,[R6, #+16]
    268              
    269              if(uart_init_structure.TxFIFO.FIFO_BufFlow_IntEnable == TRUE)
   \   000004C6   0xF89D 0xA033      LDRB     R10,[SP, #+51]
   \   000004CA   0xF1BA 0x0F01      CMP      R10,#+1
   \   000004CE   0xD105             BNE.N    ??LPLD_UART_Init_38
    270              {
    271                uartx->CFIFO |= UART_CFIFO_TXOFE_MASK;
   \   000004D0   0xF896 0xA011      LDRB     R10,[R6, #+17]
   \   000004D4   0xF05A 0x0A02      ORRS     R10,R10,#0x2
   \   000004D8   0xF886 0xA011      STRB     R10,[R6, #+17]
    272              }
    273              
    274              //读取 FIFO buffer 深度
    275              len = (uint8)( uartx->PFIFO & UART_PFIFO_TXFIFOSIZE_MASK ) >> UART_PFIFO_TXFIFOSIZE_SHIFT;
   \                     ??LPLD_UART_Init_38: (+1)
   \   000004DC   0xF896 0xA010      LDRB     R10,[R6, #+16]
   \   000004E0   0xF3CA 0x1A02      UBFX     R10,R10,#+4,#+3
   \   000004E4   0x4655             MOV      R5,R10
    276              len = len > 0 ? 1 << (len + 1) : 1;
   \   000004E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004E8   0x2D00             CMP      R5,#+0
   \   000004EA   0xD005             BEQ.N    ??LPLD_UART_Init_39
   \   000004EC   0xF05F 0x0A01      MOVS     R10,#+1
   \   000004F0   0x1C6D             ADDS     R5,R5,#+1
   \   000004F2   0xFA1A 0xF505      LSLS     R5,R10,R5
   \   000004F6   0xE000             B.N      ??LPLD_UART_Init_40
   \                     ??LPLD_UART_Init_39: (+1)
   \   000004F8   0x2501             MOVS     R5,#+1
    277              //如果Tx FIFO buffer中的DataWords 小于等于 UART_FIFOWaterMark
    278              //将产生中断或者DMA信号，取决C2_TIE和C5_TDMAS的状态
    279              if( uart_init_structure.TxFIFO.FIFO_WaterMark > len )
   \                     ??LPLD_UART_Init_40: (+1)
   \   000004FA   0xF89D 0xA034      LDRB     R10,[SP, #+52]
   \   000004FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000500   0x4555             CMP      R5,R10
   \   00000502   0xD201             BCS.N    ??LPLD_UART_Init_41
    280              {
    281                uartx->TWFIFO = UART_TWFIFO_TXWATER(len);
   \   00000504   0x74F5             STRB     R5,[R6, #+19]
   \   00000506   0xE003             B.N      ??LPLD_UART_Init_37
    282              }
    283              else
    284              {
    285                uartx->TWFIFO = UART_TWFIFO_TXWATER(uart_init_structure.TxFIFO.FIFO_WaterMark);
   \                     ??LPLD_UART_Init_41: (+1)
   \   00000508   0xF89D 0xA034      LDRB     R10,[SP, #+52]
   \   0000050C   0xF886 0xA013      STRB     R10,[R6, #+19]
    286              }
    287            }
    288            //使能 UART 发送器
    289            uartx->C2 |= UART_C2_TE_MASK | UART_C2_RE_MASK;  
   \                     ??LPLD_UART_Init_37: (+1)
   \   00000510   0xF896 0xA003      LDRB     R10,[R6, #+3]
   \   00000514   0xF05A 0x0A0C      ORRS     R10,R10,#0xC
   \   00000518   0xF886 0xA003      STRB     R10,[R6, #+3]
    290          }
   \   0000051C   0xE8BD 0x0FF0      POP      {R4-R11}
   \   00000520   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    291          
    292          
    293          /*
    294           * LPLD_UART_RxFIFO_Flush
    295           * 清空UART Rx FIFO
    296           * 
    297           * 参数:
    298           *    uartx--UART模块号
    299           *      |__UART0          --UART0
    300           *      |__UART1          --UART1
    301           *      |__UART2          --UART2
    302           *      |__UART3          --UART3
    303           *      |__UART4          --UART4
    304           *      |__UART5          --UART5
    305           *
    306           */

   \                                 In section .text, align 2, keep-with-next
    307          void LPLD_UART_RxFIFO_Flush(UART_Type *uartx)
    308          {
    309            //清空接收 FIFO
    310            if( uartx->PFIFO & UART_PFIFO_RXFE_MASK )
   \                     LPLD_UART_RxFIFO_Flush: (+1)
   \   00000000   0x7C01             LDRB     R1,[R0, #+16]
   \   00000002   0x0709             LSLS     R1,R1,#+28
   \   00000004   0xD503             BPL.N    ??LPLD_UART_RxFIFO_Flush_0
    311            {
    312              uartx->CFIFO |= UART_CFIFO_RXFLUSH_MASK;
   \   00000006   0x7C41             LDRB     R1,[R0, #+17]
   \   00000008   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000000C   0x7441             STRB     R1,[R0, #+17]
    313            }
    314          }
   \                     ??LPLD_UART_RxFIFO_Flush_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    315          
    316          /*
    317           * LPLD_UART_TxFIFO_Flush
    318           * 清空UART Tx FIFO
    319           * 
    320           * 参数:
    321           *    uartx--UART模块号
    322           *      |__UART0          --UART0
    323           *      |__UART1          --UART1
    324           *      |__UART2          --UART2
    325           *      |__UART3          --UART3
    326           *      |__UART4          --UART4
    327           *      |__UART5          --UART5
    328           *
    329           */

   \                                 In section .text, align 2, keep-with-next
    330          void LPLD_UART_TxFIFO_Flush(UART_Type *uartx)
    331          {
    332            //清空发送 FIFO
    333            if( uartx->PFIFO & UART_PFIFO_TXFE_MASK )
   \                     LPLD_UART_TxFIFO_Flush: (+1)
   \   00000000   0x7C01             LDRB     R1,[R0, #+16]
   \   00000002   0x0609             LSLS     R1,R1,#+24
   \   00000004   0xD503             BPL.N    ??LPLD_UART_TxFIFO_Flush_0
    334            {
    335              uartx->CFIFO |= UART_CFIFO_TXFLUSH_MASK;
   \   00000006   0x7C41             LDRB     R1,[R0, #+17]
   \   00000008   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   0000000C   0x7441             STRB     R1,[R0, #+17]
    336            }
    337          }
   \                     ??LPLD_UART_TxFIFO_Flush_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    338          
    339          /*
    340           * LPLD_UART_GetChar
    341           * 串口查询方式读取一个字节
    342           * 
    343           * 参数:
    344           *    uartx--UART模块号
    345           *      |__UART0          --UART0
    346           *      |__UART1          --UART1
    347           *      |__UART2          --UART2
    348           *      |__UART3          --UART3
    349           *      |__UART4          --UART4
    350           *      |__UART5          --UART5
    351           *
    352           * 输出:
    353           *    串口接收的1个字节
    354           *
    355           */

   \                                 In section .text, align 2, keep-with-next
    356          int8 LPLD_UART_GetChar(UART_Type *uartx)
    357          {
    358            //等待数据接收
    359            while (!(uartx->S1 & UART_S1_RDRF_MASK));
   \                     LPLD_UART_GetChar: (+1)
   \                     ??LPLD_UART_GetChar_0: (+1)
   \   00000000   0x7901             LDRB     R1,[R0, #+4]
   \   00000002   0x0689             LSLS     R1,R1,#+26
   \   00000004   0xD5FC             BPL.N    ??LPLD_UART_GetChar_0
    360            
    361            //返回接收的1个字节数据
    362            return uartx->D;
   \   00000006   0xF990 0x0007      LDRSB    R0,[R0, #+7]
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
    363          }
    364          
    365          /********************************************************************/
    366          /*
    367           * LPLD_UART_GetChar_Present
    368           * 检查是否接收到字符
    369           * 
    370           * 参数:
    371           *    uartx--UART模块号
    372           *      |__UART0          --UART0
    373           *      |__UART1          --UART1
    374           *      |__UART2          --UART2
    375           *      |__UART3          --UART3
    376           *      |__UART4          --UART4
    377           *      |__UART5          --UART5
    378           *
    379           * 输出:
    380           *  0       没有接收到字符
    381           *  1       已经接收到字符
    382           */

   \                                 In section .text, align 2, keep-with-next
    383          int32 LPLD_UART_GetChar_Present(UART_Type *uartx)
    384          {
    385              return (uartx->S1 & UART_S1_RDRF_MASK);
   \                     LPLD_UART_GetChar_Present: (+1)
   \   00000000   0x7900             LDRB     R0,[R0, #+4]
   \   00000002   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   00000006   0x4770             BX       LR               ;; return
    386          }
    387          
    388          /*
    389           * LPLD_UART_PutChar
    390           * 串口查询方式发送一个字节
    391           * 
    392           * 参数:
    393           *    uartx--UART模块号
    394           *      |__UART0          --UART0
    395           *      |__UART1          --UART1
    396           *      |__UART2          --UART2
    397           *      |__UART3          --UART3
    398           *      |__UART4          --UART4
    399           *      |__UART5          --UART5
    400           *    ch--待发送的1个字节
    401           *
    402           * 输出:
    403           *    无
    404           *
    405           */

   \                                 In section .text, align 2, keep-with-next
    406          void LPLD_UART_PutChar(UART_Type *uartx, int8 ch)
    407          {
    408            //等待FIFO准备就绪
    409            while(!(uartx->S1 & UART_S1_TDRE_MASK));
   \                     LPLD_UART_PutChar: (+1)
   \                     ??LPLD_UART_PutChar_0: (+1)
   \   00000000   0x7902             LDRB     R2,[R0, #+4]
   \   00000002   0x0612             LSLS     R2,R2,#+24
   \   00000004   0xD5FC             BPL.N    ??LPLD_UART_PutChar_0
    410            
    411            //将要发送的1个字节发给UART数据寄存器
    412            uartx->D = (uint8)ch;
   \   00000006   0x71C1             STRB     R1,[R0, #+7]
    413          }
   \   00000008   0x4770             BX       LR               ;; return
    414          
    415          
    416          /*
    417           * LPLD_UART_PutCharArr
    418           * 串口查询方式发送字节型数组
    419           * 
    420           * 参数:
    421           *    uartx--UART模块号
    422           *      |__UART0          --UART0
    423           *      |__UART1          --UART1
    424           *      |__UART2          --UART2
    425           *      |__UART3          --UART3
    426           *      |__UART4          --UART4
    427           *      |__UART5          --UART5
    428           *    *ch--待发送的字节数组头地址
    429           *    len--字节数组长度
    430           *
    431           * 输出:
    432           *    无
    433           *
    434           */

   \                                 In section .text, align 2, keep-with-next
    435          void LPLD_UART_PutCharArr(UART_Type *uartx, int8 *ch, int32 len)
    436          {
   \                     LPLD_UART_PutCharArr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    437            while(len--)
   \                     ??LPLD_UART_PutCharArr_0: (+1)
   \   00000008   0x0030             MOVS     R0,R6
   \   0000000A   0x1E46             SUBS     R6,R0,#+1
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD006             BEQ.N    ??LPLD_UART_PutCharArr_1
    438            {
    439              LPLD_UART_PutChar(uartx, *(ch++));
   \   00000010   0xF995 0x1000      LDRSB    R1,[R5, #+0]
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       LPLD_UART_PutChar
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \   0000001C   0xE7F4             B.N      ??LPLD_UART_PutCharArr_0
    440            }
    441          }
   \                     ??LPLD_UART_PutCharArr_1: (+1)
   \   0000001E   0xBD70             POP      {R4-R6,PC}       ;; return
    442          
    443          /*
    444           * LPLD_UART_EnableIrq
    445           * 使能串口数据接收中断
    446           * 
    447           * 参数:
    448           *    uart_init_structure--UART初始化结构体，
    449           *                        具体定义见UART_InitTypeDef
    450           *
    451           * 输出:
    452           *    无
    453           *
    454           */

   \                                 In section .text, align 2, keep-with-next
    455          void LPLD_UART_EnableIrq(UART_InitTypeDef uart_init_structure)
    456          {
   \                     LPLD_UART_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    457            if(uart_init_structure.UART_Uartx == UART0)
   \   00000004   0x9802             LDR      R0,[SP, #+8]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable10_2  ;; 0x4006a000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD106             BNE.N    ??LPLD_UART_EnableIrq_0
    458            {
    459              enable_irq(UART0_RX_TX_IRQn);
   \   0000000E   0x202D             MOVS     R0,#+45
   \   00000010   0x.... 0x....      BL       NVIC_EnableIRQ
    460              enable_irq(UART0_ERR_IRQn);
   \   00000014   0x202E             MOVS     R0,#+46
   \   00000016   0x.... 0x....      BL       NVIC_EnableIRQ
   \   0000001A   0xE03A             B.N      ??LPLD_UART_EnableIrq_1
    461            }
    462            else if(uart_init_structure.UART_Uartx == UART1)
   \                     ??LPLD_UART_EnableIrq_0: (+1)
   \   0000001C   0x9802             LDR      R0,[SP, #+8]
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable10_11  ;; 0x4006b000
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD106             BNE.N    ??LPLD_UART_EnableIrq_2
    463            {
    464              enable_irq(UART1_RX_TX_IRQn);
   \   00000026   0x202F             MOVS     R0,#+47
   \   00000028   0x.... 0x....      BL       NVIC_EnableIRQ
    465              enable_irq(UART1_ERR_IRQn);
   \   0000002C   0x2030             MOVS     R0,#+48
   \   0000002E   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000032   0xE02E             B.N      ??LPLD_UART_EnableIrq_1
    466            }
    467            else if(uart_init_structure.UART_Uartx == UART2)
   \                     ??LPLD_UART_EnableIrq_2: (+1)
   \   00000034   0x9802             LDR      R0,[SP, #+8]
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable10_17  ;; 0x4006c000
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD106             BNE.N    ??LPLD_UART_EnableIrq_3
    468            {
    469              enable_irq(UART2_RX_TX_IRQn);
   \   0000003E   0x2031             MOVS     R0,#+49
   \   00000040   0x.... 0x....      BL       NVIC_EnableIRQ
    470              enable_irq(UART2_ERR_IRQn);
   \   00000044   0x2032             MOVS     R0,#+50
   \   00000046   0x.... 0x....      BL       NVIC_EnableIRQ
   \   0000004A   0xE022             B.N      ??LPLD_UART_EnableIrq_1
    471            }
    472            else if(uart_init_structure.UART_Uartx == UART3)
   \                     ??LPLD_UART_EnableIrq_3: (+1)
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable10_20  ;; 0x4006d000
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD106             BNE.N    ??LPLD_UART_EnableIrq_4
    473            {
    474              enable_irq(UART3_RX_TX_IRQn);
   \   00000056   0x2033             MOVS     R0,#+51
   \   00000058   0x.... 0x....      BL       NVIC_EnableIRQ
    475              enable_irq(UART3_ERR_IRQn);
   \   0000005C   0x2034             MOVS     R0,#+52
   \   0000005E   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000062   0xE016             B.N      ??LPLD_UART_EnableIrq_1
    476            }
    477            else if(uart_init_structure.UART_Uartx == UART4)
   \                     ??LPLD_UART_EnableIrq_4: (+1)
   \   00000064   0x9802             LDR      R0,[SP, #+8]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable10_27  ;; 0x400ea000
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD106             BNE.N    ??LPLD_UART_EnableIrq_5
    478            {
    479              enable_irq(UART4_RX_TX_IRQn);
   \   0000006E   0x2035             MOVS     R0,#+53
   \   00000070   0x.... 0x....      BL       NVIC_EnableIRQ
    480              enable_irq(UART4_ERR_IRQn);
   \   00000074   0x2036             MOVS     R0,#+54
   \   00000076   0x.... 0x....      BL       NVIC_EnableIRQ
   \   0000007A   0xE00A             B.N      ??LPLD_UART_EnableIrq_1
    481            }
    482            else if(uart_init_structure.UART_Uartx == UART5)
   \                     ??LPLD_UART_EnableIrq_5: (+1)
   \   0000007C   0x9802             LDR      R0,[SP, #+8]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable10_33  ;; 0x400eb000
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD105             BNE.N    ??LPLD_UART_EnableIrq_1
    483            {
    484              enable_irq(UART5_RX_TX_IRQn);
   \   00000086   0x2037             MOVS     R0,#+55
   \   00000088   0x.... 0x....      BL       NVIC_EnableIRQ
    485              enable_irq(UART5_ERR_IRQn);
   \   0000008C   0x2038             MOVS     R0,#+56
   \   0000008E   0x.... 0x....      BL       NVIC_EnableIRQ
    486            }
    487          }
   \                     ??LPLD_UART_EnableIrq_1: (+1)
   \   00000092   0xBC01             POP      {R0}
   \   00000094   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    488          
    489          /*
    490           * LPLD_UART_DisableIrq
    491           * 禁用串口数据接收中断
    492           * 
    493           * 参数:
    494           *    uart_init_structure--UART初始化结构体，
    495           *                        具体定义见UART_InitTypeDef
    496           *
    497           * 输出:
    498           *    无
    499           *
    500           */

   \                                 In section .text, align 2, keep-with-next
    501          void LPLD_UART_DisableIrq(UART_InitTypeDef uart_init_structure)
    502          {
   \                     LPLD_UART_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    503            //根据中断请求号使能相应中断
    504            if(uart_init_structure.UART_Uartx == UART0)
   \   00000004   0x9802             LDR      R0,[SP, #+8]
   \   00000006   0x....             LDR.N    R1,??DataTable10_2  ;; 0x4006a000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD106             BNE.N    ??LPLD_UART_DisableIrq_0
    505            {
    506              disable_irq(UART0_RX_TX_IRQn);
   \   0000000C   0x202D             MOVS     R0,#+45
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
    507              disable_irq(UART0_ERR_IRQn);
   \   00000012   0x202E             MOVS     R0,#+46
   \   00000014   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000018   0xE035             B.N      ??LPLD_UART_DisableIrq_1
    508            }
    509            else if(uart_init_structure.UART_Uartx == UART1)
   \                     ??LPLD_UART_DisableIrq_0: (+1)
   \   0000001A   0x9802             LDR      R0,[SP, #+8]
   \   0000001C   0x....             LDR.N    R1,??DataTable10_11  ;; 0x4006b000
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD106             BNE.N    ??LPLD_UART_DisableIrq_2
    510            {
    511              disable_irq(UART1_RX_TX_IRQn);
   \   00000022   0x202F             MOVS     R0,#+47
   \   00000024   0x.... 0x....      BL       NVIC_DisableIRQ
    512              disable_irq(UART1_ERR_IRQn);
   \   00000028   0x2030             MOVS     R0,#+48
   \   0000002A   0x.... 0x....      BL       NVIC_DisableIRQ
   \   0000002E   0xE02A             B.N      ??LPLD_UART_DisableIrq_1
    513            }
    514            else if(uart_init_structure.UART_Uartx == UART2)
   \                     ??LPLD_UART_DisableIrq_2: (+1)
   \   00000030   0x9802             LDR      R0,[SP, #+8]
   \   00000032   0x....             LDR.N    R1,??DataTable10_17  ;; 0x4006c000
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xD106             BNE.N    ??LPLD_UART_DisableIrq_3
    515            {
    516              disable_irq(UART2_RX_TX_IRQn);
   \   00000038   0x2031             MOVS     R0,#+49
   \   0000003A   0x.... 0x....      BL       NVIC_DisableIRQ
    517              disable_irq(UART2_ERR_IRQn);
   \   0000003E   0x2032             MOVS     R0,#+50
   \   00000040   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000044   0xE01F             B.N      ??LPLD_UART_DisableIrq_1
    518            }
    519            else if(uart_init_structure.UART_Uartx == UART3)
   \                     ??LPLD_UART_DisableIrq_3: (+1)
   \   00000046   0x9802             LDR      R0,[SP, #+8]
   \   00000048   0x....             LDR.N    R1,??DataTable10_20  ;; 0x4006d000
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD106             BNE.N    ??LPLD_UART_DisableIrq_4
    520            {
    521              disable_irq(UART3_RX_TX_IRQn);
   \   0000004E   0x2033             MOVS     R0,#+51
   \   00000050   0x.... 0x....      BL       NVIC_DisableIRQ
    522              disable_irq(UART3_ERR_IRQn);
   \   00000054   0x2034             MOVS     R0,#+52
   \   00000056   0x.... 0x....      BL       NVIC_DisableIRQ
   \   0000005A   0xE014             B.N      ??LPLD_UART_DisableIrq_1
    523            }
    524            else if(uart_init_structure.UART_Uartx == UART4)
   \                     ??LPLD_UART_DisableIrq_4: (+1)
   \   0000005C   0x9802             LDR      R0,[SP, #+8]
   \   0000005E   0x....             LDR.N    R1,??DataTable10_27  ;; 0x400ea000
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD106             BNE.N    ??LPLD_UART_DisableIrq_5
    525            {
    526              disable_irq(UART4_RX_TX_IRQn);
   \   00000064   0x2035             MOVS     R0,#+53
   \   00000066   0x.... 0x....      BL       NVIC_DisableIRQ
    527              disable_irq(UART4_ERR_IRQn);
   \   0000006A   0x2036             MOVS     R0,#+54
   \   0000006C   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000070   0xE009             B.N      ??LPLD_UART_DisableIrq_1
    528            }
    529            else if(uart_init_structure.UART_Uartx == UART5)
   \                     ??LPLD_UART_DisableIrq_5: (+1)
   \   00000072   0x9802             LDR      R0,[SP, #+8]
   \   00000074   0x....             LDR.N    R1,??DataTable10_33  ;; 0x400eb000
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD105             BNE.N    ??LPLD_UART_DisableIrq_1
    530            {
    531              disable_irq(UART5_RX_TX_IRQn);
   \   0000007A   0x2037             MOVS     R0,#+55
   \   0000007C   0x.... 0x....      BL       NVIC_DisableIRQ
    532              disable_irq(UART5_ERR_IRQn);
   \   00000080   0x2038             MOVS     R0,#+56
   \   00000082   0x.... 0x....      BL       NVIC_DisableIRQ
    533            }
    534          }
   \                     ??LPLD_UART_DisableIrq_1: (+1)
   \   00000086   0xBC01             POP      {R0}
   \   00000088   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    535          
    536          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    537          void UART0_IRQHandler(void)
    538          {
   \                     UART0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    539          #if (UCOS_II > 0u)
    540            OS_CPU_SR  cpu_sr = 0u;
    541            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    542            OSIntEnter();
    543            OS_EXIT_CRITICAL();
    544          #endif
    545            //判断Rx FIFO是否 Under flow
    546            if( UART0->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable10_40  ;; 0x4006a012
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??UART0_IRQHandler_0
    547            {
    548              UART0->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_40  ;; 0x4006a012
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_40  ;; 0x4006a012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    549            }
    550            //判断Tx FIFO是否 Over flow
    551            if( UART0->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART0_IRQHandler_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_40  ;; 0x4006a012
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD505             BPL.N    ??UART0_IRQHandler_1
    552            {
    553              UART0->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_40  ;; 0x4006a012
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000026   0x....             LDR.N    R1,??DataTable10_40  ;; 0x4006a012
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    554            }
    555            //进入接收中断函数
    556            if((UART0->S1 & UART_S1_RDRF_MASK) && (UART0->C2 & UART_C2_RIE_MASK))
   \                     ??UART0_IRQHandler_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable10_41  ;; 0x4006a004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0680             LSLS     R0,R0,#+26
   \   00000030   0xD506             BPL.N    ??UART0_IRQHandler_2
   \   00000032   0x....             LDR.N    R0,??DataTable10_42  ;; 0x4006a003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD502             BPL.N    ??UART0_IRQHandler_2
    557            {
    558              UART_R_ISR[0]();
   \   0000003A   0x....             LDR.N    R0,??DataTable10_38
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x4780             BLX      R0
    559            }
    560            //进入发送中断函数
    561            if((UART0->S1 & UART_S1_TDRE_MASK) && (UART0->C2 & UART_C2_TIE_MASK))
   \                     ??UART0_IRQHandler_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_41  ;; 0x4006a004
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0xD506             BPL.N    ??UART0_IRQHandler_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_42  ;; 0x4006a003
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD502             BPL.N    ??UART0_IRQHandler_3
    562            {
    563              UART_T_ISR[0]();
   \   00000050   0x....             LDR.N    R0,??DataTable10_39
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x4780             BLX      R0
    564            }
    565            
    566          #if (UCOS_II > 0u)
    567            OSIntExit();          //告知系统此时即将离开中断服务子函数
    568          #endif
    569          }
   \                     ??UART0_IRQHandler_3: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    570          
    571          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    572          void UART1_IRQHandler(void)
    573          {
   \                     UART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    574          #if (UCOS_II > 0u)
    575            OS_CPU_SR  cpu_sr = 0u;
    576            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    577            OSIntEnter();
    578            OS_EXIT_CRITICAL();
    579          #endif
    580            //判断Rx FIFO是否 Under flow
    581            if( UART1->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable10_43  ;; 0x4006b012
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??UART1_IRQHandler_0
    582            {
    583              UART1->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_43  ;; 0x4006b012
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_43  ;; 0x4006b012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    584            }
    585            //判断Tx FIFO是否 Over flow
    586            if( UART1->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART1_IRQHandler_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_43  ;; 0x4006b012
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD505             BPL.N    ??UART1_IRQHandler_1
    587            {
    588              UART1->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_43  ;; 0x4006b012
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000026   0x....             LDR.N    R1,??DataTable10_43  ;; 0x4006b012
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    589            }  
    590            //进入接收中断函数
    591            if((UART1->S1 & UART_S1_RDRF_MASK) && (UART1->C2 & UART_C2_RIE_MASK))
   \                     ??UART1_IRQHandler_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable10_44  ;; 0x4006b004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0680             LSLS     R0,R0,#+26
   \   00000030   0xD506             BPL.N    ??UART1_IRQHandler_2
   \   00000032   0x....             LDR.N    R0,??DataTable10_45  ;; 0x4006b003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD502             BPL.N    ??UART1_IRQHandler_2
    592            {
    593              UART_R_ISR[1]();
   \   0000003A   0x....             LDR.N    R0,??DataTable10_38
   \   0000003C   0x6840             LDR      R0,[R0, #+4]
   \   0000003E   0x4780             BLX      R0
    594            }
    595            //进入发送中断函数
    596            if((UART1->S1 & UART_S1_TDRE_MASK) && (UART1->C2 & UART_C2_TIE_MASK))
   \                     ??UART1_IRQHandler_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_44  ;; 0x4006b004
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0xD506             BPL.N    ??UART1_IRQHandler_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_45  ;; 0x4006b003
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD502             BPL.N    ??UART1_IRQHandler_3
    597            {
    598              UART_T_ISR[1]();
   \   00000050   0x....             LDR.N    R0,??DataTable10_39
   \   00000052   0x6840             LDR      R0,[R0, #+4]
   \   00000054   0x4780             BLX      R0
    599            }
    600            
    601          #if (UCOS_II > 0u)
    602            OSIntExit();          //告知系统此时即将离开中断服务子函数
    603          #endif
    604          }
   \                     ??UART1_IRQHandler_3: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    605          
    606          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    607          void UART2_IRQHandler(void)
    608          {
   \                     UART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    609          #if (UCOS_II > 0u)
    610            OS_CPU_SR  cpu_sr = 0u;
    611            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    612            OSIntEnter();
    613            OS_EXIT_CRITICAL();
    614          #endif
    615            //判断Rx FIFO是否 Under flow
    616            if( UART2->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable10_46  ;; 0x4006c012
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??UART2_IRQHandler_0
    617            {
    618              UART2->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_46  ;; 0x4006c012
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_46  ;; 0x4006c012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    619            }
    620            //判断Tx FIFO是否 Over flow
    621            if( UART2->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART2_IRQHandler_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_46  ;; 0x4006c012
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD505             BPL.N    ??UART2_IRQHandler_1
    622            {
    623              UART2->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_46  ;; 0x4006c012
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000026   0x....             LDR.N    R1,??DataTable10_46  ;; 0x4006c012
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    624            }    
    625            //进入接收中断函数
    626            if((UART2->S1 & UART_S1_RDRF_MASK) && (UART2->C2 & UART_C2_RIE_MASK))
   \                     ??UART2_IRQHandler_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable10_47  ;; 0x4006c004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0680             LSLS     R0,R0,#+26
   \   00000030   0xD506             BPL.N    ??UART2_IRQHandler_2
   \   00000032   0x....             LDR.N    R0,??DataTable10_48  ;; 0x4006c003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD502             BPL.N    ??UART2_IRQHandler_2
    627            {
    628              UART_R_ISR[2]();
   \   0000003A   0x....             LDR.N    R0,??DataTable10_38
   \   0000003C   0x6880             LDR      R0,[R0, #+8]
   \   0000003E   0x4780             BLX      R0
    629            }
    630            //进入发送中断函数
    631            if((UART2->S1 & UART_S1_TDRE_MASK) && (UART2->C2 & UART_C2_TIE_MASK))
   \                     ??UART2_IRQHandler_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_47  ;; 0x4006c004
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0xD506             BPL.N    ??UART2_IRQHandler_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_48  ;; 0x4006c003
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD502             BPL.N    ??UART2_IRQHandler_3
    632            {
    633              UART_T_ISR[2]();
   \   00000050   0x....             LDR.N    R0,??DataTable10_39
   \   00000052   0x6880             LDR      R0,[R0, #+8]
   \   00000054   0x4780             BLX      R0
    634            }
    635            
    636          #if (UCOS_II > 0u)
    637            OSIntExit();          //告知系统此时即将离开中断服务子函数
    638          #endif
    639          }
   \                     ??UART2_IRQHandler_3: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    640          
    641          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    642          void UART3_IRQHandler(void)
    643          {
   \                     UART3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    644          #if (UCOS_II > 0u)
    645            OS_CPU_SR  cpu_sr = 0u;
    646            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    647            OSIntEnter();
    648            OS_EXIT_CRITICAL();
    649          #endif
    650            //判断Rx FIFO是否 Under flow
    651            if( UART3->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable10_49  ;; 0x4006d012
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??UART3_IRQHandler_0
    652            {
    653              UART3->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_49  ;; 0x4006d012
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_49  ;; 0x4006d012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    654            }
    655            //判断Tx FIFO是否 Over flow
    656            if( UART3->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART3_IRQHandler_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_49  ;; 0x4006d012
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD505             BPL.N    ??UART3_IRQHandler_1
    657            {
    658              UART3->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_49  ;; 0x4006d012
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000026   0x....             LDR.N    R1,??DataTable10_49  ;; 0x4006d012
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    659            }   
    660            //进入接收中断函数
    661            if((UART3->S1 & UART_S1_RDRF_MASK) && (UART3->C2 & UART_C2_RIE_MASK))
   \                     ??UART3_IRQHandler_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable10_50  ;; 0x4006d004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0680             LSLS     R0,R0,#+26
   \   00000030   0xD506             BPL.N    ??UART3_IRQHandler_2
   \   00000032   0x....             LDR.N    R0,??DataTable10_51  ;; 0x4006d003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD502             BPL.N    ??UART3_IRQHandler_2
    662            {
    663              UART_R_ISR[3]();
   \   0000003A   0x....             LDR.N    R0,??DataTable10_38
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x4780             BLX      R0
    664            }
    665            //进入发送中断函数
    666            if((UART3->S1 & UART_S1_TDRE_MASK) && (UART3->C2 & UART_C2_TIE_MASK))
   \                     ??UART3_IRQHandler_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_50  ;; 0x4006d004
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0xD506             BPL.N    ??UART3_IRQHandler_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_51  ;; 0x4006d003
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD502             BPL.N    ??UART3_IRQHandler_3
    667            {
    668              UART_T_ISR[3]();
   \   00000050   0x....             LDR.N    R0,??DataTable10_39
   \   00000052   0x68C0             LDR      R0,[R0, #+12]
   \   00000054   0x4780             BLX      R0
    669            }
    670            
    671          #if (UCOS_II > 0u)
    672            OSIntExit();          //告知系统此时即将离开中断服务子函数
    673          #endif
    674          }
   \                     ??UART3_IRQHandler_3: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    675          
    676          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    677          void UART4_IRQHandler(void)
    678          {
   \                     UART4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    679          #if (UCOS_II > 0u)
    680            OS_CPU_SR  cpu_sr = 0u;
    681            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    682            OSIntEnter();
    683            OS_EXIT_CRITICAL();
    684          #endif
    685            //判断Rx FIFO是否 Under flow
    686            if( UART4->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable10_52  ;; 0x400ea012
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??UART4_IRQHandler_0
    687            {
    688              UART4->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_52  ;; 0x400ea012
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_52  ;; 0x400ea012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    689            }
    690            //判断Tx FIFO是否 Over flow
    691            if( UART4->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART4_IRQHandler_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_52  ;; 0x400ea012
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD505             BPL.N    ??UART4_IRQHandler_1
    692            {
    693              UART4->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_52  ;; 0x400ea012
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000026   0x....             LDR.N    R1,??DataTable10_52  ;; 0x400ea012
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    694            }  
    695            //进入接收中断函数
    696            if((UART4->S1 & UART_S1_RDRF_MASK) && (UART4->C2 & UART_C2_RIE_MASK))
   \                     ??UART4_IRQHandler_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable10_53  ;; 0x400ea004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0680             LSLS     R0,R0,#+26
   \   00000030   0xD506             BPL.N    ??UART4_IRQHandler_2
   \   00000032   0x....             LDR.N    R0,??DataTable10_54  ;; 0x400ea003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD502             BPL.N    ??UART4_IRQHandler_2
    697            {
    698              UART_R_ISR[4]();
   \   0000003A   0x....             LDR.N    R0,??DataTable10_38
   \   0000003C   0x6900             LDR      R0,[R0, #+16]
   \   0000003E   0x4780             BLX      R0
    699            }
    700            //进入发送中断函数
    701            if((UART4->S1 & UART_S1_TDRE_MASK) && (UART4->C2 & UART_C2_TIE_MASK))
   \                     ??UART4_IRQHandler_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_53  ;; 0x400ea004
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0xD506             BPL.N    ??UART4_IRQHandler_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_54  ;; 0x400ea003
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD502             BPL.N    ??UART4_IRQHandler_3
    702            {
    703              UART_T_ISR[4]();
   \   00000050   0x....             LDR.N    R0,??DataTable10_39
   \   00000052   0x6900             LDR      R0,[R0, #+16]
   \   00000054   0x4780             BLX      R0
    704            }
    705            
    706          #if (UCOS_II > 0u)
    707            OSIntExit();          //告知系统此时即将离开中断服务子函数
    708          #endif
    709          }
   \                     ??UART4_IRQHandler_3: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    710          
    711          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    712          void UART5_IRQHandler(void)
    713          {
   \                     UART5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    714          #if (UCOS_II > 0u)
    715            OS_CPU_SR  cpu_sr = 0u;
    716            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    717            OSIntEnter();
    718            OS_EXIT_CRITICAL();
    719          #endif
    720            //判断Rx FIFO是否 Under flow
    721            if( UART5->SFIFO & UART_SFIFO_RXUF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable10_55  ;; 0x400eb012
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD505             BPL.N    ??UART5_IRQHandler_0
    722            {
    723              UART5->SFIFO |= UART_SFIFO_RXUF_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_55  ;; 0x400eb012
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_55  ;; 0x400eb012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    724            }
    725            //判断Tx FIFO是否 Over flow
    726            if( UART5->SFIFO & UART_SFIFO_TXOF_MASK)
   \                     ??UART5_IRQHandler_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_55  ;; 0x400eb012
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD505             BPL.N    ??UART5_IRQHandler_1
    727            {
    728              UART5->SFIFO |= UART_SFIFO_TXOF_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_55  ;; 0x400eb012
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000026   0x....             LDR.N    R1,??DataTable10_55  ;; 0x400eb012
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    729            }   
    730            //进入接收中断函数
    731            if((UART5->S1 & UART_S1_RDRF_MASK) && (UART5->C2 & UART_C2_RIE_MASK))
   \                     ??UART5_IRQHandler_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable10_56  ;; 0x400eb004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0680             LSLS     R0,R0,#+26
   \   00000030   0xD506             BPL.N    ??UART5_IRQHandler_2
   \   00000032   0x....             LDR.N    R0,??DataTable10_57  ;; 0x400eb003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD502             BPL.N    ??UART5_IRQHandler_2
    732            {
    733              UART_R_ISR[5]();
   \   0000003A   0x....             LDR.N    R0,??DataTable10_38
   \   0000003C   0x6940             LDR      R0,[R0, #+20]
   \   0000003E   0x4780             BLX      R0
    734            }
    735            //进入发送中断函数
    736            if((UART5->S1 & UART_S1_TDRE_MASK) && (UART5->C2 & UART_C2_TIE_MASK))
   \                     ??UART5_IRQHandler_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_56  ;; 0x400eb004
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0xD506             BPL.N    ??UART5_IRQHandler_3
   \   00000048   0x....             LDR.N    R0,??DataTable10_57  ;; 0x400eb003
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD502             BPL.N    ??UART5_IRQHandler_3
    737            {
    738              UART_T_ISR[5]();
   \   00000050   0x....             LDR.N    R0,??DataTable10_39
   \   00000052   0x6940             LDR      R0,[R0, #+20]
   \   00000054   0x4780             BLX      R0
    739            }
    740            
    741          #if (UCOS_II > 0u)
    742            OSIntExit();          //告知系统此时即将离开中断服务子函数
    743          #endif
    744          }
   \                     ??UART5_IRQHandler_3: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    745          

   \                                 In section .text, align 2, keep-with-next
    746          void UART0_ERR_IRQHandler(void)
    747          {
    748          }
   \                     UART0_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    749          

   \                                 In section .text, align 2, keep-with-next
    750          void UART1_ERR_IRQHandler(void)
    751          {
    752          }
   \                     UART1_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    753          

   \                                 In section .text, align 2, keep-with-next
    754          void UART2_ERR_IRQHandler(void)
    755          {
    756          }
   \                     UART2_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    757          

   \                                 In section .text, align 2, keep-with-next
    758          void UART3_ERR_IRQHandler(void)
    759          {
    760          }
   \                     UART3_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    761          

   \                                 In section .text, align 2, keep-with-next
    762          void UART4_ERR_IRQHandler(void)
    763          {
    764          }
   \                     UART4_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    765          

   \                                 In section .text, align 2, keep-with-next
    766          void UART5_ERR_IRQHandler(void)
    767          {
    768          }
   \                     UART5_ERR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     g_core_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x40049008         DC32     0x40049008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x4004B044         DC32     0x4004b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x4004B040         DC32     0x4004b040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x40048028         DC32     0x40048028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x4004D060         DC32     0x4004d060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x4004B03C         DC32     0x4004b03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_31:
   \   00000000   0x4004D064         DC32     0x4004d064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_32:
   \   00000000   0x4004B038         DC32     0x4004b038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_33:
   \   00000000   0x400EB000         DC32     0x400eb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_34:
   \   00000000   0x4004C024         DC32     0x4004c024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_35:
   \   00000000   0x4004D020         DC32     0x4004d020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_36:
   \   00000000   0x4004C020         DC32     0x4004c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_37:
   \   00000000   0x4004D024         DC32     0x4004d024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_38:
   \   00000000   0x........         DC32     UART_R_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_39:
   \   00000000   0x........         DC32     UART_T_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_40:
   \   00000000   0x4006A012         DC32     0x4006a012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_41:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_42:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_43:
   \   00000000   0x4006B012         DC32     0x4006b012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_44:
   \   00000000   0x4006B004         DC32     0x4006b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_45:
   \   00000000   0x4006B003         DC32     0x4006b003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_46:
   \   00000000   0x4006C012         DC32     0x4006c012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_47:
   \   00000000   0x4006C004         DC32     0x4006c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_48:
   \   00000000   0x4006C003         DC32     0x4006c003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_49:
   \   00000000   0x4006D012         DC32     0x4006d012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_50:
   \   00000000   0x4006D004         DC32     0x4006d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_51:
   \   00000000   0x4006D003         DC32     0x4006d003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_52:
   \   00000000   0x400EA012         DC32     0x400ea012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_53:
   \   00000000   0x400EA004         DC32     0x400ea004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_54:
   \   00000000   0x400EA003         DC32     0x400ea003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_55:
   \   00000000   0x400EB012         DC32     0x400eb012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_56:
   \   00000000   0x400EB004         DC32     0x400eb004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_57:
   \   00000000   0x400EB003         DC32     0x400eb003
    769          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_UART_DisableIrq
        24   -> NVIC_DisableIRQ
      24   LPLD_UART_EnableIrq
        24   -> NVIC_EnableIRQ
       0   LPLD_UART_GetChar
       0   LPLD_UART_GetChar_Present
      52   LPLD_UART_Init
       0   LPLD_UART_PutChar
      16   LPLD_UART_PutCharArr
        16   -> LPLD_UART_PutChar
       0   LPLD_UART_RxFIFO_Flush
       0   LPLD_UART_TxFIFO_Flush
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       0   UART0_ERR_IRQHandler
       8   UART0_IRQHandler
         8   -- Indirect call
       0   UART1_ERR_IRQHandler
       8   UART1_IRQHandler
         8   -- Indirect call
       0   UART2_ERR_IRQHandler
       8   UART2_IRQHandler
         8   -- Indirect call
       0   UART3_ERR_IRQHandler
       8   UART3_IRQHandler
         8   -- Indirect call
       0   UART4_ERR_IRQHandler
       8   UART4_IRQHandler
         8   -- Indirect call
       0   UART5_ERR_IRQHandler
       8   UART5_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_31
       4  ??DataTable10_32
       4  ??DataTable10_33
       4  ??DataTable10_34
       4  ??DataTable10_35
       4  ??DataTable10_36
       4  ??DataTable10_37
       4  ??DataTable10_38
       4  ??DataTable10_39
       4  ??DataTable10_4
       4  ??DataTable10_40
       4  ??DataTable10_41
       4  ??DataTable10_42
       4  ??DataTable10_43
       4  ??DataTable10_44
       4  ??DataTable10_45
       4  ??DataTable10_46
       4  ??DataTable10_47
       4  ??DataTable10_48
       4  ??DataTable10_49
       4  ??DataTable10_5
       4  ??DataTable10_50
       4  ??DataTable10_51
       4  ??DataTable10_52
       4  ??DataTable10_53
       4  ??DataTable10_54
       4  ??DataTable10_55
       4  ??DataTable10_56
       4  ??DataTable10_57
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
     140  LPLD_UART_DisableIrq
     152  LPLD_UART_EnableIrq
      14  LPLD_UART_GetChar
       8  LPLD_UART_GetChar_Present
    1316  LPLD_UART_Init
      10  LPLD_UART_PutChar
      32  LPLD_UART_PutCharArr
      16  LPLD_UART_RxFIFO_Flush
      16  LPLD_UART_TxFIFO_Flush
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
       2  UART0_ERR_IRQHandler
      88  UART0_IRQHandler
       2  UART1_ERR_IRQHandler
      88  UART1_IRQHandler
       2  UART2_ERR_IRQHandler
      88  UART2_IRQHandler
       2  UART3_ERR_IRQHandler
      88  UART3_IRQHandler
       2  UART4_ERR_IRQHandler
      88  UART4_IRQHandler
       2  UART5_ERR_IRQHandler
      88  UART5_IRQHandler
      24  UART_R_ISR
      24  UART_T_ISR

 
    48 bytes in section .bss
 2 520 bytes in section .text
 
 2 520 bytes of CODE memory
    48 bytes of DATA memory

Errors: none
Warnings: none
