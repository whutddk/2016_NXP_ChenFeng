///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       02/Jan/2016  16:00:27
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\app\ITAC\OLED.c
//    Command line =  
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\app\ITAC\OLED.c"
//        -D LPLD_K60 -D USE_K60DZ10 -lCN
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\"
//        -lB
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\"
//        -o
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\Obj\"
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench
//        7.0\arm\INC\c\DLib_Config_Normal.h" -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\MAIN\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\BSP\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\CTL\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\sensor\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\ITAC\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\CPU\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\common\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\HW\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\DEV\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\FUNC\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Ports\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Source\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\option\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\common\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\driver\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\descriptor\"
//        -I
//        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\class\"
//        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
//    List file    =  
//        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN LPLD_GPIO_Output_b
        EXTERN __aeabi_cdcmple
        EXTERN __aeabi_cdrcmple
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_d2uiz
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_i2d
        EXTERN __aeabi_memcpy4
        EXTERN __aeabi_ui2d

        PUBLIC Dly_ms
        PUBLIC Draw_BMP
        PUBLIC Draw_Landzo
        PUBLIC Draw_LibLogo
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LANDZO_LOGO
        PUBLIC LIBLOGO60x58
        PUBLIC OLEDIO_init
        PUBLIC OLEDIO_inittype
        PUBLIC OLED_CLS
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Fill
        PUBLIC OLED_Init
        PUBLIC OLED_P14x16Str
        PUBLIC OLED_P6x8Char
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P8x16Char
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print
        PUBLIC OLED_PrintFloat
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Rectangle
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC lanzhou96x64
        PUBLIC mushroom
        PUBLIC sky1
        PUBLIC sky2
        PUBLIC sky3

// G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\app\ITAC\OLED.c
//    1 #include "common.h"
//    2 #include "include.h"
//    3 
//    4 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//    5 GPIO_InitTypeDef OLEDIO_inittype;
OLEDIO_inittype:
        DS8 20

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//    6 void OLEDIO_init()
//    7 {
OLEDIO_init:
        PUSH     {R7,LR}
//    8   
//    9   OLEDIO_inittype.GPIO_PTx = PTE;
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        LDR.W    R1,??DataTable11_1
        STR      R0,[R1, #+0]
//   10   OLEDIO_inittype.GPIO_Pins = GPIO_Pin24 | GPIO_Pin25 | GPIO_Pin26| GPIO_Pin27 | GPIO_Pin28;
        MOVS     R0,#+520093696
        LDR.W    R1,??DataTable11_1
        STR      R0,[R1, #+4]
//   11   OLEDIO_inittype.GPIO_PinControl = INPUT_PULL_DIS;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable11_1
        STR      R0,[R1, #+8]
//   12   OLEDIO_inittype.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable11_1
        STRB     R0,[R1, #+12]
//   13   OLEDIO_inittype.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable11_1
        STRB     R0,[R1, #+13]
//   14   
//   15   LPLD_GPIO_Init(OLEDIO_inittype);
        LDR.W    R1,??DataTable11_1
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   16   
//   17 
//   18 }
        POP      {R0,PC}          ;; return
//   19 
//   20 
//   21 /*4线SPI使用说明：
//   22 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   23 VCC 供内部逻辑电压 1.8~6V
//   24 GND 地
//   25 
//   26 BS0 低电平
//   27 BS1 低电平
//   28 BS2 低电平
//   29 
//   30 CS  片选管脚
//   31 DC  命令数据选择管脚
//   32 RES 模块复位管脚
//   33 D0（SCLK） ，时钟脚，由MCU控制
//   34 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   35 
//   36 D2 悬空
//   37 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   38 RD  低电平 ，也可悬空，但最好设为低电平
//   39 RW  低电平 ，也可悬空，但最好设为低电平
//   40 RD  低电平 ，也可悬空，但最好设为低电平
//   41 */
//   42 
//   43 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   44 uint8 mushroom[] = 
mushroom:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 96, 112
        DC8 48, 56, 56, 24, 28, 12, 12, 12, 12, 4, 4, 4, 4, 12, 12, 12, 8, 24
        DC8 56, 48, 112, 96, 192, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 112
        DC8 28, 6, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 7, 15, 14, 24, 48, 112, 224, 192
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224
        DC8 48, 24, 14, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 1, 1, 3, 3, 3, 2, 6, 4, 12, 24, 240, 192, 240, 252, 254, 15
        DC8 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 128, 192, 192, 224, 224, 224, 224, 240, 240, 112
        DC8 112, 120, 60, 60, 60, 28, 30, 14, 30, 56, 248, 248, 248, 126, 126
        DC8 158, 22, 38, 238, 254, 254, 254, 255, 127, 255, 29, 113, 192, 128
        DC8 0, 0, 0, 0, 0, 224, 248, 252, 14, 15, 14, 14, 14, 12, 12, 12, 12
        DC8 14, 14, 14, 6, 6, 118, 255, 255, 255, 115, 3, 3, 3, 1, 1, 1, 64
        DC8 192, 128, 128, 128, 192, 128, 96, 0, 0, 30, 31, 31, 31, 14, 3, 7
        DC8 14, 30, 62, 127, 207, 143, 7, 7, 3, 1, 0, 63, 0, 0, 0, 1, 1, 3, 3
        DC8 2, 6, 255, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 3, 254, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 7, 31, 120, 224, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 128, 192, 96, 56, 31, 7, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 12, 24, 24, 48, 32, 96, 96
        DC8 64, 192, 192, 192, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
        DC8 128, 128, 192, 192, 192, 64, 64, 96, 96, 32, 32, 48, 16, 24, 8, 12
        DC8 4, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   45 {
//   46   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
//   47   0xC0,0xE0,0x60,0x70,0x30,0x38,0x38,0x18,0x1C,0x0C,0x0C,0x0C,0x0C,0x04,0x04,0x04,
//   48   0x04,0x0C,0x0C,0x0C,0x08,0x18,0x38,0x30,0x70,0x60,0xC0,0xC0,0x80,0x00,0x00,0x00,
//   49   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   50   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x70,0x1C,0x06,
//   51   0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   52   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,
//   53   0x0F,0x0E,0x18,0x30,0x70,0xE0,0xC0,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//   54   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0x30,0x18,0x0E,0x03,0x01,0x00,
//   55   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   56   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   57   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x03,0x03,0x02,0x06,
//   58   0x04,0x0C,0x18,0xF0,0xC0,0xF0,0xFC,0xFE,0x0F,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
//   59   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   60   0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xE0,0xE0,0xE0,0xE0,0xF0,0xF0,0x70,0x70,
//   61   0x78,0x3C,0x3C,0x3C,0x1C,0x1E,0x0E,0x1E,0x38,0xF8,0xF8,0xF8,0x7E,0x7E,0x9E,0x16,
//   62   0x26,0xEE,0xFE,0xFE,0xFE,0xFF,0x7F,0xFF,0x1D,0x71,0xC0,0x80,0x00,0x00,0x00,0x00,
//   63   0x00,0xE0,0xF8,0xFC,0x0E,0x0F,0x0E,0x0E,0x0E,0x0C,0x0C,0x0C,0x0C,0x0E,0x0E,0x0E,
//   64   0x06,0x06,0x76,0xFF,0xFF,0xFF,0x73,0x03,0x03,0x03,0x01,0x01,0x01,0x40,0xC0,0x80,
//   65   0x80,0x80,0xC0,0x80,0x60,0x00,0x00,0x1E,0x1F,0x1F,0x1F,0x0E,0x03,0x07,0x0E,0x1E,
//   66   0x3E,0x7F,0xCF,0x8F,0x07,0x07,0x03,0x01,0x00,0x3F,0x00,0x00,0x00,0x01,0x01,0x03,
//   67   0x03,0x02,0x06,0xFF,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   68   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   69   0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   70   0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   71   0x00,0x00,0x00,0x00,0x00,0x07,0x1F,0x78,0xE0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//   72   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   73   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   74   0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x38,0x1F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
//   75   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x18,
//   76   0x18,0x30,0x20,0x60,0x60,0x40,0xC0,0xC0,0xC0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//   77   0x80,0x80,0x80,0x80,0x80,0xC0,0xC0,0xC0,0x40,0x40,0x60,0x60,0x20,0x20,0x30,0x10,
//   78   0x18,0x08,0x0C,0x04,0x06,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//   79 };
//   80 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   81 uint8 sky1[] =
sky1:
        DATA
        DC8 64, 64, 66, 66, 66, 66, 66, 254, 66, 66, 66, 66, 66, 64, 64, 0, 128
        DC8 128, 64, 32, 16, 12, 3, 0, 3, 12, 16, 32, 64, 128, 128, 0
//   82 {
//   83   0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x40,0x40,0x00,
//   84   0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00/*"?",0*/
//   85 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   86 uint8 sky2[] =
sky2:
        DATA
        DC8 0, 254, 34, 90, 134, 0, 32, 34, 34, 34, 226, 34, 34, 34, 32, 0, 0
        DC8 255, 4, 8, 7, 16, 12, 3, 64, 128, 127, 0, 1, 6, 24, 0
//   87 {
//   88   0x00,0xFE,0x22,0x5A,0x86,0x00,0x20,0x22,0x22,0x22,0xE2,0x22,0x22,0x22,0x20,0x00,
//   89   0x00,0xFF,0x04,0x08,0x07,0x10,0x0C,0x03,0x40,0x80,0x7F,0x00,0x01,0x06,0x18,0x00/*"?",1*/
//   90 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   91 uint8 sky3[] =
sky3:
        DATA
        DC8 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "-"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "+"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 " "

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_3:
        DATA
        DC8 "Error!"
        DC8 0
//   92 {
//   93   0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   94   0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00/*"!",2*/
//   95 };
//   96 
//   97 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   98 const uint8 F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   99 {
//  100   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//  101   { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//  102   { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//  103   { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//  104   { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//  105   { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//  106   { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//  107   { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//  108   { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//  109   { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//  110   { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//  111   { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//  112   { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//  113   { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//  114   { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//  115   { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//  116   { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//  117   { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//  118   { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//  119   { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//  120   { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//  121   { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//  122   { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//  123   { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  124   { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  125   { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  126   { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  127   { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  128   { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  129   { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  130   { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  131   { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  132   { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  133   { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  134   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  135   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  136   { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  137   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  138   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  139   { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  140   { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  141   { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  142   { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  143   { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  144   { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  145   { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  146   { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  147   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  148   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  149   { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  150   { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  151   { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  152   { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  153   { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  154   { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  155   { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  156   { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  157   { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  158   { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  159   { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  160   { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  161   { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  162   { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  163   { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  164   { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  165   { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  166   { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  167   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  168   { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  169   { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  170   { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  171   { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  172   { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  173   { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  174   { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  175   { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  176   { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  177   { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  178   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  179   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  180   { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  181   { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  182   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  183   { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  184   { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  185   { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  186   { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  187   { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  188   { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  189   { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  190   { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  191   { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  192 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  193 const uint8 F14x16_Idx[] =
F14x16_Idx:
        DATA
        DC8 "\260\262\273\325\316\337\272\376\300\266\326\346\265\347\327\323\316\252\304\372\267\376\316\361"
        DC8 0, 0, 0
//  194 {
//  195   "安徽芜湖蓝宙电子为您服务"
//  196 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  197 const uint8 F14x16[] = {
F14x16:
        DATA
        DC8 92, 68, 68, 68, 196, 117, 70, 68, 68, 196, 68, 68, 92, 0, 32, 32
        DC8 34, 19, 18, 10, 4, 4, 10, 9, 16, 32, 0, 0, 136, 196, 51, 150, 212
        DC8 183, 148, 86, 16, 239, 8, 248, 8, 0, 0, 63, 32, 20, 38, 61, 22, 36
        DC8 32, 25, 6, 25, 32, 0, 4, 36, 36, 36, 47, 36, 228, 36, 47, 36, 36
        DC8 36, 4, 0, 33, 33, 17, 17, 9, 7, 1, 31, 33, 33, 33, 33, 49, 0, 18
        DC8 36, 128, 8, 200, 127, 200, 8, 254, 34, 34, 254, 0, 0, 24, 6, 1, 0
        DC8 15, 4, 39, 24, 7, 33, 33, 63, 0, 0, 2, 226, 2, 7, 242, 130, 66, 50
        DC8 34, 103, 162, 34, 2, 0, 32, 32, 62, 34, 35, 62, 34, 62, 34, 34, 62
        DC8 33, 32, 0, 28, 196, 68, 68, 68, 69, 246, 68, 68, 68, 68, 196, 28, 0
        DC8 0, 63, 18, 18, 18, 18, 31, 18, 18, 18, 18, 63, 0, 0, 0, 248, 72, 72
        DC8 72, 72, 255, 72, 72, 72, 72, 248, 0, 0, 0, 7, 2, 2, 2, 2, 31, 34
        DC8 34, 34, 34, 35, 56, 0, 64, 65, 65, 65, 65, 65, 225, 81, 73, 69, 67
        DC8 65, 64, 0, 0, 0, 0, 0, 32, 32, 63, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18
        DC8 20, 208, 63, 16, 144, 16, 16, 16, 240, 0, 0, 32, 16, 8, 6, 1, 0, 0
        DC8 0, 35, 32, 16, 15, 0, 0, 16, 8, 252, 3, 136, 100, 7, 4, 244, 4, 36
        DC8 204, 0, 0, 32, 24, 1, 28, 32, 32, 35, 45, 33, 48, 0, 4, 24, 0, 0
        DC8 254, 34, 34, 254, 0, 254, 66, 194, 82, 82, 222, 0, 0, 32, 31, 1, 33
        DC8 63, 0, 63, 16, 11, 4, 10, 17, 32, 0, 64, 72, 68, 38, 43, 146, 18
        DC8 18, 42, 38, 66, 64, 64, 0, 0, 33, 17, 9, 5, 3, 1, 1, 33, 33, 31, 0
        DC8 0, 0
//  198   /*
//  199   0x0C,0xCC,0xCC,0xDE,0xDE,0xCC,0xCC,0xCC,0xDE,0xDE,0xCC,0xCC,0x0C,0x00,
//  200   0xC6,0xC6,0x66,0x36,0x1E,0x0F,0x07,0x7E,0xFE,0xC6,0xC6,0xC6,0xE6,0xE0,
//  201   */
//  202   0x5C,0x44,0x44,0x44,0xC4,0x75,0x46,0x44,0x44,0xC4,0x44,0x44,0x5C,0x00,0x20,0x20,
//  203   0x22,0x13,0x12,0x0A,0x04,0x04,0x0A,0x09,0x10,0x20,0x00,0x00,/*安*/
//  204   
//  205   
//  206   0x88,0xC4,0x33,0x96,0xD4,0xB7,0x94,0x56,0x10,0xEF,0x08,0xF8,0x08,0x00,0x00,0x3F,
//  207   0x20,0x14,0x26,0x3D,0x16,0x24,0x20,0x19,0x06,0x19,0x20,0x00,/*徽*/
//  208   
//  209   0x04,0x24,0x24,0x24,0x2F,0x24,0xE4,0x24,0x2F,0x24,0x24,0x24,0x04,0x00,0x21,0x21,
//  210   0x11,0x11,0x09,0x07,0x01,0x1F,0x21,0x21,0x21,0x21,0x31,0x00,/*"芜",0*/
//  211   
//  212   0x12,0x24,0x80,0x08,0xC8,0x7F,0xC8,0x08,0xFE,0x22,0x22,0xFE,0x00,0x00,0x18,0x06,
//  213   0x01,0x00,0x0F,0x04,0x27,0x18,0x07,0x21,0x21,0x3F,0x00,0x00,/*"湖",0*/
//  214   
//  215   
//  216   0x02,0xE2,0x02,0x07,0xF2,0x82,0x42,0x32,0x22,0x67,0xA2,0x22,0x02,0x00,0x20,0x20,
//  217   0x3E,0x22,0x23,0x3E,0x22,0x3E,0x22,0x22,0x3E,0x21,0x20,0x00,/*"蓝",0*/
//  218   
//  219   
//  220   0x1C,0xC4,0x44,0x44,0x44,0x45,0xF6,0x44,0x44,0x44,0x44,0xC4,0x1C,0x00,0x00,0x3F,
//  221   0x12,0x12,0x12,0x12,0x1F,0x12,0x12,0x12,0x12,0x3F,0x00,0x00,/*"宙",0*/
//  222   
//  223   
//  224   0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,0x48,0x48,0x48,0xF8,0x00,0x00,0x00,0x07,
//  225   0x02,0x02,0x02,0x02,0x1F,0x22,0x22,0x22,0x22,0x23,0x38,0x00,/*"电",0*/
//  226   
//  227   0x40,0x41,0x41,0x41,0x41,0x41,0xE1,0x51,0x49,0x45,0x43,0x41,0x40,0x00,0x00,0x00,
//  228   0x00,0x00,0x20,0x20,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"子",0*/
//  229   
//  230   
//  231   0x10,0x10,0x12,0x14,0xD0,0x3F,0x10,0x90,0x10,0x10,0x10,0xF0,0x00,0x00,0x20,0x10,
//  232   0x08,0x06,0x01,0x00,0x00,0x00,0x23,0x20,0x10,0x0F,0x00,0x00,/*"为",0*/
//  233   
//  234   0x10,0x08,0xFC,0x03,0x88,0x64,0x07,0x04,0xF4,0x04,0x24,0xCC,0x00,0x00,0x20,0x18,
//  235   0x01,0x1C,0x20,0x20,0x23,0x2D,0x21,0x30,0x00,0x04,0x18,0x00,/*"您",0*/
//  236   
//  237   
//  238   
//  239   0x00,0xFE,0x22,0x22,0xFE,0x00,0xFE,0x42,0xC2,0x52,0x52,0xDE,0x00,0x00,0x20,0x1F,
//  240   0x01,0x21,0x3F,0x00,0x3F,0x10,0x0B,0x04,0x0A,0x11,0x20,0x00,/*"服",0*/
//  241   
//  242   0x40,0x48,0x44,0x26,0x2B,0x92,0x12,0x12,0x2A,0x26,0x42,0x40,0x40,0x00,0x00,0x21,
//  243   0x11,0x09,0x05,0x03,0x01,0x01,0x21,0x21,0x1F,0x00,0x00,0x00,/*"务",0*/
//  244   
//  245 };
//  246 
//  247 //======================================================
//  248 // 128X64I液晶底层驱动[8X16]字体库
//  249 // 设计者: powerint
//  250 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  251 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  252 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  253 const uint8 F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  254 {
//  255   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  256   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  257   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  258   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  259   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  260   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  261   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  262   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  263   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  264   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  265   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  266   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  267   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  268   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  269   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  270   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  271   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  272   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  273   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  274   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  275   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  276   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  277   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  278   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  279   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  280   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  281   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  282   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  283   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  284   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  285   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  286   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  287   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  288   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  289   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  290   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  291   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  292   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  293   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  294   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  295   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  296   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  297   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  298   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  299   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  300   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  301   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  302   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  303   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  304   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  305   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  306   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  307   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  308   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  309   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  310   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  311   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  312   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  313   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  314   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  315   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  316   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  317   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  318   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  319   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  320   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  321   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  322   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  323   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  324   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  325   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  326   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  327   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  328   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  329   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  330   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  331   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  332   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  333   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  334   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  335   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  336   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  337   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  338   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  339   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  340   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//uint85
//  341   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  342   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  343   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  344   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  345   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  346   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  347   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  348   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  349   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  350   
//  351 };
//  352 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  353 uint8 lanzhou96x64[768] = {
lanzhou96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 96, 32, 32, 32
        DC8 160, 160, 160, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 96, 96, 96, 96, 224, 112, 112, 96, 96, 240, 112, 96, 96, 96
        DC8 96, 96, 96, 0, 224, 224, 96, 96, 96, 96, 96, 112, 112, 112, 96, 96
        DC8 96, 96, 96, 96, 224, 224, 224, 128, 128, 128, 128, 240, 240, 128
        DC8 128, 128, 128, 128, 128, 128, 0, 0, 48, 48, 48, 48, 48, 48, 176
        DC8 240, 112, 48, 224, 248, 124, 30, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 1, 3, 135, 143, 207, 255, 254, 254, 252, 252, 240, 224, 128, 0, 0
        DC8 0, 0, 0, 0, 0, 63, 0, 255, 0, 0, 8, 14, 31, 58, 98, 194, 2, 2, 2, 0
        DC8 0, 3, 3, 248, 248, 248, 24, 24, 24, 252, 252, 24, 24, 24, 248, 248
        DC8 248, 3, 3, 255, 255, 49, 49, 49, 255, 255, 49, 49, 49, 49, 49, 255
        DC8 255, 0, 24, 24, 24, 24, 24, 30, 63, 255, 248, 24, 24, 255, 255, 0
        DC8 192, 128, 128, 128, 128, 224, 224, 224, 240, 248, 248, 252, 126
        DC8 127, 63, 63, 31, 15, 7, 7, 7, 15, 15, 15, 31, 31, 0, 0, 128, 176
        DC8 176, 191, 183, 179, 179, 179, 191, 191, 179, 179, 191, 191, 179
        DC8 179, 179, 183, 191, 176, 176, 128, 128, 191, 191, 191, 177, 177
        DC8 177, 191, 191, 177, 177, 177, 191, 191, 191, 128, 128, 135, 135
        DC8 134, 134, 134, 191, 191, 182, 182, 182, 182, 182, 183, 183, 176
        DC8 176, 184, 184, 128, 136, 152, 184, 191, 191, 128, 128, 31, 63, 112
        DC8 239, 223, 159, 127, 255, 255, 255, 255, 255, 239, 227, 192, 128, 0
        DC8 128, 0, 128, 192, 192, 64, 0, 224, 248, 30, 0, 0, 0, 0, 241, 241, 1
        DC8 1, 1, 1, 1, 1, 1, 1, 129, 65, 33, 17, 17, 17, 33, 65, 129, 1, 1
        DC8 241, 241, 97, 225, 129, 1, 1, 1, 1, 1, 241, 241, 1, 241, 241, 49
        DC8 49, 49, 97, 193, 129, 1, 1, 49, 49, 49, 49, 49, 49, 49, 49, 241
        DC8 241, 113, 1, 241, 241, 49, 49, 49, 49, 241, 241, 241, 0, 0, 0, 0, 3
        DC8 3, 7, 14, 28, 28, 25, 27, 27, 27, 27, 27, 27, 27, 9, 13, 4, 6, 3, 3
        DC8 1, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 255, 8, 8
        DC8 8, 8, 8, 8, 8, 255, 255, 0, 255, 255, 0, 1, 7, 30, 120, 224, 128, 0
        DC8 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 129, 255, 126, 0, 128, 192
        DC8 224, 240, 56, 30, 7, 3, 1, 0, 0, 255, 255, 0, 0, 0, 0, 255, 255
        DC8 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 12, 12, 12, 12, 12, 12, 0, 15
        DC8 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 15, 15, 0, 0, 0, 0, 0, 1, 7, 6
        DC8 15, 15, 0, 15, 15, 12, 12, 12, 6, 3, 1, 0, 0, 14, 15, 15, 13, 12
        DC8 12, 12, 12, 12, 12, 12, 0, 15, 15, 12, 12, 12, 12, 15, 15, 15, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0
//  354   /*
//  355   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  356   0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  357   0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  358   0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  359   0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  360   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  361   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  362   0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  363   0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  364   0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  365   0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  366   0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  367   0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  368   0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  369   0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  370   0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  371   0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  372   0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  373   0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  374   0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  375   0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  376   0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  377   0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  378   0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  379   0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  380   0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  381   0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  382   0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  383   0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  384   0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  385   0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  386   0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  387   0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  388   0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  389   0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  390   0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  391   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  392   0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  393   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  394   0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  395   0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  396   0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  397   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  398   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  399   0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  400   0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  401   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  402   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, */
//  403   
//  404   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  405   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  406   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  407   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  408   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  409   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  410   0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x60,0x20,0x20,0x20,0xA0,0xA0,
//  411   0xA0,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  412   0x00,0x00,0x60,0x60,0x60,0x60,0xE0,0x70,0x70,0x60,0x60,0xF0,0x70,0x60,0x60,0x60,
//  413   0x60,0x60,0x60,0x00,0xE0,0xE0,0x60,0x60,0x60,0x60,0x60,0x70,0x70,0x70,0x60,0x60,
//  414   0x60,0x60,0x60,0x60,0xE0,0xE0,0xE0,0x80,0x80,0x80,0x80,0xF0,0xF0,0x80,0x80,0x80,
//  415   0x80,0x80,0x80,0x80,0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0xB0,0xF0,0x70,0x30,
//  416   0xE0,0xF8,0x7C,0x1E,0x07,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
//  417   0x01,0x03,0x87,0x8F,0xCF,0xFF,0xFE,0xFE,0xFC,0xFC,0xF0,0xE0,0x80,0x00,0x00,0x00,
//  418   0x00,0x00,0x00,0x00,0x3F,0x00,0xFF,0x00,0x00,0x08,0x0E,0x1F,0x3A,0x62,0xC2,0x02,
//  419   0x02,0x02,0x00,0x00,0x03,0x03,0xF8,0xF8,0xF8,0x18,0x18,0x18,0xFC,0xFC,0x18,0x18,
//  420   0x18,0xF8,0xF8,0xF8,0x03,0x03,0xFF,0xFF,0x31,0x31,0x31,0xFF,0xFF,0x31,0x31,0x31,
//  421   0x31,0x31,0xFF,0xFF,0x00,0x18,0x18,0x18,0x18,0x18,0x1E,0x3F,0xFF,0xF8,0x18,0x18,
//  422   0xFF,0xFF,0x00,0xC0,0x80,0x80,0x80,0x80,0xE0,0xE0,0xE0,0xF0,0xF8,0xF8,0xFC,0x7E,
//  423   0x7F,0x3F,0x3F,0x1F,0x0F,0x07,0x07,0x07,0x0F,0x0F,0x0F,0x1F,0x1F,0x00,0x00,0x80,
//  424   0xB0,0xB0,0xBF,0xB7,0xB3,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xB3,
//  425   0xB7,0xBF,0xB0,0xB0,0x80,0x80,0xBF,0xBF,0xBF,0xB1,0xB1,0xB1,0xBF,0xBF,0xB1,0xB1,
//  426   0xB1,0xBF,0xBF,0xBF,0x80,0x80,0x87,0x87,0x86,0x86,0x86,0xBF,0xBF,0xB6,0xB6,0xB6,
//  427   0xB6,0xB6,0xB7,0xB7,0xB0,0xB0,0xB8,0xB8,0x80,0x88,0x98,0xB8,0xBF,0xBF,0x80,0x80,
//  428   0x1F,0x3F,0x70,0xEF,0xDF,0x9F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xE3,0xC0,0x80,
//  429   0x00,0x80,0x00,0x80,0xC0,0xC0,0x40,0x00,0xE0,0xF8,0x1E,0x00,0x00,0x00,0x00,0xF1,
//  430   0xF1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0x41,0x21,0x11,0x11,0x11,0x21,
//  431   0x41,0x81,0x01,0x01,0xF1,0xF1,0x61,0xE1,0x81,0x01,0x01,0x01,0x01,0x01,0xF1,0xF1,
//  432   0x01,0xF1,0xF1,0x31,0x31,0x31,0x61,0xC1,0x81,0x01,0x01,0x31,0x31,0x31,0x31,0x31,
//  433   0x31,0x31,0x31,0xF1,0xF1,0x71,0x01,0xF1,0xF1,0x31,0x31,0x31,0x31,0xF1,0xF1,0xF1,
//  434   0x00,0x00,0x00,0x00,0x03,0x03,0x07,0x0E,0x1C,0x1C,0x19,0x1B,0x1B,0x1B,0x1B,0x1B,
//  435   0x1B,0x1B,0x09,0x0D,0x04,0x06,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  436   0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x08,0x08,0x08,0x08,0x08,0x08,
//  437   0x08,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x01,0x07,0x1E,0x78,0xE0,0x80,0x00,0xFF,0xFF,
//  438   0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x81,0xFF,0x7E,0x00,0x80,0xC0,0xE0,0xF0,
//  439   0x38,0x1E,0x07,0x03,0x01,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
//  440   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  441   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
//  442   0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//  443   0x00,0x0F,0x0F,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x06,0x0F,0x0F,
//  444   0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x06,0x03,0x01,0x00,0x00,0x0E,0x0F,0x0F,0x0D,0x0C,
//  445   0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x0C,0x0F,0x0F,0x0F,
//  446   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  447   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  448   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  449   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  450   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  451   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  452   
//  453 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  454 const uint8 LIBLOGO60x58[480] = {
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  455   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  456   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  457   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  458   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  459   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  460   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  461   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  462   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  463   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  464   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  465   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  466   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  467   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  468   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  469   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  470   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  471   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  472   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  473   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  474   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  475   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  476   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  477   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  478   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  479   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  480   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  481   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  482   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  483   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  484   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  485 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  486 uint8 LANDZO_LOGO[300] ={
LANDZO_LOGO:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 48, 16, 24, 8, 4, 20, 16
        DC8 26, 24, 24, 28, 28, 28, 28, 60, 60, 60, 60, 124, 124, 252, 252, 248
        DC8 248, 240, 240, 224, 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 192, 240, 248, 126, 31, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 143, 255, 255, 255, 255, 255
        DC8 255, 254, 252, 248, 224, 128, 0, 0, 0, 240, 255, 255, 255, 7, 0
        DC8 248, 248, 240, 240, 224, 224, 224, 192, 192, 192, 192, 192, 192
        DC8 192, 192, 192, 192, 192, 192, 192, 224, 224, 224, 240, 240, 248
        DC8 248, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 0, 0, 15, 255, 255, 255, 248, 192, 15, 127, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 63, 31, 15, 7, 3, 3, 1, 1
        DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 7, 3, 0
        DC8 0, 0, 0, 3, 15, 31, 127, 254, 252, 241, 231, 207, 159, 63, 127, 255
        DC8 255, 255, 255, 252, 240, 224, 224, 192, 128, 128, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 1, 3, 3, 7, 15, 15, 30, 30, 28, 57, 57, 59, 115, 115
        DC8 119, 103, 103, 103, 103, 103, 103, 39, 39, 54, 54, 22, 18, 10, 10
        DC8 4, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  487   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x30,0x10,0x18,0x08,
//  488   0x04,0x14,0x10,0x1A,0x18,0x18,0x1C,0x1C,0x1C,0x1C,0x3C,0x3C,0x3C,0x3C,0x7C,0x7C,
//  489   0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xE0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//  490   0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xF8,0x7E,0x1F,0x07,0x03,0x00,0x00,0x00,0x00,
//  491   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  492   0x00,0x00,0x00,0x01,0x01,0x03,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,
//  493   0xE0,0x80,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0x07,0x00,0xF8,0xF8,0xF0,0xF0,0xE0,
//  494   0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xE0,
//  495   0xE0,0xE0,0xF0,0xF0,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  496   0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xF8,0xC0,0x0F,0x7F,0xFF,
//  497   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x03,0x01,
//  498   0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  499   0x01,0x01,0x01,0x03,0x03,0x07,0x03,0x00,0x00,0x00,0x00,0x03,0x0F,0x1F,0x7F,0xFE,
//  500   0xFC,0xF1,0xE7,0xCF,0x9F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0xF0,0xE0,0xE0,0xC0,
//  501   0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  502   0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  503   0x00,0x00,0x01,0x03,0x03,0x07,0x0F,0x0F,0x1E,0x1E,0x1C,0x39,0x39,0x3B,0x73,0x73,
//  504   0x77,0x67,0x67,0x67,0x67,0x67,0x67,0x27,0x27,0x36,0x36,0x16,0x12,0x0A,0x0A,0x04,
//  505   0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//  506 };
//  507 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  508 void Dly_ms(uint16 ms)
//  509 {
//  510   uint16 ii,jj;
//  511   if (ms<1) ms=1;
Dly_ms:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??Dly_ms_0
        MOVS     R3,#+1
        MOVS     R0,R3
//  512   ms = ms*12 ;
??Dly_ms_0:
        MOVS     R3,#+12
        SMULBB   R0,R0,R3
//  513   for(ii=0;ii<ms;ii++)
        MOVS     R3,#+0
        MOVS     R1,R3
??Dly_ms_1:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R1,R0
        BCS.N    ??Dly_ms_2
//  514     for(jj=0;jj<1335;jj++);  //16MHz--1ms
        MOVS     R3,#+0
        MOVS     R2,R3
??Dly_ms_3:
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVW     R3,#+1335
        CMP      R2,R3
        BGE.N    ??Dly_ms_4
        ADDS     R2,R2,#+1
        B.N      ??Dly_ms_3
??Dly_ms_4:
        ADDS     R1,R1,#+1
        B.N      ??Dly_ms_1
//  515   //   for(jj=0;jj<4006;jj++);  //48MHz--1ms
//  516   //for(jj=0;jj<5341;jj++);    //64MHz--1ms
//  517 }
??Dly_ms_2:
        BX       LR               ;; return
//  518 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  519 void OLED_WrDat(uint8 data)
//  520 {
OLED_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  521   uint8 i=8;
        MOVS     R5,#+8
//  522   //LCD_CS=0;;
//  523   OLED_DC_SET;
        MOVS     R2,#+1
        MOVS     R1,#+25
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  524   OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  525   //asm("nop");
//  526   while(i--)
??OLED_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrDat_1
//  527   {
//  528     if(data&0x80)
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrDat_2
//  529     {
//  530       OLED_DI_SET;
        MOVS     R2,#+1
        MOVS     R1,#+27
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrDat_3
//  531     }
//  532     else
//  533     {
//  534       OLED_DI_RESET;
??OLED_WrDat_2:
        MOVS     R2,#+0
        MOVS     R1,#+27
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  535     }
//  536     OLED_DO_SET;
??OLED_WrDat_3:
        MOVS     R2,#+1
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  537     asm("nop");;
        nop
//  538     //asm("nop");
//  539     OLED_DO_RESET;;
        MOVS     R2,#+0
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  540     data<<=1;
        LSLS     R4,R4,#+1
        B.N      ??OLED_WrDat_0
//  541   }
//  542   //LCD_CS=1;
//  543 }
??OLED_WrDat_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  544 void OLED_WrCmd(uint8 cmd)
//  545 {
OLED_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  546   uint8 i=8;
        MOVS     R5,#+8
//  547   
//  548   //LCD_CS=0;;
//  549  OLED_DC_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+25
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  550   OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  551   //asm("nop");
//  552   while(i--)
??OLED_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrCmd_1
//  553   {
//  554     if(cmd&0x80)
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrCmd_2
//  555     {
//  556       OLED_DI_SET;
        MOVS     R2,#+1
        MOVS     R1,#+27
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrCmd_3
//  557     }
//  558     else
//  559     {
//  560       OLED_DI_RESET;
??OLED_WrCmd_2:
        MOVS     R2,#+0
        MOVS     R1,#+27
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  561     }
//  562     OLED_DO_SET;
??OLED_WrCmd_3:
        MOVS     R2,#+1
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  563     asm("nop");
        nop
//  564     //asm("nop");
//  565     OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  566     cmd<<=1;
        LSLS     R4,R4,#+1
        B.N      ??OLED_WrCmd_0
//  567   }
//  568   
//  569 }
??OLED_WrCmd_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  570 void OLED_Set_Pos(uint8 x, uint8 y)
//  571 {
OLED_Set_Pos:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  572   OLED_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  573   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  574   OLED_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  575 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  576 void OLED_Fill(uint8 bmp_data)
//  577 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  578   uint8 y,x;
//  579   
//  580   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R5,R0
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_1
//  581   {
//  582     OLED_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  583     OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  584     OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  585     for(x=0;x<X_WIDTH;x++)
        MOVS     R0,#+0
        MOVS     R6,R0
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BGE.N    ??OLED_Fill_3
//  586       OLED_WrDat(bmp_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
        B.N      ??OLED_Fill_2
//  587   }
??OLED_Fill_3:
        ADDS     R5,R5,#+1
        B.N      ??OLED_Fill_0
//  588 }
??OLED_Fill_1:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  589 void OLED_CLS(void)
//  590 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  591   uint8 y,x;
//  592   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R4,R0
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_1
//  593   {
//  594     OLED_WrCmd(0xb0+y);
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  595     OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  596     OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  597     for(x=0;x<X_WIDTH;x++)
        MOVS     R0,#+0
        MOVS     R5,R0
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BGE.N    ??OLED_CLS_3
//  598       OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
        B.N      ??OLED_CLS_2
//  599   }
??OLED_CLS_3:
        ADDS     R4,R4,#+1
        B.N      ??OLED_CLS_0
//  600 }
??OLED_CLS_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  601 void OLED_DLY_ms(uint16 ms)
//  602 {
//  603   uint16 a;
//  604   while(ms)
OLED_DLY_ms:
??OLED_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BEQ.N    ??OLED_DLY_ms_1
//  605   {
//  606     a=16000;
        MOV      R2,#+16000
        MOVS     R1,R2
//  607     while(a--);
??OLED_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??OLED_DLY_ms_2
//  608     ms--;
        SUBS     R0,R0,#+1
        B.N      ??OLED_DLY_ms_0
//  609   }
//  610   return;
??OLED_DLY_ms_1:
        BX       LR               ;; return
//  611 }
//  612 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  613 void OLED_Init(void)
//  614 {
OLED_Init:
        PUSH     {R7,LR}
//  615   OLEDIO_init();
        BL       OLEDIO_init
//  616   
//  617   OLED_DO_SET;
        MOVS     R2,#+1
        MOVS     R1,#+28
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  618   //LCD_CS=1;	//预制SLK和SS为高电平
//  619   OLED_CS_RESET; ///使能信号端，拉低时正常使用
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  620   OLED_RST_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+26
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  621   OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  622   OLED_RST_SET;
        MOVS     R2,#+1
        MOVS     R1,#+26
        LDR.W    R0,??DataTable11  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  623   
//  624   OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  625   OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  626   OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  627   OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  628   OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  629   OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  630   OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  631   OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  632   OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  633   OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  634   OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  635   OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  636   OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  637   OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  638   OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  639   OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  640   OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  641   OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  642   OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  643   OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  644   OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  645   OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  646   OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  647   OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  648   OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  649   OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  650   OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  651   OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  652   OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  653   OLED_Set_Pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  654   
//  655 }
        POP      {R0,PC}          ;; return
//  656 //==============================================================
//  657 //函数名： void LCD_PutPixel(uint8 x,uint8 y)
//  658 //功能描述：绘制一个点（x,y）
//  659 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  660 //返回：无
//  661 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  662 void OLED_PutPixel(uint8 x,uint8 y)
//  663 {
OLED_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  664   uint8 data1;  //data1当前点的数据
//  665   
//  666   OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  667   data1 = 0x01<<(y%8);
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R0,R0,R2
        MOVS     R6,R0
//  668   OLED_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  669   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  670   OLED_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       OLED_WrCmd
//  671   OLED_WrDat(data1);
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  672 }
        POP      {R4-R6,PC}       ;; return
//  673 //==============================================================
//  674 //函数名： void LCD_Rectangle(uint8 x1,uint8 y1,
//  675 //                   uint8 x2,uint8 y2,uint8 color,uint8 gif)
//  676 //功能描述：绘制一个实心矩形
//  677 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  678 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  679 //返回：无
//  680 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  681 void OLED_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif)
//  682 {
OLED_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+32]
//  683   uint8 n;
//  684   
//  685   OLED_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  686   for(n=x1;n<=x2;n++)
        MOV      R9,R5
??OLED_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCC.N    ??OLED_Rectangle_1
//  687   {
//  688     OLED_WrDat(0x01<<(y1%8));
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  689     if(gif == 1) 	OLED_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_2
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  690   }
??OLED_Rectangle_2:
        ADDS     R9,R9,#+1
        B.N      ??OLED_Rectangle_0
//  691   OLED_Set_Pos(x1,y2>>3);
??OLED_Rectangle_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  692   for(n=x1;n<=x2;n++)
        MOV      R9,R5
??OLED_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCC.N    ??OLED_Rectangle_4
//  693   {
//  694     OLED_WrDat(0x01<<(y2%8));
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  695     if(gif == 1) 	OLED_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_5
        MOVS     R0,#+5
        BL       OLED_DLY_ms
//  696   }
??OLED_Rectangle_5:
        ADDS     R9,R9,#+1
        B.N      ??OLED_Rectangle_3
//  697   
//  698 }
??OLED_Rectangle_4:
        POP      {R0,R4-R9,PC}    ;; return
//  699 /**==============================================================
//  700 函 数 名: LED_P6x8Char
//  701 功能描述: 显示一个6x8标志ASCII字符串
//  702 输入数据:  uint8 ucIdxX       显示横坐标0~122
//  703 uint8 ucIdxY       页范围0~7
//  704 uint8 ucData       显示的字符串
//  705 输出数据: NONE
//  706 返 回 值: NONE
//  707 ==============================================================**/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  708 void OLED_P6x8Char(uint8 ucIdxX, uint8 ucIdxY, uint8 ucData)
//  709 {
OLED_P6x8Char:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOV      R8,R1
        MOVS     R5,R2
//  710   uint8 i, ucDataTmp;
//  711   
//  712   ucDataTmp = ucData-32;
        SUBS     R0,R5,#+32
        MOVS     R7,R0
//  713   if(ucIdxX > 122)
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+123
        BLT.N    ??OLED_P6x8Char_0
//  714   {
//  715     ucIdxX = 0;
        MOVS     R0,#+0
        MOVS     R4,R0
//  716     ucIdxY++;
        ADDS     R8,R8,#+1
//  717   }
//  718   
//  719   OLED_Set_Pos(ucIdxX, ucIdxY);
??OLED_P6x8Char_0:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  720   
//  721   for(i = 0; i < 6; i++)
        MOVS     R0,#+0
        MOVS     R6,R0
??OLED_P6x8Char_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+6
        BGE.N    ??OLED_P6x8Char_2
//  722   {
//  723     OLED_WrDat(F6x8[ucDataTmp][i]);
        LDR.W    R0,??DataTable11_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R6, R0]
        BL       OLED_WrDat
//  724   }
        ADDS     R6,R6,#+1
        B.N      ??OLED_P6x8Char_1
//  725 }
??OLED_P6x8Char_2:
        POP      {R4-R8,PC}       ;; return
//  726 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  727 void OLED_P8x16Char(uint8 x,uint8 y,uint8 ch)
//  728 {
OLED_P8x16Char:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOV      R9,R1
        MOVS     R5,R2
//  729   uint8 c=0,i=0,j=0;
        MOVS     R6,#+0
        MOVS     R7,#+0
        MOVS     R8,#+0
//  730   
//  731   
//  732   c =ch-32;
        SUBS     R0,R5,#+32
        MOVS     R6,R0
//  733   if(x>120){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Char_0
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R9,R9,#+1
//  734   OLED_Set_Pos(x,y);
??OLED_P8x16Char_0:
        MOV      R1,R9
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  735   for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P8x16Char_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??OLED_P8x16Char_2
//  736     OLED_WrDat(F8X16[c*16+i]);
        LDR.W    R0,??DataTable11_3
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R1,R6,#+4
        UXTAB    R1,R1,R7
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
        B.N      ??OLED_P8x16Char_1
//  737   OLED_Set_Pos(x,y+1);
??OLED_P8x16Char_2:
        ADDS     R1,R9,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  738   for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P8x16Char_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??OLED_P8x16Char_4
//  739     OLED_WrDat(F8X16[c*16+i+8]);
        LDR.W    R0,??DataTable11_3
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R1,R6,#+4
        UXTAB    R1,R1,R7
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
        B.N      ??OLED_P8x16Char_3
//  740   x+=8;
??OLED_P8x16Char_4:
        ADDS     R4,R4,#+8
//  741   j++;
        ADDS     R8,R8,#+1
//  742   
//  743 }
        POP      {R0,R4-R9,PC}    ;; return
//  744 
//  745 //==============================================================
//  746 //函数名：LCD_P6x8Str(uint8 x,uint8 y,uint8 *p)
//  747 //功能描述：写入一组标准ASCII字符串
//  748 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  749 //返回：无
//  750 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  751 void OLED_P6x8Str(uint8 x,uint8 y,uint8 ch[])
//  752 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  753   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
//  754   while (ch[j]!='\0')
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_1
//  755   {
//  756     c =ch[j]-32;
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  757     if(x>126){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_2
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  758     OLED_Set_Pos(x,y);
??OLED_P6x8Str_2:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  759     for(i=0;i<6;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P6x8Str_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BGE.N    ??OLED_P6x8Str_4
//  760       OLED_WrDat(F6x8[c][i]);
        LDR.W    R0,??DataTable11_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P6x8Str_3
//  761     x+=6;
??OLED_P6x8Str_4:
        ADDS     R4,R4,#+6
//  762     j++;
        ADDS     R9,R9,#+1
        B.N      ??OLED_P6x8Str_0
//  763   }
//  764 }
??OLED_P6x8Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  765 //==============================================================
//  766 //函数名：LCD_P8x16Str(uint8 x,uint8 y,uint8 *p)
//  767 //功能描述：写入一组标准ASCII字符串
//  768 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  769 //返回：无
//  770 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  771 void OLED_P8x16Str(uint8 x,uint8 y,uint8 ch[])
//  772 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  773   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
//  774   
//  775   while (ch[j]!='\0')
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_1
//  776   {
//  777     c =ch[j]-32;
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  778     if(x>120){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_2
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  779     OLED_Set_Pos(x,y);
??OLED_P8x16Str_2:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  780     for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P8x16Str_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??OLED_P8x16Str_4
//  781       OLED_WrDat(F8X16[c*16+i]);
        LDR.W    R0,??DataTable11_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P8x16Str_3
//  782     OLED_Set_Pos(x,y+1);
??OLED_P8x16Str_4:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  783     for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??OLED_P8x16Str_6
//  784       OLED_WrDat(F8X16[c*16+i+8]);
        LDR.W    R0,??DataTable11_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P8x16Str_5
//  785     x+=8;
??OLED_P8x16Str_6:
        ADDS     R4,R4,#+8
//  786     j++;
        ADDS     R9,R9,#+1
        B.N      ??OLED_P8x16Str_0
//  787   }
//  788 }
??OLED_P8x16Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  789 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  790 void OLED_P14x16Str(uint8 x,uint8 y,uint8 ch[])
//  791 {
OLED_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  792   uint8 wm=0,ii = 0;
        MOVS     R7,#+0
        MOVS     R8,#+0
//  793   uint16 adder=1;
        MOVS     R9,#+1
//  794   
//  795   while(ch[ii] != '\0')
??OLED_P14x16Str_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R6]
        CMP      R0,#+0
        BEQ.W    ??OLED_P14x16Str_1
//  796   {
//  797     wm = 0;
        MOVS     R0,#+0
        MOVS     R7,R0
//  798     adder = 1;
        MOVS     R0,#+1
        MOV      R9,R0
//  799     while(F14x16_Idx[wm] > 127)
??OLED_P14x16Str_2:
        LDR.W    R0,??DataTable11_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R0]
        CMP      R0,#+128
        BLT.N    ??OLED_P14x16Str_3
//  800     {
//  801       if(F14x16_Idx[wm] == ch[ii])
        LDR.W    R0,??DataTable11_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R0]
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R1,[R8, R6]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_4
//  802       {
//  803         if(F14x16_Idx[wm + 1] == ch[ii + 1])
        LDR.W    R0,??DataTable11_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R0
        LDRB     R0,[R0, #+1]
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        ADDS     R1,R8,R6
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_4
//  804         {
//  805           adder = wm * 14;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+14
        SMULBB   R0,R7,R0
        MOV      R9,R0
//  806           break;
        B.N      ??OLED_P14x16Str_3
//  807         }
//  808       }
//  809       wm += 2;
??OLED_P14x16Str_4:
        ADDS     R7,R7,#+2
        B.N      ??OLED_P14x16Str_2
//  810     }
//  811     if(x>118){x=0;y++;}
??OLED_P14x16Str_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+119
        BLT.N    ??OLED_P14x16Str_5
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  812     OLED_Set_Pos(x , y);
??OLED_P14x16Str_5:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  813     if(adder != 1)// 显示汉字
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R9,#+1
        BEQ.N    ??OLED_P14x16Str_6
//  814     {
//  815       OLED_Set_Pos(x , y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  816       for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_7:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+14
        BGE.N    ??OLED_P14x16Str_8
//  817       {
//  818         OLED_WrDat(F14x16[adder]);
        LDR.W    R0,??DataTable11_5
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R0]
        BL       OLED_WrDat
//  819         adder += 1;
        ADDS     R9,R9,#+1
//  820       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_7
//  821       OLED_Set_Pos(x,y + 1);
??OLED_P14x16Str_8:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  822       for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_9:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+14
        BGE.N    ??OLED_P14x16Str_10
//  823       {
//  824         OLED_WrDat(F14x16[adder]);
        LDR.W    R0,??DataTable11_5
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R0]
        BL       OLED_WrDat
//  825         adder += 1;
        ADDS     R9,R9,#+1
//  826       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_9
//  827     }
//  828     else			  //显示空白字符
//  829     {
//  830       ii += 1;
??OLED_P14x16Str_6:
        ADDS     R8,R8,#+1
//  831       OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  832       for(wm = 0;wm < 16;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_11:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+16
        BGE.N    ??OLED_P14x16Str_12
//  833       {
//  834         OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
//  835       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_11
//  836       OLED_Set_Pos(x,y + 1);
??OLED_P14x16Str_12:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  837       for(wm = 0;wm < 16;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_13:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+16
        BGE.N    ??OLED_P14x16Str_10
//  838       {
//  839         OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
//  840       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_13
//  841     }
//  842     x += 14;
??OLED_P14x16Str_10:
        ADDS     R4,R4,#+14
//  843     ii += 2;
        ADDS     R8,R8,#+2
        B.N      ??OLED_P14x16Str_0
//  844   }
//  845 }
??OLED_P14x16Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  846 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  847 void OLED_Print(uint8 x, uint8 y, uint8 ch[])
//  848 {
OLED_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  849   uint8 ch2[3];
//  850   uint8 ii=0;
        MOVS     R7,#+0
//  851   while(ch[ii] != '\0')
??OLED_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_1
//  852   {
//  853     if(ch[ii] > 127)
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BLT.N    ??OLED_Print_2
//  854     {
//  855       ch2[0] = ch[ii];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  856       ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  857       ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  858       OLED_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P14x16Str
//  859       x += 14;
        ADDS     R4,R4,#+14
//  860       ii += 2;
        ADDS     R7,R7,#+2
        B.N      ??OLED_Print_0
//  861     }
//  862     else
//  863     {
//  864       ch2[0] = ch[ii];
??OLED_Print_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  865       ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  866       OLED_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  867       x += 8;
        ADDS     R4,R4,#+8
//  868       ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_0
//  869     }
//  870   }
//  871 }
??OLED_Print_1:
        POP      {R0,R4-R7,PC}    ;; return
//  872 /*****************************************************************************
//  873 函 数 名: LED_PrintFloat
//  874 功能描述: 将一个Short型数转换为5位数字显示
//  875 输入参数: UCHAR8 ucIdxX ucIdxX的范围为0~120
//  876 UCHAR8 ucIdxY ucIdxY为页的范围0~7
//  877 SHORT16 sData  sData为需要转换的数
//  878 输出参数: none
//  879 返 回 值: none
//  880 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  881 void OLED_PrintFloat(uint8 ucIdxX, uint8 ucIdxY, float64 sData)
//  882 {
OLED_PrintFloat:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+84
        MOVS     R6,R0
        MOVS     R7,R1
        MOVS     R4,R2
        MOVS     R5,R3
//  883   float64 i, j, k, l, m,usData;
//  884   float64 f1,f2,f3,f4,f5,f6;
//  885   if(sData < 0)
        MOVS     R0,R4
        MOVS     R1,R5
        MOVS     R2,#+0
        MOVS     R3,#+0
        BL       __aeabi_cdcmple
        BCS.N    ??OLED_PrintFloat_0
//  886   {
//  887     OLED_P8x16Str(ucIdxX,ucIdxY,"-");
        ADR.N    R2,??OLED_PrintFloat_1  ;; "-"
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  888     usData = (float64)(-sData);
        MOVS     R0,R4
        MOVS     R1,R5
        EORS     R1,R1,#0x80000000
        MOV      R8,R0
        MOV      R9,R1
        B.N      ??OLED_PrintFloat_2
//  889   }
//  890   else
//  891   {
//  892     OLED_P8x16Str(ucIdxX,ucIdxY,"+");
??OLED_PrintFloat_0:
        ADR.N    R2,??OLED_PrintFloat_1+0x4  ;; "+"
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  893     usData = (float64)sData;
        MOV      R8,R4
        MOV      R9,R5
//  894   }
//  895   if(usData < 100000.0 && usData > -100000.0)
??OLED_PrintFloat_2:
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_6  ;; 0x40f86a00
        BL       __aeabi_cdcmple
        BCS.W    ??OLED_PrintFloat_3
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#-1
        LDR.W    R3,??DataTable11_7  ;; 0xc0f869ff
        BL       __aeabi_cdrcmple
        BHI.W    ??OLED_PrintFloat_3
//  896   {
//  897     l  = (uint16)(usData / 10000) % 10;
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_8  ;; 0x40c38800
        BL       __aeabi_ddiv
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+8]
//  898     m  = (uint16)(usData / 1000) % 10;
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_9  ;; 0x408f4000
        BL       __aeabi_ddiv
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+32]
//  899     i  = (uint16)(usData / 100) % 10;
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_10  ;; 0x40590000
        BL       __aeabi_ddiv
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+48]
//  900     j  = (uint16)(usData / 10) % 10;
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_11  ;; 0x40240000
        BL       __aeabi_ddiv
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+64]
//  901     k  = (uint16) usData % 10;
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+72]
//  902     f1 = (uint16)(usData * 10) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_11  ;; 0x40240000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+56]
//  903     f2 = (uint16)(usData * 100) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_10  ;; 0x40590000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+40]
//  904     f3 = (uint16)(usData * 1000) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_9  ;; 0x408f4000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+24]
//  905     f4 = (uint32)(usData * 10000) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_8  ;; 0x40c38800
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2uiz
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_ui2d
        STRD     R0,R1,[SP, #+0]
//  906     f5 = (uint32)(usData * 100000) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable11_6  ;; 0x40f86a00
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2uiz
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_ui2d
        MOV      R10,R0
        MOV      R11,R1
//  907     //    f6 = (uint32)(usData * 1000000) % 10;
//  908     
//  909     //万位
//  910     if ((uint8)l != 0)
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_4
//  911     {
//  912       OLED_P8x16Char(ucIdxX+8,  ucIdxY, (uint8)l+48);
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_5
        Nop      
        DATA
??OLED_PrintFloat_1:
        DC8      "-",0x0,0x0
        DC8      "+",0x0,0x0
        THUMB
//  913     }
//  914     else
//  915     {
//  916       OLED_P8x16Str(ucIdxX+8,  ucIdxY, " ");
??OLED_PrintFloat_4:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  917     }
//  918     
//  919     //千位
//  920     if ( (uint8)m != 0 || (uint8)l != 0)
??OLED_PrintFloat_5:
        LDRD     R0,R1,[SP, #+32]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_6
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_7
//  921     {
//  922       OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8)m+48);
??OLED_PrintFloat_6:
        LDRD     R0,R1,[SP, #+32]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_8
//  923     }
//  924     else
//  925     {
//  926       OLED_P6x8Str(ucIdxX+16,  ucIdxY, " ");
??OLED_PrintFloat_7:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  927     }
//  928     
//  929     
//  930     //百位
//  931     if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0)
??OLED_PrintFloat_8:
        LDRD     R0,R1,[SP, #+32]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_9
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_9
        LDRD     R0,R1,[SP, #+48]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_10
//  932     {
//  933       OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)i+48);
??OLED_PrintFloat_9:
        LDRD     R0,R1,[SP, #+48]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_11
//  934     }
//  935     else
//  936     {
//  937       OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
??OLED_PrintFloat_10:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  938     }
//  939     
//  940     //十位
//  941     if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0 || (uint8)j != 0)
??OLED_PrintFloat_11:
        LDRD     R0,R1,[SP, #+32]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_12
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_12
        LDRD     R0,R1,[SP, #+48]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_12
        LDRD     R0,R1,[SP, #+64]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_13
//  942     {
//  943       OLED_P8x16Char(ucIdxX+32, ucIdxY, (uint8)j+48);
??OLED_PrintFloat_12:
        LDRD     R0,R1,[SP, #+64]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_14
//  944     }
//  945     else
//  946     {
//  947       OLED_P8x16Str(ucIdxX +32,  ucIdxY, " ");
??OLED_PrintFloat_13:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  948     }
//  949     
//  950     //个位
//  951     OLED_P8x16Char(ucIdxX+40, ucIdxY, (uint8)k+48);
??OLED_PrintFloat_14:
        LDRD     R0,R1,[SP, #+72]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
//  952     
//  953     //小数点
//  954     OLED_P8x16Char(ucIdxX+48, ucIdxY, (uint8) '.' );
        MOVS     R2,#+46
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+48
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
//  955     
//  956     
//  957     if ( (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || (uint8)f3 != 0 || (uint8)f2 != 0 || (uint8)f1 != 0 )
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_15
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_15
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_15
        LDRD     R0,R1,[SP, #+24]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_15
        LDRD     R0,R1,[SP, #+40]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_15
        LDRD     R0,R1,[SP, #+56]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_16
//  958     {
//  959       OLED_P8x16Char(ucIdxX+56, ucIdxY, (uint8)f1+48);
??OLED_PrintFloat_15:
        LDRD     R0,R1,[SP, #+56]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+56
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_17
//  960     }
//  961     else
//  962     {
//  963       OLED_P8x16Str(ucIdxX+56,  ucIdxY, " ");
??OLED_PrintFloat_16:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+56
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  964     }
//  965     if ( (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || (uint8)f3 != 0 || (uint8)f2 != 0)
??OLED_PrintFloat_17:
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_18
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_18
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_18
        LDRD     R0,R1,[SP, #+24]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_18
        LDRD     R0,R1,[SP, #+40]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_19
//  966     {
//  967       OLED_P8x16Char(ucIdxX+64, ucIdxY, (uint8)f2+48);
??OLED_PrintFloat_18:
        LDRD     R0,R1,[SP, #+40]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+64
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_20
//  968     }
//  969     else
//  970     {
//  971       OLED_P8x16Str(ucIdxX+64,  ucIdxY, " ");
??OLED_PrintFloat_19:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+64
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  972     }
//  973     if ( (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || (uint8)f3 != 0)
??OLED_PrintFloat_20:
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_21
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_21
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_21
        LDRD     R0,R1,[SP, #+24]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_22
//  974     {
//  975       OLED_P8x16Char(ucIdxX+72, ucIdxY, (uint8)f3+48);
??OLED_PrintFloat_21:
        LDRD     R0,R1,[SP, #+24]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+72
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_23
//  976     }
//  977     else
//  978     {
//  979       OLED_P8x16Str(ucIdxX+72,  ucIdxY, " ");
??OLED_PrintFloat_22:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+72
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  980     }
//  981     if ( (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0)
??OLED_PrintFloat_23:
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_24
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_24
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_25
//  982     {
//  983       OLED_P8x16Char(ucIdxX+80, ucIdxY, (uint8)f4+48);
??OLED_PrintFloat_24:
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_26
//  984     }
//  985     else
//  986     {
//  987       OLED_P8x16Str(ucIdxX+80,  ucIdxY, " ");
??OLED_PrintFloat_25:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  988     }
//  989     if ( (uint8)f6 != 0 || (uint8)f5 != 0 )
??OLED_PrintFloat_26:
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_27
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_28
//  990     {
//  991       OLED_P8x16Char(ucIdxX+88, ucIdxY, (uint8)f5+48);
??OLED_PrintFloat_27:
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+88
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_29
//  992     }
//  993     else
//  994     {
//  995       OLED_P8x16Str(ucIdxX+88,  ucIdxY, " ");
??OLED_PrintFloat_28:
        ADR.N    R2,??DataTable9  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+88
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
        B.N      ??OLED_PrintFloat_29
//  996     }
//  997     //    if ( (uint8)f6 != 0 )
//  998     //    {
//  999     //      OLED_P8x16Char(ucIdxX+56, ucIdxY + 2, (uint8)f6+48);
// 1000     //    }
// 1001     //    else
// 1002     //    {
// 1003     //      OLED_P8x16Str(ucIdxX+56,  ucIdxY + 2, " ");
// 1004     //    }
// 1005   }
// 1006   else
// 1007   {
// 1008     OLED_P8x16Str( ucIdxX, ucIdxY,"Error!");
??OLED_PrintFloat_3:
        LDR.N    R2,??DataTable11_12
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1009   }
// 1010   return;
??OLED_PrintFloat_29:
        ADD      SP,SP,#+84
        POP      {R4-R11,PC}      ;; return
// 1011 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable9:
        DC8      " ",0x0,0x0
// 1012 //==============================================================
// 1013 //函数名： void Draw_BMP(uint8 x,uint8 y)
// 1014 //功能描述：显示BMP图片128×64
// 1015 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1016 //返回：无
// 1017 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1018 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[])
// 1019 {
Draw_BMP:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+40]
// 1020   uint16 ii=0;
        MOVS     R9,#+0
// 1021   uint8 x,y;
// 1022   
// 1023   if(y1%8==0) y=y1/8;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R1,R7,R0
        MLS      R1,R1,R0,R7
        CMP      R1,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R7,R0
        MOV      R11,R0
        B.N      ??Draw_BMP_1
// 1024   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R7,R0
        ADDS     R0,R0,#+1
        MOV      R11,R0
// 1025   for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R11,R5
??Draw_BMP_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        CMP      R7,R11
        BCC.N    ??Draw_BMP_3
// 1026   {
// 1027     OLED_Set_Pos(x0,y);
        MOV      R1,R11
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
// 1028     for(x=x0;x<x1;x++)
        MOV      R10,R4
??Draw_BMP_4:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R10,R6
        BCS.N    ??Draw_BMP_5
// 1029     {
// 1030       OLED_WrDat(bmp[ii++]);
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R8]
        BL       OLED_WrDat
        ADDS     R9,R9,#+1
// 1031     }
        ADDS     R10,R10,#+1
        B.N      ??Draw_BMP_4
// 1032   }
??Draw_BMP_5:
        ADDS     R11,R11,#+1
        B.N      ??Draw_BMP_2
// 1033 }
??Draw_BMP_3:
        POP      {R0,R4-R11,PC}   ;; return
// 1034 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1035 void Draw_LibLogo(void)
// 1036 {
Draw_LibLogo:
        PUSH     {R4-R6,LR}
// 1037   uint16 ii=0;
        MOVS     R4,#+0
// 1038   uint8 x,y;
// 1039   
// 1040   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R6,R0
??Draw_LibLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LibLogo_1
// 1041   {
// 1042     OLED_Set_Pos(34,y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+34
        BL       OLED_Set_Pos
// 1043     for(x=34;x<94;x++)
        MOVS     R0,#+34
        MOVS     R5,R0
??Draw_LibLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+94
        BGE.N    ??Draw_LibLogo_3
// 1044     {
// 1045       OLED_WrDat(LIBLOGO60x58[ii++]);
        LDR.N    R0,??DataTable11_13
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1046     }
        ADDS     R5,R5,#+1
        B.N      ??Draw_LibLogo_2
// 1047   }
??Draw_LibLogo_3:
        ADDS     R6,R6,#+1
        B.N      ??Draw_LibLogo_0
// 1048 }
??Draw_LibLogo_1:
        POP      {R4-R6,PC}       ;; return
// 1049 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1050 void Draw_Landzo(void)
// 1051 {
Draw_Landzo:
        PUSH     {R4-R6,LR}
// 1052   uint16 ii=0;
        MOVS     R4,#+0
// 1053   uint8 x,y;
// 1054   
// 1055   for(y=2;y<8;y++)
        MOVS     R0,#+2
        MOVS     R6,R0
??Draw_Landzo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_Landzo_1
// 1056   {
// 1057     OLED_Set_Pos(40,y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+40
        BL       OLED_Set_Pos
// 1058     for(x=40;x<90;x++)
        MOVS     R0,#+40
        MOVS     R5,R0
??Draw_Landzo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+90
        BGE.N    ??Draw_Landzo_3
// 1059     {
// 1060       OLED_WrDat(LANDZO_LOGO[ii++]);
        LDR.N    R0,??DataTable11_14
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1061     }
        ADDS     R5,R5,#+1
        B.N      ??Draw_Landzo_2
// 1062   }
??Draw_Landzo_3:
        ADDS     R6,R6,#+1
        B.N      ??Draw_Landzo_0
// 1063 }
??Draw_Landzo_1:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC32     0x400ff100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_1:
        DC32     OLEDIO_inittype

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_2:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_3:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_4:
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_5:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_6:
        DC32     0x40f86a00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_7:
        DC32     0xc0f869ff

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_8:
        DC32     0x40c38800

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_9:
        DC32     0x408f4000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_10:
        DC32     0x40590000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_11:
        DC32     0x40240000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_12:
        DC32     ?_3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_13:
        DC32     LIBLOGO60x58

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_14:
        DC32     LANDZO_LOGO

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 1064 
// 
//    20 bytes in section .bss
// 1 692 bytes in section .data
// 2 930 bytes in section .rodata
// 3 630 bytes in section .text
// 
// 3 630 bytes of CODE  memory
// 2 930 bytes of CONST memory
// 1 712 bytes of DATA  memory
//
//Errors: none
//Warnings: 1
