###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        25/Dec/2015  16:57:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\app\SENSOR\LDC1614.c
#    Command line =  
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\app\SENSOR\LDC1614.c"
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\FLASH\List\"
#        -lB
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\FLASH\List\"
#        -o
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\app\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\app\MAIN\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\app\BSP\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\app\CTL\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\app\sensor\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\app\ITAC\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\common\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\LPLD\FUNC\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\..\..\..\lib\USB\class\"
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\FLASH\List\LDC1614.lst
#    Object file  =  
#        G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\iar\FLASH\Obj\LDC1614.o
#
###############################################################################

G:\øÏ≈ÃÕ¯¬Á≥∑¿Î\whutddk\∑…Àºø®∂˚\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(LDC)1.0\app\SENSOR\LDC1614.c
      1          /*!
      2          * \file LDC1614.c
      3          *
      4          * Copyright (c) 2014-2015, Texas Instruments Incorporated - http://www.ti.com
      5          * All rights reserved.
      6          */
      7          
      8          //*****************************************************************************
      9          // #includes
     10          //*****************************************************************************
     11          #include "include.h"
     12          
     13          

   \                                 In section .bss, align 4
     14          uint32 LDC_data[4] = {0};
   \                     LDC_data:
   \   00000000                      DS8 16

   \                                 In section .bss, align 2
     15          uint16 LDC_STATUS = 0;
   \                     LDC_STATUS:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     16          uint8 LDC_flag[4] = {0};
   \                     LDC_flag:
   \   00000000                      DS8 4
     17          
     18          
     19          
     20          
     21          //*****************************************************************************
     22          // Global Variables
     23          //*****************************************************************************
     24          extern uint8_t 	i2c_transmitCounter;		//Variable to store transmit status for I2C
     25          extern uint8_t 	*p_i2c_transmitData;		//Pointer to I2C transmit data
     26          extern uint8_t 	i2c_receiveCounter;			//Variable to store receive status for I2C
     27          extern uint8_t 	*p_i2c_receivedData;		//Pointer to I2C received data
     28          
     29          //static uint8_t LDC_STATUS_BUF[2] = {0};		//Variable to store LDC STATUS register
     30          //static uint8_t LDC_CH0_MSB_BUF[2] = {0};	//Variable to store LDC CH0 data
     31          //static uint8_t LDC_CH0_LSB_BUF[2] = {0};	//Variable to store LDC CH0 data
     32          //static uint8_t LDC_CH1_MSB_BUF[2] = {0};	//Variable to store LDC CH1 data
     33          //static uint8_t LDC_CH1_LSB_BUF[2] = {0};	//Variable to store LDC CH1 data
     34          //static uint8_t LDC_CH2_MSB_BUF[2] = {0};	//Variable to store LDC CH2 data
     35          //static uint8_t LDC_CH2_LSB_BUF[2] = {0};	//Variable to store LDC CH2 data
     36          //static uint8_t LDC_CH3_MSB_BUF[2] = {0};	//Variable to store LDC CH3 data
     37          //static uint8_t LDC_CH3_LSB_BUF[2] = {0};	//Variable to store LDC CH3 data
     38          
     39          /*! \var INST_AVG_POWER
     40          * \brief Variable to hold instant average filter length (yields 2^4 = 16 samples for INST_AVG)
     41          */

   \                                 In section .data, align 1
     42          uint8_t INST_AVG_POWER = 4;
   \                     INST_AVG_POWER:
   \   00000000   0x04               DC8 4
     43          /*! \var SLOW_AVG_POWER
     44          * \brief Variable to hold slow average filter length (yields (2^4)*2^8 = 4096 samples for SLOW_AVG)
     45          */

   \                                 In section .data, align 1
     46          uint8_t SLOW_AVG_POWER = 8;
   \                     SLOW_AVG_POWER:
   \   00000000   0x08               DC8 8
     47          
     48          /*! \var LDC_CH0_DATA
     49          * \brief Variable to store LDC CH0 data */

   \                                 In section .bss, align 4
     50          uint32_t 	LDC_CH0_DATA = 0;
   \                     LDC_CH0_DATA:
   \   00000000                      DS8 4
     51          /*! \var LDC_CH1_DATA
     52          * \brief Variable to store LDC CH1 data */

   \                                 In section .bss, align 4
     53          uint32_t 	LDC_CH1_DATA = 0;
   \                     LDC_CH1_DATA:
   \   00000000                      DS8 4
     54          /*! \var LDC_CH2_DATA
     55          * \brief Variable to store LDC CH2 data */

   \                                 In section .bss, align 4
     56          uint32_t	LDC_CH2_DATA = 0;
   \                     LDC_CH2_DATA:
   \   00000000                      DS8 4
     57          /*! \var LDC_CH3_DATA
     58          * \brief Variable to store LDC CH3 data */

   \                                 In section .bss, align 4
     59          uint32_t	LDC_CH3_DATA = 0;
   \                     LDC_CH3_DATA:
   \   00000000                      DS8 4
     60          
     61          /*! \var LDC_CH0_ERRORS
     62          * \brief Variable to store LDC CH0 error flags */

   \                                 In section .bss, align 1
     63          uint8_t		LDC_CH0_ERRORS = 0;
   \                     LDC_CH0_ERRORS:
   \   00000000                      DS8 1
     64          /*! \var LDC_CH1_ERRORS
     65          * \brief Variable to store LDC CH1 error flags */

   \                                 In section .bss, align 1
     66          uint8_t		LDC_CH1_ERRORS = 0;
   \                     LDC_CH1_ERRORS:
   \   00000000                      DS8 1
     67          /*! \var LDC_CH2_ERRORS
     68          * \brief Variable to store LDC CH2 error flags */

   \                                 In section .bss, align 1
     69          uint8_t		LDC_CH2_ERRORS = 0;
   \                     LDC_CH2_ERRORS:
   \   00000000                      DS8 1
     70          /*! \var LDC_CH3_ERRORS
     71          * \brief Variable to store LDC CH3 error flags */

   \                                 In section .bss, align 1
     72          uint8_t		LDC_CH3_ERRORS = 0;
   \                     LDC_CH3_ERRORS:
   \   00000000                      DS8 1
     73          
     74          /*! \var LDC_CH0_PUSH
     75          * \brief Variable to store LDC CH0 button push flag */

   \                                 In section .bss, align 1
     76          uint8_t		LDC_CH0_PUSH = 0;
   \                     LDC_CH0_PUSH:
   \   00000000                      DS8 1
     77          /*! \var LDC_CH1_PUSH
     78          * \brief Variable to store LDC CH1 button push flag */

   \                                 In section .bss, align 1
     79          uint8_t		LDC_CH1_PUSH = 0;
   \                     LDC_CH1_PUSH:
   \   00000000                      DS8 1
     80          /*! \var LDC_CH2_PUSH
     81          * \brief Variable to store LDC CH2 button push flag */

   \                                 In section .bss, align 1
     82          uint8_t		LDC_CH2_PUSH = 0;
   \                     LDC_CH2_PUSH:
   \   00000000                      DS8 1
     83          /*! \var LDC_CH3_PUSH
     84          * \brief Variable to store LDC CH3 button push flag */

   \                                 In section .bss, align 1
     85          uint8_t		LDC_CH3_PUSH = 0;
   \                     LDC_CH3_PUSH:
   \   00000000                      DS8 1
     86          
     87          /*! \var FIRST_RUN
     88          * \brief Variable to flag if algorithm has been run at all */

   \                                 In section .data, align 1
     89          uint8_t		FIRST_RUN = 1;
   \                     FIRST_RUN:
   \   00000000   0x01               DC8 1
     90          
     91          /*! \var RUNNING_AVG_INDEX1
     92          * \brief Variable to store first running avg index */

   \                                 In section .bss, align 1
     93          uint8_t		RUNNING_AVG_INDEX1 = 0;
   \                     RUNNING_AVG_INDEX1:
   \   00000000                      DS8 1
     94          /*! \var RUNNING_AVG_INDEX2
     95          * \brief Variable to store second running avg index */

   \                                 In section .bss, align 1
     96          uint8_t		RUNNING_AVG_INDEX2 = 0;
   \                     RUNNING_AVG_INDEX2:
   \   00000000                      DS8 1
     97          
     98          /*! \var LDC_CH0_SUM_1
     99          * \brief Variable to store inst. running avg. sum */

   \                                 In section .bss, align 4
    100          uint32_t LDC_CH0_SUM_1 = 0;
   \                     LDC_CH0_SUM_1:
   \   00000000                      DS8 4
    101          /*! \var LDC_CH0_SUM_2
    102          * \brief Variable to store slow running avg. sum */

   \                                 In section .bss, align 4
    103          uint32_t LDC_CH0_SUM_2 = 0;
   \                     LDC_CH0_SUM_2:
   \   00000000                      DS8 4
    104          /*! \var LDC_CH0_INST_AVG
    105          * \brief Variable to store inst. running avg. value */

   \                                 In section .bss, align 4
    106          uint32_t LDC_CH0_INST_AVG = 0;
   \                     LDC_CH0_INST_AVG:
   \   00000000                      DS8 4
    107          /*! \var LDC_CH0_SLOW_AVG
    108          * \brief Variable to store slow running avg. value */

   \                                 In section .bss, align 4
    109          uint32_t LDC_CH0_SLOW_AVG = 0;
   \                     LDC_CH0_SLOW_AVG:
   \   00000000                      DS8 4
    110          /*! \var LDC_CH0_THRESHOLD_1
    111          * \brief Variable to store threshold 1 compare value */

   \                                 In section .bss, align 4
    112          uint32_t LDC_CH0_THRESHOLD_1 = 0;
   \                     LDC_CH0_THRESHOLD_1:
   \   00000000                      DS8 4
    113          /*! \var LDC_CH0_THR_1
    114          * \brief Variable to store threshold 1 value; should be half of delta_code when button pressed;
    115          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    116          uint32_t LDC_CH0_THR_1 = 3000;
   \                     LDC_CH0_THR_1:
   \   00000000   0x00000BB8         DC32 3000
    117          /*! \var LDC_CH0_THRESHOLD_2
    118          * \brief Variable to store threshold 2 compare value */

   \                                 In section .bss, align 4
    119          uint32_t LDC_CH0_THRESHOLD_2 = 0;
   \                     LDC_CH0_THRESHOLD_2:
   \   00000000                      DS8 4
    120          /*! \var LDC_CH0_THR_2
    121          * \brief Variable to store threshold 2 value; should be half of delta_code when button pressed;
    122          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    123          uint32_t LDC_CH0_THR_2 = 10000;
   \                     LDC_CH0_THR_2:
   \   00000000   0x00002710         DC32 10000
    124          
    125          /*! \var LDC_CH1_SUM_1
    126          * \brief Variable to store inst. running avg. sum */

   \                                 In section .bss, align 4
    127          uint32_t LDC_CH1_SUM_1 = 0;
   \                     LDC_CH1_SUM_1:
   \   00000000                      DS8 4
    128          /*! \var LDC_CH1_SUM_2
    129          * \brief Variable to store slow running avg. sum */

   \                                 In section .bss, align 4
    130          uint32_t LDC_CH1_SUM_2 = 0;
   \                     LDC_CH1_SUM_2:
   \   00000000                      DS8 4
    131          /*! \var LDC_CH1_INST_AVG
    132          * \brief Variable to store inst. running avg. value */

   \                                 In section .bss, align 4
    133          uint32_t LDC_CH1_INST_AVG = 0;
   \                     LDC_CH1_INST_AVG:
   \   00000000                      DS8 4
    134          /*! \var LDC_CH1_SLOW_AVG
    135          * \brief Variable to store slow running avg. value */

   \                                 In section .bss, align 4
    136          uint32_t LDC_CH1_SLOW_AVG = 0;
   \                     LDC_CH1_SLOW_AVG:
   \   00000000                      DS8 4
    137          /*! \var LDC_CH1_THRESHOLD_1
    138          * \brief Variable to store threshold 1 compare value */

   \                                 In section .bss, align 4
    139          uint32_t LDC_CH1_THRESHOLD_1 = 0;
   \                     LDC_CH1_THRESHOLD_1:
   \   00000000                      DS8 4
    140          /*! \var LDC_CH1_THR_1
    141          * \brief Variable to store threshold 1 value; should be half of delta_code when button pressed;
    142          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    143          uint32_t LDC_CH1_THR_1 = 3000;
   \                     LDC_CH1_THR_1:
   \   00000000   0x00000BB8         DC32 3000
    144          /*! \var LDC_CH1_THRESHOLD_2
    145          * \brief Variable to store threshold 2 compare value */

   \                                 In section .bss, align 4
    146          uint32_t LDC_CH1_THRESHOLD_2 = 0;
   \                     LDC_CH1_THRESHOLD_2:
   \   00000000                      DS8 4
    147          /*! \var LDC_CH1_THR_2
    148          * \brief Variable to store threshold 2 value */

   \                                 In section .data, align 4
    149          uint32_t LDC_CH1_THR_2 = 10000;
   \                     LDC_CH1_THR_2:
   \   00000000   0x00002710         DC32 10000
    150          
    151          /*! \var LDC_CH2_SUM_1
    152          * \brief Variable to store inst. running avg. sum */

   \                                 In section .bss, align 4
    153          uint32_t LDC_CH2_SUM_1 = 0;
   \                     LDC_CH2_SUM_1:
   \   00000000                      DS8 4
    154          /*! \var LDC_CH2_SUM_2
    155          * \brief Variable to store slow running avg. sum */

   \                                 In section .bss, align 4
    156          uint32_t LDC_CH2_SUM_2 = 0;
   \                     LDC_CH2_SUM_2:
   \   00000000                      DS8 4
    157          /*! \var LDC_CH2_INST_AVG
    158          * \brief Variable to store inst. running avg. value */

   \                                 In section .bss, align 4
    159          uint32_t LDC_CH2_INST_AVG = 0;
   \                     LDC_CH2_INST_AVG:
   \   00000000                      DS8 4
    160          /*! \var LDC_CH2_SLOW_AVG
    161          * \brief Variable to store slow running avg. value */

   \                                 In section .bss, align 4
    162          uint32_t LDC_CH2_SLOW_AVG = 0;
   \                     LDC_CH2_SLOW_AVG:
   \   00000000                      DS8 4
    163          /*! \var LDC_CH2_THRESHOLD_1
    164          * \brief Variable to store threshold 1 compare value */

   \                                 In section .bss, align 4
    165          uint32_t LDC_CH2_THRESHOLD_1 = 0;
   \                     LDC_CH2_THRESHOLD_1:
   \   00000000                      DS8 4
    166          /*! \var LDC_CH2_THR_1
    167          * \brief Variable to store threshold 1 value; should be half of delta_code when button pressed;
    168          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    169          uint32_t LDC_CH2_THR_1 = 10000;
   \                     LDC_CH2_THR_1:
   \   00000000   0x00002710         DC32 10000
    170          /*! \var LDC_CH2_THRESHOLD_2
    171          * \brief Variable to store threshold 2 compare value */

   \                                 In section .bss, align 4
    172          uint32_t LDC_CH2_THRESHOLD_2 = 0;
   \                     LDC_CH2_THRESHOLD_2:
   \   00000000                      DS8 4
    173          /*! \var LDC_CH2_THR_2
    174          * \brief Variable to store threshold 2 value; should be half of delta_code when button pressed;
    175          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    176          uint32_t LDC_CH2_THR_2 = 40000;
   \                     LDC_CH2_THR_2:
   \   00000000   0x00009C40         DC32 40000
    177          
    178          /*! \var LDC_CH3_SUM_1
    179          * \brief Variable to store inst. running avg. sum */

   \                                 In section .bss, align 4
    180          uint32_t LDC_CH3_SUM_1 = 0;
   \                     LDC_CH3_SUM_1:
   \   00000000                      DS8 4
    181          /*! \var LDC_CH3_SUM_2
    182          * \brief Variable to store slow running avg. sum */

   \                                 In section .bss, align 4
    183          uint32_t LDC_CH3_SUM_2 = 0;
   \                     LDC_CH3_SUM_2:
   \   00000000                      DS8 4
    184          /*! \var LDC_CH3_INST_AVG
    185          * \brief Variable to store inst. running avg. value */

   \                                 In section .bss, align 4
    186          uint32_t LDC_CH3_INST_AVG = 0;
   \                     LDC_CH3_INST_AVG:
   \   00000000                      DS8 4
    187          /*! \var LDC_CH3_SLOW_AVG
    188          * \brief Variable to store slow running avg. value */

   \                                 In section .bss, align 4
    189          uint32_t LDC_CH3_SLOW_AVG = 0;
   \                     LDC_CH3_SLOW_AVG:
   \   00000000                      DS8 4
    190          /*! \var LDC_CH3_THRESHOLD_1
    191          * \brief Variable to store threshold 1 compare value */

   \                                 In section .bss, align 4
    192          uint32_t LDC_CH3_THRESHOLD_1 = 0;
   \                     LDC_CH3_THRESHOLD_1:
   \   00000000                      DS8 4
    193          /*! \var LDC_CH3_THR_1
    194          * \brief Variable to store threshold 1 value; should be half of delta_code when button pressed;
    195          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    196          uint32_t LDC_CH3_THR_1 = 4000;
   \                     LDC_CH3_THR_1:
   \   00000000   0x00000FA0         DC32 4000
    197          /*! \var LDC_CH3_THRESHOLD_2
    198          * \brief Variable to store threshold 2 compare value */

   \                                 In section .bss, align 4
    199          uint32_t LDC_CH3_THRESHOLD_2 = 0;
   \                     LDC_CH3_THRESHOLD_2:
   \   00000000                      DS8 4
    200          /*! \var LDC_CH3_THR_2
    201          * \brief Variable to store threshold 2 value; should be half of delta_code when button pressed;
    202          * adjust to desired button sensitivity */

   \                                 In section .data, align 4
    203          uint32_t LDC_CH3_THR_2 = 20000;
   \                     LDC_CH3_THR_2:
   \   00000000   0x00004E20         DC32 20000
    204          
    205          //*****************************************************************************
    206          // LDC1614 Library functions
    207          //*****************************************************************************

   \                                 In section .text, align 2, keep-with-next
    208          void LDC1614_sleep(void)
    209          {
   \                     LDC1614_sleep: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    210            
    211          //  static const uint8_t LDC1614_CONFIG_FRAME[3] =
    212          //  {
    213          //    CONFIG,	//CONFIG register address
    214          //    0x26,	//MSB of CONFIG (put device in sleep mode)
    215          //    0x01	//LSB of CONFIG
    216          //  };
    217          //  
    218          //  //Transmit array start address
    219          //  p_i2c_transmitData = (uint8_t *)LDC1614_CONFIG_FRAME;
    220          //  //Load transmit byte counter
    221          //  i2c_transmitCounter = sizeof LDC1614_CONFIG_FRAME;
    222          //  
    223          //  //Perform I2C write
    224          //  i2c_write(LDC1614_ADDRESS);
    225            LDC_SEND(CONFIG,0x2601);
   \   00000002   0xF242 0x6101      MOVW     R1,#+9729
   \   00000006   0x201A             MOVS     R0,#+26
   \   00000008   0x.... 0x....      BL       LDC_SEND
    226          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void LDC1614_init(void)
    229          {
   \                     LDC1614_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    230          //  
    231          //  static const uint8_t LDC1614_REF_COUNT_CH0_FRAME[3] =
    232          //  {
    233          //    REF_COUNT_CH0,	//REF_COUNT_CH0 register address
    234          //    0x04,			//MSB of REF_COUNT_CH0 (sets count to 1024)
    235          //    0x00			//LSB of REF_COUNT_CH0
    236          //  };
    237          //  
    238          //  static const uint8_t LDC1614_REF_COUNT_CH1_FRAME[3] =
    239          //  {
    240          //    REF_COUNT_CH1,	//REF_COUNT_CH1 register address
    241          //    0x04,			//MSB of REF_COUNT_CH1 (sets count to 1024)
    242          //    0x00			//LSB of REF_COUNT_CH1
    243          //  };
    244          //  
    245          //  static const uint8_t LDC1614_REF_COUNT_CH2_FRAME[3] =
    246          //  {
    247          //    REF_COUNT_CH2,	//REF_COUNT_CH2 register address
    248          //    0x04,			//MSB of REF_COUNT_CH2 (sets count to 1024)
    249          //    0x00			//LSB of REF_COUNT_CH2
    250          //  };
    251          //  
    252          //  static const uint8_t LDC1614_REF_COUNT_CH3_FRAME[3] =
    253          //  {
    254          //    REF_COUNT_CH3,	//REF_COUNT_CH3 register address
    255          //    0x04,			//MSB of REF_COUNT_CH3 (sets count to 1024)
    256          //    0x00			//LSB of REF_COUNT_CH3
    257          //  };
    258          //  
    259          //  static const uint8_t LDC1614_OFFSET_CH0_FRAME[3] =
    260          //  {
    261          //    OFFSET_CH0,		//OFFSET_CH0 register address
    262          //    0x00,			//MSB of OFFSET_CH0
    263          //    0x00			//LSB of OFFSET_CH0
    264          //  };
    265          //  
    266          //  static const uint8_t LDC1614_OFFSET_CH1_FRAME[3] =
    267          //  {
    268          //    OFFSET_CH1,		//OFFSET_CH1 register address
    269          //    0x00,			//MSB of OFFSET_CH1
    270          //    0x00			//LSB of OFFSET_CH1
    271          //  };
    272          //  
    273          //  static const uint8_t LDC1614_OFFSET_CH2_FRAME[3] =
    274          //  {
    275          //    OFFSET_CH2,		//OFFSET_CH2 register address
    276          //    0x00,			//MSB of OFFSET_CH2
    277          //    0x00			//LSB of OFFSET_CH2
    278          //  };
    279          //  
    280          //  static const uint8_t LDC1614_OFFSET_CH3_FRAME[3] =
    281          //  {
    282          //    OFFSET_CH3,		//OFFSET_CH3 register address
    283          //    0x00,			//MSB of OFFSET_CH3
    284          //    0x00			//LSB of OFFSET_CH3
    285          //  };
    286          //  
    287          //  static const uint8_t LDC1614_SETTLECOUNT_CH0_FRAME[3] =
    288          //  {
    289          //    SETTLECOUNT_CH0,	//SETTLECOUNT_CH0 register address
    290          //    0x00,				//MSB of SETTLECOUNT_CH0 (set settle count to 128)
    291          //    0x80				//LSB of SETTLECOUNT_CH0
    292          //  };
    293          //  
    294          //  static const uint8_t LDC1614_SETTLECOUNT_CH1_FRAME[3] =
    295          //  {
    296          //    SETTLECOUNT_CH1,	//SETTLECOUNT_CH1 register address
    297          //    0x00,				//MSB of SETTLECOUNT_CH1 (set settle count to 128)
    298          //    0x80				//LSB of SETTLECOUNT_CH1
    299          //  };
    300          //  
    301          //  static const uint8_t LDC1614_SETTLECOUNT_CH2_FRAME[3] =
    302          //  {
    303          //    SETTLECOUNT_CH2,	//SETTLECOUNT_CH2 register address
    304          //    0x00,				//MSB of SETTLECOUNT_CH2 (set settle count to 128)
    305          //    0x80				//LSB of SETTLECOUNT_CH2
    306          //  };
    307          //  
    308          //  static const uint8_t LDC1614_SETTLECOUNT_CH3_FRAME[3] =
    309          //  {
    310          //    SETTLECOUNT_CH3,	//SETTLECOUNT_CH3 register address
    311          //    0x00,				//MSB of SETTLECOUNT_CH3 (set settle count to 128)
    312          //    0x80				//LSB of SETTLECOUNT_CH3
    313          //  };
    314          //  
    315          //  static const uint8_t LDC1614_CLOCK_DIVIDERS_CH0_FRAME[3] =
    316          //  {
    317          //    CLOCK_DIVIDERS_CH0,	//CLOCK_DIVIDERS_CH0 register address
    318          //    0x80,				//MSB of CLOCK_DIVIDERS_CH0 (set F_IN divider = 8)
    319          //    0x01				//LSB of CLOCK_DIVIDERS_CH0 (set F_REF divider = 1)
    320          //  };
    321          //  
    322          //  static const uint8_t LDC1614_CLOCK_DIVIDERS_CH1_FRAME[3] =
    323          //  {
    324          //    CLOCK_DIVIDERS_CH1,	//CLOCK_DIVIDERS_CH1 register address
    325          //    0x80,				//MSB of CLOCK_DIVIDERS_CH1 (set F_IN divider = 8)
    326          //    0x01				//LSB of CLOCK_DIVIDERS_CH1 (set F_REF divider = 1)
    327          //  };
    328          //  
    329          //  static const uint8_t LDC1614_CLOCK_DIVIDERS_CH2_FRAME[3] =
    330          //  {
    331          //    CLOCK_DIVIDERS_CH2,	//CLOCK_DIVIDERS_CH2 register address
    332          //    0x20,				//MSB of CLOCK_DIVIDERS_CH2 (set F_IN divider = 2)
    333          //    0x01				//LSB of CLOCK_DIVIDERS_CH2 (set F_REF divider = 1)
    334          //  };
    335          //  
    336          //  static const uint8_t LDC1614_CLOCK_DIVIDERS_CH3_FRAME[3] =
    337          //  {
    338          //    CLOCK_DIVIDERS_CH3,	//CLOCK_DIVIDERS_CH3 register address
    339          //    0x80,				//MSB of CLOCK_DIVIDERS_CH3 (set F_IN divider = 8)
    340          //    0x01				//LSB of CLOCK_DIVIDERS_CH3 (set F_REF divider = 1)
    341          //  };
    342          //  
    343          //  static const uint8_t LDC1614_ERROR_CONFIG_FRAME[3] =
    344          //  {
    345          //    ERROR_CONFIG,	//ERROR_CONFIG register address
    346          //    0xF8,			//MSB of ERROR_CONFIG (sets error reporting in DATA register for under/over-range, WDT, Amplitude high/low)
    347          //    0x01			//LSB of ERROR_CONFIG (sets Data Ready flag to INTB)
    348          //  };
    349          //  
    350          //  static const uint8_t LDC1614_CONFIG_FRAME[3] =
    351          //  {
    352          //    CONFIG,		//CONFIG register address
    353          //    0x26,		//MSB of CONFIG (sets sleep mode, f_ref = CLKIN, auto-amp. disabled)
    354          //    0x01		//LSB of CONFIG
    355          //  };
    356          //  
    357          //  static const uint8_t LDC1614_MUX_CONFIG_FRAME[3] =
    358          //  {
    359          //    MUX_CONFIG,	//MUX_CONFIG register address
    360          //    0xC2,		//MSB of MUX_CONFIG (set to sequential scan on Ch0-3)
    361          //    0x07		//LSB of MUX_CONFIG (sets de-glitch filter to 33 MHz)
    362          //  };
    363          //  
    364          //  static const uint8_t LDC1614_DRIVE_CURRENT_CH0_FRAME[3] =
    365          //  {
    366          //    DRIVE_CURRENT_CH0,	//DRIVE_CURRENT_CH0 register address
    367          //    0x00,				//MSB of DRIVE_CURRENT_CH0
    368          //    0x00				//LSB of DRIVE_CURRENT_CH0
    369          //  };
    370          //  
    371          //  static const uint8_t LDC1614_DRIVE_CURRENT_CH1_FRAME[3] =
    372          //  {
    373          //    DRIVE_CURRENT_CH1,	//DRIVE_CURRENT_CH1 register address
    374          //    0x00,				//MSB of DRIVE_CURRENT_CH1
    375          //    0x00				//LSB of DRIVE_CURRENT_CH1
    376          //  };
    377          //  
    378          //  static const uint8_t LDC1614_DRIVE_CURRENT_CH2_FRAME[3] =
    379          //  {
    380          //    DRIVE_CURRENT_CH2,	//DRIVE_CURRENT_CH2 register address
    381          //    0x00,				//MSB of DRIVE_CURRENT_CH2
    382          //    0x00				//LSB of DRIVE_CURRENT_CH2
    383          //  };
    384          //  
    385          //  static const uint8_t LDC1614_DRIVE_CURRENT_CH3_FRAME[3] =
    386          //  {
    387          //    DRIVE_CURRENT_CH3,	//DRIVE_CURRENT_CH3 register address
    388          //    0x00,				//MSB of DRIVE_CURRENT_CH3
    389          //    0x00				//LSB of DRIVE_CURRENT_CH3
    390          //  };
    391            
    392          //  //Transmit array start address
    393          //  p_i2c_transmitData = (uint8_t *)LDC1614_REF_COUNT_CH0_FRAME;
    394          //  //Load transmit byte counter
    395          //  i2c_transmitCounter = sizeof LDC1614_REF_COUNT_CH0_FRAME;
    396          //  //Perform I2C write
    397          //  i2c_write(LDC1614_ADDRESS);
    398            
    399            LDC_SEND(REF_COUNT_CH0,0x0400);
   \   00000002   0xF44F 0x6180      MOV      R1,#+1024
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       LDC_SEND
    400            
    401          //  //Transmit array start address
    402          //  p_i2c_transmitData = (uint8_t *)LDC1614_REF_COUNT_CH1_FRAME;
    403          //  //Load transmit byte counter
    404          //  i2c_transmitCounter = sizeof LDC1614_REF_COUNT_CH1_FRAME;
    405          //  //Perform I2C write
    406          //  i2c_write(LDC1614_ADDRESS);
    407            
    408            LDC_SEND(REF_COUNT_CH1,0x0400);
   \   0000000C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000010   0x2009             MOVS     R0,#+9
   \   00000012   0x.... 0x....      BL       LDC_SEND
    409            
    410          //  //Transmit array start address
    411          //  p_i2c_transmitData = (uint8_t *)LDC1614_REF_COUNT_CH2_FRAME;
    412          //  //Load transmit byte counter
    413          //  i2c_transmitCounter = sizeof LDC1614_REF_COUNT_CH2_FRAME;
    414          //  //Perform I2C write
    415          //  i2c_write(LDC1614_ADDRESS);
    416            
    417            LDC_SEND(REF_COUNT_CH2,0x0400);
   \   00000016   0xF44F 0x6180      MOV      R1,#+1024
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       LDC_SEND
    418            
    419          //  //Transmit array start address
    420          //  p_i2c_transmitData = (uint8_t *)LDC1614_REF_COUNT_CH3_FRAME;
    421          //  //Load transmit byte counter
    422          //  i2c_transmitCounter = sizeof LDC1614_REF_COUNT_CH3_FRAME;
    423          //  //Perform I2C write
    424          //  i2c_write(LDC1614_ADDRESS);
    425            
    426            LDC_SEND(REF_COUNT_CH3,0x0400);
   \   00000020   0xF44F 0x6180      MOV      R1,#+1024
   \   00000024   0x200B             MOVS     R0,#+11
   \   00000026   0x.... 0x....      BL       LDC_SEND
    427            
    428          //  //Transmit array start address
    429          //  p_i2c_transmitData = (uint8_t *)LDC1614_OFFSET_CH0_FRAME;
    430          //  //Load transmit byte counter
    431          //  i2c_transmitCounter = sizeof LDC1614_OFFSET_CH0_FRAME;
    432          //  //Perform I2C write
    433          //  i2c_write(LDC1614_ADDRESS);
    434            
    435            LDC_SEND(OFFSET_CH0,0x0000);
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x200C             MOVS     R0,#+12
   \   0000002E   0x.... 0x....      BL       LDC_SEND
    436            
    437          //  //Transmit array start address
    438          //  p_i2c_transmitData = (uint8_t *)LDC1614_OFFSET_CH1_FRAME;
    439          //  //Load transmit byte counter
    440          //  i2c_transmitCounter = sizeof LDC1614_OFFSET_CH1_FRAME;
    441          //  //Perform I2C write
    442          //  i2c_write(LDC1614_ADDRESS);
    443            
    444            LDC_SEND(OFFSET_CH1,0x0000);
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x200D             MOVS     R0,#+13
   \   00000036   0x.... 0x....      BL       LDC_SEND
    445            
    446              
    447          //  //Transmit array start address
    448          //  p_i2c_transmitData = (uint8_t *)LDC1614_OFFSET_CH2_FRAME;
    449          //  //Load transmit byte counter
    450          //  i2c_transmitCounter = sizeof LDC1614_OFFSET_CH2_FRAME;
    451          //  //Perform I2C write
    452          //  i2c_write(LDC1614_ADDRESS);
    453            
    454            LDC_SEND(OFFSET_CH2,0x0000);
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x200E             MOVS     R0,#+14
   \   0000003E   0x.... 0x....      BL       LDC_SEND
    455            
    456          //  //Transmit array start address
    457          //  p_i2c_transmitData = (uint8_t *)LDC1614_OFFSET_CH3_FRAME;
    458          //  //Load transmit byte counter
    459          //  i2c_transmitCounter = sizeof LDC1614_OFFSET_CH3_FRAME;
    460          //  //Perform I2C write
    461          //  i2c_write(LDC1614_ADDRESS);
    462            
    463            LDC_SEND(OFFSET_CH3,0x0000);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x200F             MOVS     R0,#+15
   \   00000046   0x.... 0x....      BL       LDC_SEND
    464            
    465          //  //Transmit array start address
    466          //  p_i2c_transmitData = (uint8_t *)LDC1614_SETTLECOUNT_CH0_FRAME;
    467          //  //Load transmit byte counter
    468          //  i2c_transmitCounter = sizeof LDC1614_SETTLECOUNT_CH0_FRAME;
    469          //  //Perform I2C write
    470          //  i2c_write(LDC1614_ADDRESS);
    471            
    472            LDC_SEND(SETTLECOUNT_CH0,0x0080);
   \   0000004A   0x2180             MOVS     R1,#+128
   \   0000004C   0x2010             MOVS     R0,#+16
   \   0000004E   0x.... 0x....      BL       LDC_SEND
    473            
    474          //  //Transmit array start address
    475          //  p_i2c_transmitData = (uint8_t *)LDC1614_SETTLECOUNT_CH1_FRAME;
    476          //  //Load transmit byte counter
    477          //  i2c_transmitCounter = sizeof LDC1614_SETTLECOUNT_CH1_FRAME;
    478          //  //Perform I2C write
    479          //  i2c_write(LDC1614_ADDRESS);
    480            
    481            LDC_SEND(SETTLECOUNT_CH1,0x0080);
   \   00000052   0x2180             MOVS     R1,#+128
   \   00000054   0x2011             MOVS     R0,#+17
   \   00000056   0x.... 0x....      BL       LDC_SEND
    482            
    483          //  //Transmit array start address
    484          //  p_i2c_transmitData = (uint8_t *)LDC1614_SETTLECOUNT_CH2_FRAME;
    485          //  //Load transmit byte counter
    486          //  i2c_transmitCounter = sizeof LDC1614_SETTLECOUNT_CH2_FRAME;
    487          //  //Perform I2C write
    488          //  i2c_write(LDC1614_ADDRESS);
    489            
    490            LDC_SEND(SETTLECOUNT_CH2,0x0080);
   \   0000005A   0x2180             MOVS     R1,#+128
   \   0000005C   0x2012             MOVS     R0,#+18
   \   0000005E   0x.... 0x....      BL       LDC_SEND
    491            
    492          //  //Transmit array start address
    493          //  p_i2c_transmitData = (uint8_t *)LDC1614_SETTLECOUNT_CH3_FRAME;
    494          //  //Load transmit byte counter
    495          //  i2c_transmitCounter = sizeof LDC1614_SETTLECOUNT_CH3_FRAME;
    496          //  //Perform I2C write
    497          //  i2c_write(LDC1614_ADDRESS);
    498            
    499            LDC_SEND(SETTLECOUNT_CH3,0x0080);
   \   00000062   0x2180             MOVS     R1,#+128
   \   00000064   0x2013             MOVS     R0,#+19
   \   00000066   0x.... 0x....      BL       LDC_SEND
    500            
    501          //  //Transmit array start address
    502          //  p_i2c_transmitData = (uint8_t *)LDC1614_CLOCK_DIVIDERS_CH0_FRAME;
    503          //  //Load transmit byte counter
    504          //  i2c_transmitCounter = sizeof LDC1614_CLOCK_DIVIDERS_CH0_FRAME;
    505          //  //Perform I2C write
    506          //  i2c_write(LDC1614_ADDRESS);
    507            
    508            LDC_SEND(CLOCK_DIVIDERS_CH0,0x8001);
   \   0000006A   0xF248 0x0101      MOVW     R1,#+32769
   \   0000006E   0x2014             MOVS     R0,#+20
   \   00000070   0x.... 0x....      BL       LDC_SEND
    509            
    510          //  //Transmit array start address
    511          //  p_i2c_transmitData = (uint8_t *)LDC1614_CLOCK_DIVIDERS_CH1_FRAME;
    512          //  //Load transmit byte counter
    513          //  i2c_transmitCounter = sizeof LDC1614_CLOCK_DIVIDERS_CH1_FRAME;
    514          //  //Perform I2C write
    515          //  i2c_write(LDC1614_ADDRESS);
    516            
    517            LDC_SEND(CLOCK_DIVIDERS_CH1,0x8001);
   \   00000074   0xF248 0x0101      MOVW     R1,#+32769
   \   00000078   0x2015             MOVS     R0,#+21
   \   0000007A   0x.... 0x....      BL       LDC_SEND
    518            
    519          //  //Transmit array start address
    520          //  p_i2c_transmitData = (uint8_t *)LDC1614_CLOCK_DIVIDERS_CH2_FRAME;
    521          //  //Load transmit byte counter
    522          //  i2c_transmitCounter = sizeof LDC1614_CLOCK_DIVIDERS_CH2_FRAME;
    523          //  //Perform I2C write
    524          //  i2c_write(LDC1614_ADDRESS);
    525            
    526            LDC_SEND(CLOCK_DIVIDERS_CH2,0x8001);/*attention*/
   \   0000007E   0xF248 0x0101      MOVW     R1,#+32769
   \   00000082   0x2016             MOVS     R0,#+22
   \   00000084   0x.... 0x....      BL       LDC_SEND
    527            
    528          //  //Transmit array start address
    529          //  p_i2c_transmitData = (uint8_t *)LDC1614_CLOCK_DIVIDERS_CH3_FRAME;
    530          //  //Load transmit byte counter
    531          //  i2c_transmitCounter = sizeof LDC1614_CLOCK_DIVIDERS_CH3_FRAME;
    532          //  //Perform I2C write
    533          //  i2c_write(LDC1614_ADDRESS);
    534            
    535            LDC_SEND(CLOCK_DIVIDERS_CH3,0x8001);
   \   00000088   0xF248 0x0101      MOVW     R1,#+32769
   \   0000008C   0x2017             MOVS     R0,#+23
   \   0000008E   0x.... 0x....      BL       LDC_SEND
    536            
    537          //  //Transmit array start address
    538          //  p_i2c_transmitData = (uint8_t *)LDC1614_ERROR_CONFIG_FRAME;
    539          //  //Load transmit byte counter
    540          //  i2c_transmitCounter = sizeof LDC1614_ERROR_CONFIG_FRAME;
    541          //  //Perform I2C write
    542          //  i2c_write(LDC1614_ADDRESS);
    543            
    544            LDC_SEND(ERROR_CONFIG,0xF801);
   \   00000092   0xF64F 0x0101      MOVW     R1,#+63489
   \   00000096   0x2019             MOVS     R0,#+25
   \   00000098   0x.... 0x....      BL       LDC_SEND
    545            
    546          //  //Transmit array start address
    547          //  p_i2c_transmitData = (uint8_t *)LDC1614_CONFIG_FRAME;
    548          //  //Load transmit byte counter
    549          //  i2c_transmitCounter = sizeof LDC1614_CONFIG_FRAME;
    550          //  //Perform I2C write
    551          //  i2c_write(LDC1614_ADDRESS);
    552            
    553            LDC_SEND(CONFIG,0x2601);
   \   0000009C   0xF242 0x6101      MOVW     R1,#+9729
   \   000000A0   0x201A             MOVS     R0,#+26
   \   000000A2   0x.... 0x....      BL       LDC_SEND
    554            
    555          //  //Transmit array start address
    556          //  p_i2c_transmitData = (uint8_t *)LDC1614_MUX_CONFIG_FRAME;
    557          //  //Load transmit byte counter
    558          //  i2c_transmitCounter = sizeof LDC1614_MUX_CONFIG_FRAME;
    559          //  //Perform I2C write
    560          //  i2c_write(LDC1614_ADDRESS);
    561            
    562            LDC_SEND(MUX_CONFIG,0xC207);
   \   000000A6   0xF24C 0x2107      MOVW     R1,#+49671
   \   000000AA   0x201B             MOVS     R0,#+27
   \   000000AC   0x.... 0x....      BL       LDC_SEND
    563            
    564          //  //Transmit array start address
    565          //  p_i2c_transmitData = (uint8_t *)LDC1614_DRIVE_CURRENT_CH0_FRAME;
    566          //  //Load transmit byte counter
    567          //  i2c_transmitCounter = sizeof LDC1614_DRIVE_CURRENT_CH0_FRAME;
    568          //  //Perform I2C write
    569          //  i2c_write(LDC1614_ADDRESS);
    570            
    571            LDC_SEND(DRIVE_CURRENT_CH0,0x0000);
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x201E             MOVS     R0,#+30
   \   000000B4   0x.... 0x....      BL       LDC_SEND
    572            
    573          //  //Transmit array start address
    574          //  p_i2c_transmitData = (uint8_t *)LDC1614_DRIVE_CURRENT_CH1_FRAME;
    575          //  //Load transmit byte counter
    576          //  i2c_transmitCounter = sizeof LDC1614_DRIVE_CURRENT_CH1_FRAME;
    577          //  //Perform I2C write
    578          //  i2c_write(LDC1614_ADDRESS);
    579            
    580            LDC_SEND(DRIVE_CURRENT_CH1,0x0000);
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x201F             MOVS     R0,#+31
   \   000000BC   0x.... 0x....      BL       LDC_SEND
    581            
    582          //  //Transmit array start address
    583          //  p_i2c_transmitData = (uint8_t *)LDC1614_DRIVE_CURRENT_CH2_FRAME;
    584          //  //Load transmit byte counter
    585          //  i2c_transmitCounter = sizeof LDC1614_DRIVE_CURRENT_CH2_FRAME;
    586          //  //Perform I2C write
    587          //  i2c_write(LDC1614_ADDRESS);
    588            
    589            LDC_SEND(DRIVE_CURRENT_CH2,0x0000);
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x2020             MOVS     R0,#+32
   \   000000C4   0x.... 0x....      BL       LDC_SEND
    590            
    591          //  //Transmit array start address
    592          //  p_i2c_transmitData = (uint8_t *)LDC1614_DRIVE_CURRENT_CH3_FRAME;
    593          //  //Load transmit byte counter
    594          //  i2c_transmitCounter = sizeof LDC1614_DRIVE_CURRENT_CH3_FRAME;
    595          //  //Perform I2C write
    596          //  i2c_write(LDC1614_ADDRESS);
    597            
    598            LDC_SEND(DRIVE_CURRENT_CH3,0x0000);
   \   000000C8   0x2100             MOVS     R1,#+0
   \   000000CA   0x2021             MOVS     R0,#+33
   \   000000CC   0x.... 0x....      BL       LDC_SEND
    599            
    600          }
   \   000000D0   0xBD01             POP      {R0,PC}          ;; return
    601          

   \                                 In section .text, align 2, keep-with-next
    602          void LDC1614_reset(void)
    603          {
   \                     LDC1614_reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    604            
    605          //  static const uint8_t LDC1614_RESET_DEV_FRAME[3] =
    606          //  {
    607          //    RESET_DEV,	//RESET_DEV register address
    608          //    0x80,		//MSB of RESET_DEV (reset device)
    609          //    0x00		//LSB of RESET_DEV
    610          //  };
    611            
    612          //  //Transmit array start address
    613          //  p_i2c_transmitData = (uint8_t *)LDC1614_RESET_DEV_FRAME;
    614          //  //Load transmit byte counter
    615          //  i2c_transmitCounter = sizeof LDC1614_RESET_DEV_FRAME;
    616          //  //Perform I2C write
    617          //  i2c_write(LDC1614_ADDRESS);
    618            LDC_SEND(RESET_DEV,0x8000);
   \   00000002   0xF44F 0x4100      MOV      R1,#+32768
   \   00000006   0x201C             MOVS     R0,#+28
   \   00000008   0x.... 0x....      BL       LDC_SEND
    619          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    620          

   \                                 In section .text, align 2, keep-with-next
    621          void LDC1614_start_meas(void)
    622          {
   \                     LDC1614_start_meas: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    623            
    624            //Set LDC_INTB as input pin
    625          //  GPIO_setAsInputPinWithPullUpResistor(
    626          //                                       LDC_INTB_PORT,
    627          //                                       LDC_INTB
    628          //                                         );
    629            
    630            //Enable interrupt on LDC_INTB pin
    631          //  GPIO_enableInterrupt(
    632          //                       LDC_INTB_PORT,
    633          //                       LDC_INTB
    634          //                         );
    635            
    636            //Set LDC_INTB interrupt to be high to low transition
    637          //  GPIO_interruptEdgeSelect(
    638          //                           LDC_INTB_PORT,
    639          //                           LDC_INTB,
    640          //                           GPIO_HIGH_TO_LOW_TRANSITION
    641          //                             );
    642            
    643            //Clear LDC_INTB interrupt
    644          //  GPIO_clearInterruptFlag(
    645          //                          LDC_INTB_PORT,
    646          //                          LDC_INTB
    647          //                            );
    648            
    649          //  static const uint8_t LDC1614_CONFIG_FRAME[3] =
    650          //  {
    651          //    CONFIG,	//CONFIG register address
    652          //    0x06,	//MSB of CONFIG (exit sleep mode, begin conversions)
    653          //    0x01	//LSB of CONFIG
    654          //  };
    655            
    656          //  //Transmit array start address
    657          //  p_i2c_transmitData = (uint8_t *)LDC1614_CONFIG_FRAME;
    658          //  //Load transmit byte counter
    659          //  i2c_transmitCounter = sizeof LDC1614_CONFIG_FRAME;
    660          //  //Perform I2C write
    661          //  i2c_write(LDC1614_ADDRESS);
    662            LDC_SEND(CONFIG,0x0601);
   \   00000002   0xF240 0x6101      MOVW     R1,#+1537
   \   00000006   0x201A             MOVS     R0,#+26
   \   00000008   0x.... 0x....      BL       LDC_SEND
    663          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    664          
    665          
    666          

   \                                 In section .text, align 2, keep-with-next
    667          void LDC1614_read_meas(void)
    668          {
   \                     LDC1614_read_meas: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    669            uint16 temp = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    670          //  static const uint8_t LDC1614_DATA_MSB_CH0_FRAME[1] =
    671          //  {
    672          //    DATA_MSB_CH0,	//DATA_MSB_CH0 register address
    673          //  };
    674          //  
    675          //  static const uint8_t LDC1614_DATA_LSB_CH0_FRAME[1] =
    676          //  {
    677          //    DATA_LSB_CH0,	//DATA_LSB_CH0 register address
    678          //  };
    679          //  
    680          //  static const uint8_t LDC1614_DATA_MSB_CH1_FRAME[1] =
    681          //  {
    682          //    DATA_MSB_CH1,	//DATA_MSB_CH1 register address
    683          //  };
    684          //  
    685          //  static const uint8_t LDC1614_DATA_LSB_CH1_FRAME[1] =
    686          //  {
    687          //    DATA_LSB_CH1,	//DATA_LSB_CH1 register address
    688          //  };
    689          //  
    690          //  static const uint8_t LDC1614_DATA_MSB_CH2_FRAME[1] =
    691          //  {
    692          //    DATA_MSB_CH2,	//DATA_MSB_CH2 register address
    693          //  };
    694          //  
    695          //  static const uint8_t LDC1614_DATA_LSB_CH2_FRAME[1] =
    696          //  {
    697          //    DATA_LSB_CH2,	//DATA_LSB_CH2 register address
    698          //  };
    699          //  
    700          //  static const uint8_t LDC1614_DATA_MSB_CH3_FRAME[1] =
    701          //  {
    702          //    DATA_MSB_CH3,	//DATA_MSB_CH3 register address
    703          //  };
    704          //  
    705          //  static const uint8_t LDC1614_DATA_LSB_CH3_FRAME[1] =
    706          //  {
    707          //    DATA_LSB_CH3,	//DATA_LSB_CH3 register address
    708          //  };
    709            
    710          //  //Transmit array start address
    711          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_MSB_CH0_FRAME;
    712          //  //Load transmit byte counter
    713          //  i2c_transmitCounter = sizeof LDC1614_DATA_MSB_CH0_FRAME;
    714          //  //Perform I2C write
    715          //  i2c_write(LDC1614_ADDRESS);
    716          //  
    717          //  //Receive array start address
    718          //  p_i2c_receivedData = (uint8_t *)LDC_CH0_MSB_BUF;
    719          //  //Read CH0 MSB data from LDC1614
    720          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH0_MSB_BUF);
    721            
    722            temp = LDC_READ(DATA_MSB_CH0);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       LDC_READ
   \   0000000A   0x0004             MOVS     R4,R0
    723            LDC_data[0] = ( (0x0FFF & temp) << 16 );
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   00000010   0x0D00             LSRS     R0,R0,#+20
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000018   0x6008             STR      R0,[R1, #+0]
    724            LDC_flag[0] = ( 0xF000 & temp ) >> 8;
   \   0000001A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001C   0x1220             ASRS     R0,R4,#+8
   \   0000001E   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    725            
    726          //  //Transmit array start address
    727          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_LSB_CH0_FRAME;
    728          //  //Load transmit byte counter
    729          //  i2c_transmitCounter = sizeof LDC1614_DATA_LSB_CH0_FRAME;
    730          //  //Perform I2C write
    731          //  i2c_write(LDC1614_ADDRESS);
    732          //  
    733          //  //Receive array start address
    734          //  p_i2c_receivedData = (uint8_t *)LDC_CH0_LSB_BUF;
    735          //  //Read CH0 LSB data from LDC1614
    736          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH0_LSB_BUF);
    737            
    738            LDC_data[0] |= LDC_READ(DATA_LSB_CH0) ;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       LDC_READ
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x4308             ORRS     R0,R0,R1
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable3
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    739            
    740          //  //Transmit array start address
    741          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_MSB_CH1_FRAME;
    742          //  //Load transmit byte counter
    743          //  i2c_transmitCounter = sizeof LDC1614_DATA_MSB_CH1_FRAME;
    744          //  //Perform I2C write
    745          //  i2c_write(LDC1614_ADDRESS);
    746          //  
    747          //  //Receive array start address
    748          //  p_i2c_receivedData = (uint8_t *)LDC_CH1_MSB_BUF;
    749          //  //Read CH1 MSB data from LDC1614
    750          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH1_MSB_BUF);
    751            
    752            temp = LDC_READ(DATA_MSB_CH1);
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       LDC_READ
   \   00000044   0x0004             MOVS     R4,R0
    753            LDC_data[1] = ( ( 0x0FFF & temp ) << 16 );
   \   00000046   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000048   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   0000004A   0x0D00             LSRS     R0,R0,#+20
   \   0000004C   0x0400             LSLS     R0,R0,#+16
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000052   0x6048             STR      R0,[R1, #+4]
    754            LDC_flag[1] = ( 0xF000 & temp ) >> 8;
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x1220             ASRS     R0,R4,#+8
   \   00000058   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000060   0x7048             STRB     R0,[R1, #+1]
    755            
    756          //  //Transmit array start address
    757          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_LSB_CH1_FRAME;
    758          //  //Load transmit byte counter
    759          //  i2c_transmitCounter = sizeof LDC1614_DATA_LSB_CH1_FRAME;
    760          //  //Perform I2C write
    761          //  i2c_write(LDC1614_ADDRESS);
    762          //  
    763          //  //Receive array start address
    764          //  p_i2c_receivedData = (uint8_t *)LDC_CH1_LSB_BUF;
    765          //  //Read CH1 LSB data from LDC1614
    766          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH1_LSB_BUF);
    767            
    768            LDC_data[1] |= LDC_READ(DATA_LSB_CH1) ;
   \   00000062   0x2003             MOVS     R0,#+3
   \   00000064   0x.... 0x....      BL       LDC_READ
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable3
   \   0000006C   0x6849             LDR      R1,[R1, #+4]
   \   0000006E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000070   0x4308             ORRS     R0,R0,R1
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000076   0x6048             STR      R0,[R1, #+4]
    769            
    770          //  //Transmit array start address
    771          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_MSB_CH2_FRAME;
    772          //  //Load transmit byte counter
    773          //  i2c_transmitCounter = sizeof LDC1614_DATA_MSB_CH2_FRAME;
    774          //  //Perform I2C write
    775          //  i2c_write(LDC1614_ADDRESS);
    776          //  
    777          //  //Receive array start address
    778          //  p_i2c_receivedData = (uint8_t *)LDC_CH2_MSB_BUF;
    779          //  //Read CH2 MSB data from LDC1614
    780          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH2_MSB_BUF);
    781            
    782            temp = LDC_READ(DATA_MSB_CH2);
   \   00000078   0x2004             MOVS     R0,#+4
   \   0000007A   0x.... 0x....      BL       LDC_READ
   \   0000007E   0x0004             MOVS     R4,R0
    783            LDC_data[2] = ( 0x0FFF & temp ) << 16 ;
   \   00000080   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000082   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   00000084   0x0D00             LSRS     R0,R0,#+20
   \   00000086   0x0400             LSLS     R0,R0,#+16
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable3
   \   0000008C   0x6088             STR      R0,[R1, #+8]
    784            LDC_flag[2] = ( 0xF000 & temp ) >> 8;
   \   0000008E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000090   0x1220             ASRS     R0,R4,#+8
   \   00000092   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   0000009A   0x7088             STRB     R0,[R1, #+2]
    785          //  //Transmit array start address
    786          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_LSB_CH2_FRAME;
    787          //  //Load transmit byte counter
    788          //  i2c_transmitCounter = sizeof LDC1614_DATA_LSB_CH2_FRAME;
    789          //  //Perform I2C write
    790          //  i2c_write(LDC1614_ADDRESS);
    791          //  
    792          //  //Receive array start address
    793          //  p_i2c_receivedData = (uint8_t *)LDC_CH2_LSB_BUF;
    794          //  //Read CH2 LSB data from LDC1614
    795          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH2_LSB_BUF);
    796            
    797            LDC_data[2] |= LDC_READ(DATA_LSB_CH2) ;
   \   0000009C   0x2005             MOVS     R0,#+5
   \   0000009E   0x.... 0x....      BL       LDC_READ
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable3
   \   000000A6   0x6889             LDR      R1,[R1, #+8]
   \   000000A8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AA   0x4308             ORRS     R0,R0,R1
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable3
   \   000000B0   0x6088             STR      R0,[R1, #+8]
    798            push(0,(LDC_data[2]>>5) &0x7fff );
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable3
   \   000000B6   0x6880             LDR      R0,[R0, #+8]
   \   000000B8   0x0940             LSRS     R0,R0,#+5
   \   000000BA   0x0441             LSLS     R1,R0,#+17       ;; ZeroExtS R1,R0,#+17,#+17
   \   000000BC   0x0C49             LSRS     R1,R1,#+17
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      BL       `push`
    799          //  //Transmit array start address
    800          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_MSB_CH3_FRAME;
    801          //  //Load transmit byte counter
    802          //  i2c_transmitCounter = sizeof LDC1614_DATA_MSB_CH3_FRAME;
    803          //  //Perform I2C write
    804          //  i2c_write(LDC1614_ADDRESS);
    805          //  
    806          //  //Receive array start address
    807          //  p_i2c_receivedData = (uint8_t *)LDC_CH3_MSB_BUF;
    808          //  //Read CH3 MSB data from LDC1614
    809          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH3_MSB_BUF);
    810            
    811            temp = LDC_READ(DATA_MSB_CH3);
   \   000000C4   0x2006             MOVS     R0,#+6
   \   000000C6   0x.... 0x....      BL       LDC_READ
   \   000000CA   0x0004             MOVS     R4,R0
    812            LDC_data[3] = ( 0x0FFF & temp ) << 16 ;
   \   000000CC   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000CE   0x0520             LSLS     R0,R4,#+20       ;; ZeroExtS R0,R4,#+20,#+20
   \   000000D0   0x0D00             LSRS     R0,R0,#+20
   \   000000D2   0x0400             LSLS     R0,R0,#+16
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable3
   \   000000D8   0x60C8             STR      R0,[R1, #+12]
    813            LDC_flag[3] = ( 0xF000 & temp ) >> 8 ;
   \   000000DA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000DC   0x1220             ASRS     R0,R4,#+8
   \   000000DE   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   000000E6   0x70C8             STRB     R0,[R1, #+3]
    814            
    815          //  //Transmit array start address
    816          //  p_i2c_transmitData = (uint8_t *)LDC1614_DATA_LSB_CH3_FRAME;
    817          //  //Load transmit byte counter
    818          //  i2c_transmitCounter = sizeof LDC1614_DATA_LSB_CH3_FRAME;
    819          //  //Perform I2C write
    820          //  i2c_write(LDC1614_ADDRESS);
    821          //  
    822          //  //Receive array start address
    823          //  p_i2c_receivedData = (uint8_t *)LDC_CH3_LSB_BUF;
    824          //  //Read CH3 LSB data from LDC1614
    825          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_CH3_LSB_BUF);
    826            
    827            LDC_data[3] |= LDC_READ(DATA_LSB_CH3) ;
   \   000000E8   0x2007             MOVS     R0,#+7
   \   000000EA   0x.... 0x....      BL       LDC_READ
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable3
   \   000000F2   0x68C9             LDR      R1,[R1, #+12]
   \   000000F4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F6   0x4308             ORRS     R0,R0,R1
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable3
   \   000000FC   0x60C8             STR      R0,[R1, #+12]
    828            
    829          //  //Separate LDC1614 CH0 Data and Error Flags
    830          //  LDC_CH0_DATA = (
    831          //                  (0x0FFFFFFF) & 	//Mask error flags
    832          //                    (((uint32_t)LDC_CH0_MSB_BUF[0] << 24) |
    833          //                     ((uint32_t)LDC_CH0_MSB_BUF[1] << 16) |
    834          //                       ((uint32_t)LDC_CH0_LSB_BUF[0] << 8) |
    835          //                         ((uint32_t)LDC_CH0_LSB_BUF[1] << 0))
    836          //                      );
    837            
    838             /*flag of each chn*/
    839          //  //mask upper 4 bits of data, keep error flags
    840          //  LDC_CH0_ERRORS = (0xF0 & LDC_CH0_MSB_BUF[0]);
    841            
    842          //  //Separate LDC1614 CH1 Data and Error Flags
    843          //  LDC_CH1_DATA = (
    844          //                  (0x0FFFFFFF) & 	//Mask error flags
    845          //                    (((uint32_t)LDC_CH1_MSB_BUF[0] << 24) |
    846          //                     ((uint32_t)LDC_CH1_MSB_BUF[1] << 16) |
    847          //                       ((uint32_t)LDC_CH1_LSB_BUF[0] << 8) |
    848          //                         ((uint32_t)LDC_CH1_LSB_BUF[1] << 0))
    849          //                      );
    850           
    851          //  //mask upper 4 bits of data, keep error flags
    852          //  LDC_CH1_ERRORS = (0xF0 & LDC_CH1_MSB_BUF[0]);
    853            
    854          //  //Separate LDC1614 CH2 Data and Error Flags
    855          //  LDC_CH2_DATA = (
    856          //                  (0x0FFFFFFF) & 	//Mask error flags
    857          //                    (((uint32_t)LDC_CH2_MSB_BUF[0] << 24) |
    858          //                     ((uint32_t)LDC_CH2_MSB_BUF[1] << 16) |
    859          //                       ((uint32_t)LDC_CH2_LSB_BUF[0] << 8) |
    860          //                         ((uint32_t)LDC_CH2_LSB_BUF[1] << 0))
    861          //                      );
    862            
    863            
    864          //  //mask upper 4 bits of data, keep error flags
    865          //  LDC_CH2_ERRORS = (0xF0 & LDC_CH2_MSB_BUF[0]);
    866            
    867          //  //Separate LDC1614 CH3 Data and Error Flags
    868          //  LDC_CH3_DATA = (
    869          //                  (0x0FFFFFFF) & 	//Mask error flags
    870          //                    (((uint32_t)LDC_CH3_MSB_BUF[0] << 24) |
    871          //                     ((uint32_t)LDC_CH3_MSB_BUF[1] << 16) |
    872          //                       ((uint32_t)LDC_CH3_LSB_BUF[0] << 8) |
    873          //                         ((uint32_t)LDC_CH3_LSB_BUF[1] << 0))
    874          //                      );
    875            
    876            
    877          //  //mask upper 4 bits of data, keep error flags
    878          //  LDC_CH3_ERRORS = (0xF0 & LDC_CH3_MSB_BUF[0]);
    879            
    880          //  //Run Button Press Algorithm
    881          //  LDC1614_button_press_IIR_algorithm();
    882            
    883            //Check STATUS register, clears INTB
    884            LDC1614_status();
   \   000000FE   0x.... 0x....      BL       LDC1614_status
    885            
    886          }
   \   00000102   0xBD10             POP      {R4,PC}          ;; return
    887          

   \                                 In section .text, align 2, keep-with-next
    888          void LDC1614_status(void)
    889          {
   \                     LDC1614_status: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    890            
    891          //  static const uint8_t LDC1614_STATUS_FRAME[1] =
    892          //  {
    893          //    0x18,	//STATUS register address
    894          //  };
    895            
    896          //  //Transmit array start address
    897          //  p_i2c_transmitData = (uint8_t *)LDC1614_STATUS_FRAME;
    898          //  //Load transmit byte counter
    899          //  i2c_transmitCounter = sizeof LDC1614_STATUS_FRAME;
    900          //  //Perform I2C write
    901          //  i2c_write(LDC1614_ADDRESS);
    902          //  
    903          //  //Receive array start address
    904          //  p_i2c_receivedData = (uint8_t *)LDC_STATUS_BUF;
    905          //  //Read STATUS register from LDC1614
    906          //  i2c_read_byte(LDC1614_ADDRESS, sizeof LDC_STATUS_BUF);
    907            LDC_STATUS = LDC_READ(0x18);
   \   00000002   0x2018             MOVS     R0,#+24
   \   00000004   0x.... 0x....      BL       LDC_READ
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
    908          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    909          

   \                                 In section .text, align 2, keep-with-next
    910          void LDC1614_button_press_running_average_algorithm(void)
    911          {
    912            
    913            //Add current LDC data to instantaneous average value
    914            LDC_CH0_SUM_1 += LDC_CH0_DATA;
   \                     LDC1614_button_press_running_average_algorithm: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x1808             ADDS     R0,R1,R0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000012   0x6008             STR      R0,[R1, #+0]
    915            LDC_CH1_SUM_1 += LDC_CH1_DATA;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable3_5
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x1808             ADDS     R0,R1,R0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00000026   0x6008             STR      R0,[R1, #+0]
    916            LDC_CH2_SUM_1 += LDC_CH2_DATA;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable3_7
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x1808             ADDS     R0,R1,R0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    917            LDC_CH3_SUM_1 += LDC_CH3_DATA;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable3_9
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable3_10
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0x1808             ADDS     R0,R1,R0
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    918            
    919            //Increment running avg counter
    920            RUNNING_AVG_INDEX1++;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable3_11
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    921            
    922            //Update intantaneous average every 16 samples
    923            if(RUNNING_AVG_INDEX1 >= 16)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable3_11
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x2810             CMP      R0,#+16
   \   00000066   0xF2C0 0x815D      BLT.W    ??LDC1614_button_press_running_average_algorith_0
    924            {
    925              //Reset running avg counter
    926              RUNNING_AVG_INDEX1 = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00000070   0x7008             STRB     R0,[R1, #+0]
    927              
    928              //Set instantaneous average to 16 LDC samples
    929              LDC_CH0_INST_AVG = (LDC_CH0_SUM_1 >> 4);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x0900             LSRS     R0,R0,#+4
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    930              LDC_CH1_INST_AVG = (LDC_CH1_SUM_1 >> 4);
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable3_5
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x0900             LSRS     R0,R0,#+4
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    931              LDC_CH2_INST_AVG = (LDC_CH2_SUM_1 >> 4);
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable3_7
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x0900             LSRS     R0,R0,#+4
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    932              LDC_CH3_INST_AVG = (LDC_CH3_SUM_1 >> 4);
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable3_9
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x0900             LSRS     R0,R0,#+4
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    933              
    934              //Reset running avg sum variable
    935              LDC_CH0_SUM_1 = 0;
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    936              LDC_CH1_SUM_1 = 0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   000000B8   0x6008             STR      R0,[R1, #+0]
    937              LDC_CH2_SUM_1 = 0;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    938              LDC_CH3_SUM_1 = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    939              
    940              //Add instantaneous average to LDC slow average
    941              LDC_CH0_SUM_2 += LDC_CH0_INST_AVG;
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable3_16
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   000000D4   0x6809             LDR      R1,[R1, #+0]
   \   000000D6   0x1808             ADDS     R0,R1,R0
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable3_16
   \   000000DC   0x6008             STR      R0,[R1, #+0]
    942              LDC_CH1_SUM_2 += LDC_CH1_INST_AVG;
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable3_17
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \   000000E8   0x6809             LDR      R1,[R1, #+0]
   \   000000EA   0x1808             ADDS     R0,R1,R0
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable3_17
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    943              LDC_CH2_SUM_2 += LDC_CH2_INST_AVG;
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable3_18
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   000000FC   0x6809             LDR      R1,[R1, #+0]
   \   000000FE   0x1808             ADDS     R0,R1,R0
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable3_18
   \   00000104   0x6008             STR      R0,[R1, #+0]
    944              LDC_CH3_SUM_2 += LDC_CH3_INST_AVG;
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable3_19
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   00000110   0x6809             LDR      R1,[R1, #+0]
   \   00000112   0x1808             ADDS     R0,R1,R0
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable3_19
   \   00000118   0x6008             STR      R0,[R1, #+0]
    945              
    946              //Increment slow average counter
    947              RUNNING_AVG_INDEX2++;
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable3_20
   \   0000011E   0x7800             LDRB     R0,[R0, #+0]
   \   00000120   0x1C40             ADDS     R0,R0,#+1
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable3_20
   \   00000126   0x7008             STRB     R0,[R1, #+0]
    948              
    949              //Update slow average every 16 * 128 = 2048 samples
    950              if(RUNNING_AVG_INDEX2 >= 128)
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable3_20
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x2880             CMP      R0,#+128
   \   00000130   0xF2C0 0x8080      BLT.W    ??LDC1614_button_press_running_average_algorith_1
    951              {
    952                //Reset running avg counter
    953                RUNNING_AVG_INDEX2 = 0;
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable3_20
   \   0000013A   0x7008             STRB     R0,[R1, #+0]
    954                
    955                //Set slow average to 128 samples of inst. avg
    956                LDC_CH0_SLOW_AVG = (LDC_CH0_SUM_2 >> 7);
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable3_16
   \   00000140   0x6800             LDR      R0,[R0, #+0]
   \   00000142   0x09C0             LSRS     R0,R0,#+7
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable3_21
   \   00000148   0x6008             STR      R0,[R1, #+0]
    957                LDC_CH1_SLOW_AVG = (LDC_CH1_SUM_2 >> 7);
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable3_17
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x09C0             LSRS     R0,R0,#+7
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable3_22
   \   00000156   0x6008             STR      R0,[R1, #+0]
    958                LDC_CH2_SLOW_AVG = (LDC_CH2_SUM_2 >> 7);
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable3_18
   \   0000015C   0x6800             LDR      R0,[R0, #+0]
   \   0000015E   0x09C0             LSRS     R0,R0,#+7
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable3_23
   \   00000164   0x6008             STR      R0,[R1, #+0]
    959                LDC_CH3_SLOW_AVG = (LDC_CH3_SUM_2 >> 7);
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable3_19
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0x09C0             LSRS     R0,R0,#+7
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable3_24
   \   00000172   0x6008             STR      R0,[R1, #+0]
    960                
    961                //Add pre-set threshold value to slow avg
    962                LDC_CH0_THRESHOLD_1 = LDC_CH0_SLOW_AVG + LDC_CH0_THR_1;
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable3_21
   \   00000178   0x6800             LDR      R0,[R0, #+0]
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable3_25
   \   0000017E   0x6809             LDR      R1,[R1, #+0]
   \   00000180   0x1808             ADDS     R0,R1,R0
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable3_26
   \   00000186   0x6008             STR      R0,[R1, #+0]
    963                LDC_CH1_THRESHOLD_1 = LDC_CH1_SLOW_AVG + LDC_CH1_THR_1;
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable3_22
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable3_27
   \   00000192   0x6809             LDR      R1,[R1, #+0]
   \   00000194   0x1808             ADDS     R0,R1,R0
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable3_28
   \   0000019A   0x6008             STR      R0,[R1, #+0]
    964                LDC_CH2_THRESHOLD_1 = LDC_CH2_SLOW_AVG + LDC_CH2_THR_1;
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable3_23
   \   000001A0   0x6800             LDR      R0,[R0, #+0]
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable3_29
   \   000001A6   0x6809             LDR      R1,[R1, #+0]
   \   000001A8   0x1808             ADDS     R0,R1,R0
   \   000001AA   0x.... 0x....      LDR.W    R1,??DataTable3_30
   \   000001AE   0x6008             STR      R0,[R1, #+0]
    965                LDC_CH3_THRESHOLD_1 = LDC_CH3_SLOW_AVG + LDC_CH3_THR_1;
   \   000001B0   0x.... 0x....      LDR.W    R0,??DataTable3_24
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable3_31
   \   000001BA   0x6809             LDR      R1,[R1, #+0]
   \   000001BC   0x1808             ADDS     R0,R1,R0
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable3_32
   \   000001C2   0x6008             STR      R0,[R1, #+0]
    966                
    967                //Add pre-set threshold value to slow avg
    968                LDC_CH0_THRESHOLD_2 = LDC_CH0_SLOW_AVG + LDC_CH0_THR_2;
   \   000001C4   0x.... 0x....      LDR.W    R0,??DataTable3_21
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0x.... 0x....      LDR.W    R1,??DataTable3_33
   \   000001CE   0x6809             LDR      R1,[R1, #+0]
   \   000001D0   0x1808             ADDS     R0,R1,R0
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable3_34
   \   000001D6   0x6008             STR      R0,[R1, #+0]
    969                LDC_CH1_THRESHOLD_2 = LDC_CH1_SLOW_AVG + LDC_CH1_THR_2;
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable3_22
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x.... 0x....      LDR.W    R1,??DataTable3_35
   \   000001E2   0x6809             LDR      R1,[R1, #+0]
   \   000001E4   0x1808             ADDS     R0,R1,R0
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable3_36
   \   000001EA   0x6008             STR      R0,[R1, #+0]
    970                LDC_CH2_THRESHOLD_2 = LDC_CH2_SLOW_AVG + LDC_CH2_THR_2;
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable3_23
   \   000001F0   0x6800             LDR      R0,[R0, #+0]
   \   000001F2   0x.... 0x....      LDR.W    R1,??DataTable3_37
   \   000001F6   0x6809             LDR      R1,[R1, #+0]
   \   000001F8   0x1808             ADDS     R0,R1,R0
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable3_38
   \   000001FE   0x6008             STR      R0,[R1, #+0]
    971                LDC_CH3_THRESHOLD_2 = LDC_CH3_SLOW_AVG + LDC_CH3_THR_2;
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable3_24
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0x.... 0x....      LDR.W    R1,??DataTable3_39
   \   0000020A   0x6809             LDR      R1,[R1, #+0]
   \   0000020C   0x1808             ADDS     R0,R1,R0
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable3_40
   \   00000212   0x6008             STR      R0,[R1, #+0]
    972                
    973                //Reset running avg sum variable
    974                LDC_CH0_SUM_2 = 0;
   \   00000214   0x2000             MOVS     R0,#+0
   \   00000216   0x.... 0x....      LDR.W    R1,??DataTable3_16
   \   0000021A   0x6008             STR      R0,[R1, #+0]
    975                LDC_CH1_SUM_2 = 0;
   \   0000021C   0x2000             MOVS     R0,#+0
   \   0000021E   0x.... 0x....      LDR.W    R1,??DataTable3_17
   \   00000222   0x6008             STR      R0,[R1, #+0]
    976                LDC_CH2_SUM_2 = 0;
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable3_18
   \   0000022A   0x6008             STR      R0,[R1, #+0]
    977                LDC_CH3_SUM_2 = 0;
   \   0000022C   0x2000             MOVS     R0,#+0
   \   0000022E   0x.... 0x....      LDR.W    R1,??DataTable3_19
   \   00000232   0x6008             STR      R0,[R1, #+0]
    978              }
    979              
    980              if(LDC_CH0_INST_AVG >= LDC_CH0_THRESHOLD_2)
   \                     ??LDC1614_button_press_running_average_algorith_1: (+1)
   \   00000234   0x.... 0x....      LDR.W    R0,??DataTable3_12
   \   00000238   0x6800             LDR      R0,[R0, #+0]
   \   0000023A   0x.... 0x....      LDR.W    R1,??DataTable3_34
   \   0000023E   0x6809             LDR      R1,[R1, #+0]
   \   00000240   0x4288             CMP      R0,R1
   \   00000242   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_2
    981              {
    982                //Set button push flag
    983                LDC_CH0_PUSH = 2;
   \   00000244   0x2002             MOVS     R0,#+2
   \   00000246   0x.... 0x....      LDR.W    R1,??DataTable3_41
   \   0000024A   0x7008             STRB     R0,[R1, #+0]
   \   0000024C   0xE010             B.N      ??LDC1614_button_press_running_average_algorith_3
    984              }
    985              else if(LDC_CH0_INST_AVG >= LDC_CH0_THRESHOLD_1)
   \                     ??LDC1614_button_press_running_average_algorith_2: (+1)
   \   0000024E   0x.... 0x....      LDR.W    R0,??DataTable3_12
   \   00000252   0x6800             LDR      R0,[R0, #+0]
   \   00000254   0x.... 0x....      LDR.W    R1,??DataTable3_26
   \   00000258   0x6809             LDR      R1,[R1, #+0]
   \   0000025A   0x4288             CMP      R0,R1
   \   0000025C   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_4
    986              {
    987                LDC_CH0_PUSH = 1;
   \   0000025E   0x2001             MOVS     R0,#+1
   \   00000260   0x.... 0x....      LDR.W    R1,??DataTable3_41
   \   00000264   0x7008             STRB     R0,[R1, #+0]
   \   00000266   0xE003             B.N      ??LDC1614_button_press_running_average_algorith_3
    988              }
    989              else
    990              {
    991                //Clear button push flag
    992                LDC_CH0_PUSH = 0;
   \                     ??LDC1614_button_press_running_average_algorith_4: (+1)
   \   00000268   0x2000             MOVS     R0,#+0
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable3_41
   \   0000026E   0x7008             STRB     R0,[R1, #+0]
    993              }
    994              
    995              if(LDC_CH1_INST_AVG >= LDC_CH1_THRESHOLD_2)
   \                     ??LDC1614_button_press_running_average_algorith_3: (+1)
   \   00000270   0x.... 0x....      LDR.W    R0,??DataTable3_13
   \   00000274   0x6800             LDR      R0,[R0, #+0]
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable3_36
   \   0000027A   0x6809             LDR      R1,[R1, #+0]
   \   0000027C   0x4288             CMP      R0,R1
   \   0000027E   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_5
    996              {
    997                //Set button push flag
    998                LDC_CH1_PUSH = 2;
   \   00000280   0x2002             MOVS     R0,#+2
   \   00000282   0x.... 0x....      LDR.W    R1,??DataTable3_42
   \   00000286   0x7008             STRB     R0,[R1, #+0]
   \   00000288   0xE010             B.N      ??LDC1614_button_press_running_average_algorith_6
    999              }
   1000              else if(LDC_CH1_INST_AVG >= LDC_CH1_THRESHOLD_1)
   \                     ??LDC1614_button_press_running_average_algorith_5: (+1)
   \   0000028A   0x.... 0x....      LDR.W    R0,??DataTable3_13
   \   0000028E   0x6800             LDR      R0,[R0, #+0]
   \   00000290   0x.... 0x....      LDR.W    R1,??DataTable3_28
   \   00000294   0x6809             LDR      R1,[R1, #+0]
   \   00000296   0x4288             CMP      R0,R1
   \   00000298   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_7
   1001              {
   1002                LDC_CH1_PUSH = 1;
   \   0000029A   0x2001             MOVS     R0,#+1
   \   0000029C   0x.... 0x....      LDR.W    R1,??DataTable3_42
   \   000002A0   0x7008             STRB     R0,[R1, #+0]
   \   000002A2   0xE003             B.N      ??LDC1614_button_press_running_average_algorith_6
   1003              }
   1004              else
   1005              {
   1006                //Clear button push flag
   1007                LDC_CH1_PUSH = 0;
   \                     ??LDC1614_button_press_running_average_algorith_7: (+1)
   \   000002A4   0x2000             MOVS     R0,#+0
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable3_42
   \   000002AA   0x7008             STRB     R0,[R1, #+0]
   1008              }
   1009              
   1010              if(LDC_CH2_INST_AVG >= LDC_CH2_THRESHOLD_2)
   \                     ??LDC1614_button_press_running_average_algorith_6: (+1)
   \   000002AC   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   000002B0   0x6800             LDR      R0,[R0, #+0]
   \   000002B2   0x.... 0x....      LDR.W    R1,??DataTable3_38
   \   000002B6   0x6809             LDR      R1,[R1, #+0]
   \   000002B8   0x4288             CMP      R0,R1
   \   000002BA   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_8
   1011              {
   1012                //Set button push flag
   1013                LDC_CH2_PUSH = 2;
   \   000002BC   0x2002             MOVS     R0,#+2
   \   000002BE   0x.... 0x....      LDR.W    R1,??DataTable3_43
   \   000002C2   0x7008             STRB     R0,[R1, #+0]
   \   000002C4   0xE010             B.N      ??LDC1614_button_press_running_average_algorith_9
   1014              }
   1015              else if(LDC_CH2_INST_AVG >= LDC_CH2_THRESHOLD_1)
   \                     ??LDC1614_button_press_running_average_algorith_8: (+1)
   \   000002C6   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   000002CA   0x6800             LDR      R0,[R0, #+0]
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable3_30
   \   000002D0   0x6809             LDR      R1,[R1, #+0]
   \   000002D2   0x4288             CMP      R0,R1
   \   000002D4   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_10
   1016              {
   1017                LDC_CH2_PUSH = 1;
   \   000002D6   0x2001             MOVS     R0,#+1
   \   000002D8   0x.... 0x....      LDR.W    R1,??DataTable3_43
   \   000002DC   0x7008             STRB     R0,[R1, #+0]
   \   000002DE   0xE003             B.N      ??LDC1614_button_press_running_average_algorith_9
   1018              }
   1019              else
   1020              {
   1021                //Clear button push flag
   1022                LDC_CH2_PUSH = 0;
   \                     ??LDC1614_button_press_running_average_algorith_10: (+1)
   \   000002E0   0x2000             MOVS     R0,#+0
   \   000002E2   0x.... 0x....      LDR.W    R1,??DataTable3_43
   \   000002E6   0x7008             STRB     R0,[R1, #+0]
   1023              }
   1024              
   1025              if(LDC_CH3_INST_AVG >= LDC_CH3_THRESHOLD_2)
   \                     ??LDC1614_button_press_running_average_algorith_9: (+1)
   \   000002E8   0x.... 0x....      LDR.W    R0,??DataTable3_15
   \   000002EC   0x6800             LDR      R0,[R0, #+0]
   \   000002EE   0x.... 0x....      LDR.W    R1,??DataTable3_40
   \   000002F2   0x6809             LDR      R1,[R1, #+0]
   \   000002F4   0x4288             CMP      R0,R1
   \   000002F6   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_11
   1026              {
   1027                //Set button push flag
   1028                LDC_CH3_PUSH = 2;
   \   000002F8   0x2002             MOVS     R0,#+2
   \   000002FA   0x.... 0x....      LDR.W    R1,??DataTable3_44
   \   000002FE   0x7008             STRB     R0,[R1, #+0]
   \   00000300   0xE010             B.N      ??LDC1614_button_press_running_average_algorith_0
   1029              }
   1030              else if(LDC_CH3_INST_AVG >= LDC_CH3_THRESHOLD_1)
   \                     ??LDC1614_button_press_running_average_algorith_11: (+1)
   \   00000302   0x.... 0x....      LDR.W    R0,??DataTable3_15
   \   00000306   0x6800             LDR      R0,[R0, #+0]
   \   00000308   0x.... 0x....      LDR.W    R1,??DataTable3_32
   \   0000030C   0x6809             LDR      R1,[R1, #+0]
   \   0000030E   0x4288             CMP      R0,R1
   \   00000310   0xD304             BCC.N    ??LDC1614_button_press_running_average_algorith_12
   1031              {
   1032                LDC_CH3_PUSH = 1;
   \   00000312   0x2001             MOVS     R0,#+1
   \   00000314   0x.... 0x....      LDR.W    R1,??DataTable3_44
   \   00000318   0x7008             STRB     R0,[R1, #+0]
   \   0000031A   0xE003             B.N      ??LDC1614_button_press_running_average_algorith_0
   1033              }
   1034              else
   1035              {
   1036                //Clear button push flag
   1037                LDC_CH3_PUSH = 0;
   \                     ??LDC1614_button_press_running_average_algorith_12: (+1)
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x.... 0x....      LDR.W    R1,??DataTable3_44
   \   00000322   0x7008             STRB     R0,[R1, #+0]
   1038              }
   1039            }
   1040            
   1041          }
   \                     ??LDC1614_button_press_running_average_algorith_0: (+1)
   \   00000324   0x4770             BX       LR               ;; return
   1042          

   \                                 In section .text, align 2, keep-with-next
   1043          void LDC1614_button_press_IIR_algorithm(void)
   1044          {
   1045            
   1046            //Set average values equal to first measurement if first run
   1047            if(FIRST_RUN)
   \                     LDC1614_button_press_IIR_algorithm: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable3_45
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD022             BEQ.N    ??LDC1614_button_press_IIR_algorithm_0
   1048            {
   1049              LDC_CH0_INST_AVG = LDC_CH0_DATA;
   \   0000000A   0x....             LDR.N    R0,??DataTable3_4
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable3_12
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1050              LDC_CH1_INST_AVG = LDC_CH1_DATA;
   \   00000012   0x....             LDR.N    R0,??DataTable3_6
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x....             LDR.N    R1,??DataTable3_13
   \   00000018   0x6008             STR      R0,[R1, #+0]
   1051              LDC_CH2_INST_AVG = LDC_CH2_DATA;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_8
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x....             LDR.N    R1,??DataTable3_14
   \   00000020   0x6008             STR      R0,[R1, #+0]
   1052              LDC_CH3_INST_AVG = LDC_CH3_DATA;
   \   00000022   0x....             LDR.N    R0,??DataTable3_10
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable3_15
   \   00000028   0x6008             STR      R0,[R1, #+0]
   1053              
   1054              LDC_CH0_SLOW_AVG = LDC_CH0_DATA;
   \   0000002A   0x....             LDR.N    R0,??DataTable3_4
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable3_21
   \   00000030   0x6008             STR      R0,[R1, #+0]
   1055              LDC_CH1_SLOW_AVG = LDC_CH1_DATA;
   \   00000032   0x....             LDR.N    R0,??DataTable3_6
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x....             LDR.N    R1,??DataTable3_22
   \   00000038   0x6008             STR      R0,[R1, #+0]
   1056              LDC_CH2_SLOW_AVG = LDC_CH2_DATA;
   \   0000003A   0x....             LDR.N    R0,??DataTable3_8
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x....             LDR.N    R1,??DataTable3_23
   \   00000040   0x6008             STR      R0,[R1, #+0]
   1057              LDC_CH3_SLOW_AVG = LDC_CH3_DATA;
   \   00000042   0x....             LDR.N    R0,??DataTable3_10
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x....             LDR.N    R1,??DataTable3_24
   \   00000048   0x6008             STR      R0,[R1, #+0]
   1058              
   1059              FIRST_RUN = 0;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable3_45
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
   1060            }
   1061            
   1062            LDC_CH0_INST_AVG = ( ( (LDC_CH0_INST_AVG << INST_AVG_POWER) - LDC_CH0_INST_AVG + LDC_CH0_DATA ) >> INST_AVG_POWER );
   \                     ??LDC1614_button_press_IIR_algorithm_0: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable3_12
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x....             LDR.N    R1,??DataTable3_46
   \   00000056   0x7809             LDRB     R1,[R1, #+0]
   \   00000058   0x4088             LSLS     R0,R0,R1
   \   0000005A   0x....             LDR.N    R1,??DataTable3_12
   \   0000005C   0x6809             LDR      R1,[R1, #+0]
   \   0000005E   0x1A40             SUBS     R0,R0,R1
   \   00000060   0x....             LDR.N    R1,??DataTable3_4
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0x1808             ADDS     R0,R1,R0
   \   00000066   0x....             LDR.N    R1,??DataTable3_46
   \   00000068   0x7809             LDRB     R1,[R1, #+0]
   \   0000006A   0x40C8             LSRS     R0,R0,R1
   \   0000006C   0x....             LDR.N    R1,??DataTable3_12
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   1063            LDC_CH1_INST_AVG = ( ( (LDC_CH1_INST_AVG << INST_AVG_POWER) - LDC_CH1_INST_AVG + LDC_CH1_DATA ) >> INST_AVG_POWER );
   \   00000070   0x....             LDR.N    R0,??DataTable3_13
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x....             LDR.N    R1,??DataTable3_46
   \   00000076   0x7809             LDRB     R1,[R1, #+0]
   \   00000078   0x4088             LSLS     R0,R0,R1
   \   0000007A   0x....             LDR.N    R1,??DataTable3_13
   \   0000007C   0x6809             LDR      R1,[R1, #+0]
   \   0000007E   0x1A40             SUBS     R0,R0,R1
   \   00000080   0x....             LDR.N    R1,??DataTable3_6
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0x1808             ADDS     R0,R1,R0
   \   00000086   0x....             LDR.N    R1,??DataTable3_46
   \   00000088   0x7809             LDRB     R1,[R1, #+0]
   \   0000008A   0x40C8             LSRS     R0,R0,R1
   \   0000008C   0x....             LDR.N    R1,??DataTable3_13
   \   0000008E   0x6008             STR      R0,[R1, #+0]
   1064            LDC_CH2_INST_AVG = ( ( (LDC_CH2_INST_AVG << INST_AVG_POWER) - LDC_CH2_INST_AVG + LDC_CH2_DATA ) >> INST_AVG_POWER );
   \   00000090   0x....             LDR.N    R0,??DataTable3_14
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x....             LDR.N    R1,??DataTable3_46
   \   00000096   0x7809             LDRB     R1,[R1, #+0]
   \   00000098   0x4088             LSLS     R0,R0,R1
   \   0000009A   0x....             LDR.N    R1,??DataTable3_14
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0x1A40             SUBS     R0,R0,R1
   \   000000A0   0x....             LDR.N    R1,??DataTable3_8
   \   000000A2   0x6809             LDR      R1,[R1, #+0]
   \   000000A4   0x1808             ADDS     R0,R1,R0
   \   000000A6   0x....             LDR.N    R1,??DataTable3_46
   \   000000A8   0x7809             LDRB     R1,[R1, #+0]
   \   000000AA   0x40C8             LSRS     R0,R0,R1
   \   000000AC   0x....             LDR.N    R1,??DataTable3_14
   \   000000AE   0x6008             STR      R0,[R1, #+0]
   1065            LDC_CH3_INST_AVG = ( ( (LDC_CH3_INST_AVG << INST_AVG_POWER) - LDC_CH3_INST_AVG + LDC_CH3_DATA ) >> INST_AVG_POWER );
   \   000000B0   0x....             LDR.N    R0,??DataTable3_15
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x....             LDR.N    R1,??DataTable3_46
   \   000000B6   0x7809             LDRB     R1,[R1, #+0]
   \   000000B8   0x4088             LSLS     R0,R0,R1
   \   000000BA   0x....             LDR.N    R1,??DataTable3_15
   \   000000BC   0x6809             LDR      R1,[R1, #+0]
   \   000000BE   0x1A40             SUBS     R0,R0,R1
   \   000000C0   0x....             LDR.N    R1,??DataTable3_10
   \   000000C2   0x6809             LDR      R1,[R1, #+0]
   \   000000C4   0x1808             ADDS     R0,R1,R0
   \   000000C6   0x....             LDR.N    R1,??DataTable3_46
   \   000000C8   0x7809             LDRB     R1,[R1, #+0]
   \   000000CA   0x40C8             LSRS     R0,R0,R1
   \   000000CC   0x....             LDR.N    R1,??DataTable3_15
   \   000000CE   0x6008             STR      R0,[R1, #+0]
   1066            
   1067            LDC_CH0_SLOW_AVG = ( ( (LDC_CH0_SLOW_AVG << SLOW_AVG_POWER) - LDC_CH0_SLOW_AVG + LDC_CH0_INST_AVG ) >> SLOW_AVG_POWER );
   \   000000D0   0x....             LDR.N    R0,??DataTable3_21
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0x....             LDR.N    R1,??DataTable3_47
   \   000000D6   0x7809             LDRB     R1,[R1, #+0]
   \   000000D8   0x4088             LSLS     R0,R0,R1
   \   000000DA   0x....             LDR.N    R1,??DataTable3_21
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0x1A40             SUBS     R0,R0,R1
   \   000000E0   0x....             LDR.N    R1,??DataTable3_12
   \   000000E2   0x6809             LDR      R1,[R1, #+0]
   \   000000E4   0x1808             ADDS     R0,R1,R0
   \   000000E6   0x....             LDR.N    R1,??DataTable3_47
   \   000000E8   0x7809             LDRB     R1,[R1, #+0]
   \   000000EA   0x40C8             LSRS     R0,R0,R1
   \   000000EC   0x....             LDR.N    R1,??DataTable3_21
   \   000000EE   0x6008             STR      R0,[R1, #+0]
   1068            LDC_CH1_SLOW_AVG = ( ( (LDC_CH1_SLOW_AVG << SLOW_AVG_POWER) - LDC_CH1_SLOW_AVG + LDC_CH1_INST_AVG ) >> SLOW_AVG_POWER );
   \   000000F0   0x....             LDR.N    R0,??DataTable3_22
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x....             LDR.N    R1,??DataTable3_47
   \   000000F6   0x7809             LDRB     R1,[R1, #+0]
   \   000000F8   0x4088             LSLS     R0,R0,R1
   \   000000FA   0x....             LDR.N    R1,??DataTable3_22
   \   000000FC   0x6809             LDR      R1,[R1, #+0]
   \   000000FE   0x1A40             SUBS     R0,R0,R1
   \   00000100   0x....             LDR.N    R1,??DataTable3_13
   \   00000102   0x6809             LDR      R1,[R1, #+0]
   \   00000104   0x1808             ADDS     R0,R1,R0
   \   00000106   0x....             LDR.N    R1,??DataTable3_47
   \   00000108   0x7809             LDRB     R1,[R1, #+0]
   \   0000010A   0x40C8             LSRS     R0,R0,R1
   \   0000010C   0x....             LDR.N    R1,??DataTable3_22
   \   0000010E   0x6008             STR      R0,[R1, #+0]
   1069            LDC_CH2_SLOW_AVG = ( ( (LDC_CH2_SLOW_AVG << SLOW_AVG_POWER) - LDC_CH2_SLOW_AVG + LDC_CH2_INST_AVG ) >> SLOW_AVG_POWER );
   \   00000110   0x....             LDR.N    R0,??DataTable3_23
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x....             LDR.N    R1,??DataTable3_47
   \   00000116   0x7809             LDRB     R1,[R1, #+0]
   \   00000118   0x4088             LSLS     R0,R0,R1
   \   0000011A   0x....             LDR.N    R1,??DataTable3_23
   \   0000011C   0x6809             LDR      R1,[R1, #+0]
   \   0000011E   0x1A40             SUBS     R0,R0,R1
   \   00000120   0x....             LDR.N    R1,??DataTable3_14
   \   00000122   0x6809             LDR      R1,[R1, #+0]
   \   00000124   0x1808             ADDS     R0,R1,R0
   \   00000126   0x....             LDR.N    R1,??DataTable3_47
   \   00000128   0x7809             LDRB     R1,[R1, #+0]
   \   0000012A   0x40C8             LSRS     R0,R0,R1
   \   0000012C   0x....             LDR.N    R1,??DataTable3_23
   \   0000012E   0x6008             STR      R0,[R1, #+0]
   1070            LDC_CH3_SLOW_AVG = ( ( (LDC_CH3_SLOW_AVG << SLOW_AVG_POWER) - LDC_CH3_SLOW_AVG + LDC_CH3_INST_AVG ) >> SLOW_AVG_POWER );
   \   00000130   0x....             LDR.N    R0,??DataTable3_24
   \   00000132   0x6800             LDR      R0,[R0, #+0]
   \   00000134   0x....             LDR.N    R1,??DataTable3_47
   \   00000136   0x7809             LDRB     R1,[R1, #+0]
   \   00000138   0x4088             LSLS     R0,R0,R1
   \   0000013A   0x....             LDR.N    R1,??DataTable3_24
   \   0000013C   0x6809             LDR      R1,[R1, #+0]
   \   0000013E   0x1A40             SUBS     R0,R0,R1
   \   00000140   0x....             LDR.N    R1,??DataTable3_15
   \   00000142   0x6809             LDR      R1,[R1, #+0]
   \   00000144   0x1808             ADDS     R0,R1,R0
   \   00000146   0x....             LDR.N    R1,??DataTable3_47
   \   00000148   0x7809             LDRB     R1,[R1, #+0]
   \   0000014A   0x40C8             LSRS     R0,R0,R1
   \   0000014C   0x....             LDR.N    R1,??DataTable3_24
   \   0000014E   0x6008             STR      R0,[R1, #+0]
   1071            
   1072            LDC_CH0_THRESHOLD_1 = LDC_CH0_SLOW_AVG + LDC_CH0_THR_1;
   \   00000150   0x....             LDR.N    R0,??DataTable3_21
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0x....             LDR.N    R1,??DataTable3_25
   \   00000156   0x6809             LDR      R1,[R1, #+0]
   \   00000158   0x1808             ADDS     R0,R1,R0
   \   0000015A   0x....             LDR.N    R1,??DataTable3_26
   \   0000015C   0x6008             STR      R0,[R1, #+0]
   1073            LDC_CH1_THRESHOLD_1 = LDC_CH1_SLOW_AVG + LDC_CH1_THR_1;
   \   0000015E   0x....             LDR.N    R0,??DataTable3_22
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0x....             LDR.N    R1,??DataTable3_27
   \   00000164   0x6809             LDR      R1,[R1, #+0]
   \   00000166   0x1808             ADDS     R0,R1,R0
   \   00000168   0x....             LDR.N    R1,??DataTable3_28
   \   0000016A   0x6008             STR      R0,[R1, #+0]
   1074            LDC_CH2_THRESHOLD_1 = LDC_CH2_SLOW_AVG + LDC_CH2_THR_1;
   \   0000016C   0x....             LDR.N    R0,??DataTable3_23
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0x....             LDR.N    R1,??DataTable3_29
   \   00000172   0x6809             LDR      R1,[R1, #+0]
   \   00000174   0x1808             ADDS     R0,R1,R0
   \   00000176   0x....             LDR.N    R1,??DataTable3_30
   \   00000178   0x6008             STR      R0,[R1, #+0]
   1075            LDC_CH3_THRESHOLD_1 = LDC_CH3_SLOW_AVG + LDC_CH3_THR_1;
   \   0000017A   0x....             LDR.N    R0,??DataTable3_24
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0x....             LDR.N    R1,??DataTable3_31
   \   00000180   0x6809             LDR      R1,[R1, #+0]
   \   00000182   0x1808             ADDS     R0,R1,R0
   \   00000184   0x....             LDR.N    R1,??DataTable3_32
   \   00000186   0x6008             STR      R0,[R1, #+0]
   1076            
   1077            LDC_CH0_THRESHOLD_2 = LDC_CH0_SLOW_AVG + LDC_CH0_THR_2;
   \   00000188   0x....             LDR.N    R0,??DataTable3_21
   \   0000018A   0x6800             LDR      R0,[R0, #+0]
   \   0000018C   0x....             LDR.N    R1,??DataTable3_33
   \   0000018E   0x6809             LDR      R1,[R1, #+0]
   \   00000190   0x1808             ADDS     R0,R1,R0
   \   00000192   0x....             LDR.N    R1,??DataTable3_34
   \   00000194   0x6008             STR      R0,[R1, #+0]
   1078            LDC_CH1_THRESHOLD_2 = LDC_CH1_SLOW_AVG + LDC_CH1_THR_2;
   \   00000196   0x....             LDR.N    R0,??DataTable3_22
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0x....             LDR.N    R1,??DataTable3_35
   \   0000019C   0x6809             LDR      R1,[R1, #+0]
   \   0000019E   0x1808             ADDS     R0,R1,R0
   \   000001A0   0x....             LDR.N    R1,??DataTable3_36
   \   000001A2   0x6008             STR      R0,[R1, #+0]
   1079            LDC_CH2_THRESHOLD_2 = LDC_CH2_SLOW_AVG + LDC_CH2_THR_2;
   \   000001A4   0x....             LDR.N    R0,??DataTable3_23
   \   000001A6   0x6800             LDR      R0,[R0, #+0]
   \   000001A8   0x....             LDR.N    R1,??DataTable3_37
   \   000001AA   0x6809             LDR      R1,[R1, #+0]
   \   000001AC   0x1808             ADDS     R0,R1,R0
   \   000001AE   0x....             LDR.N    R1,??DataTable3_38
   \   000001B0   0x6008             STR      R0,[R1, #+0]
   1080            LDC_CH3_THRESHOLD_2 = LDC_CH3_SLOW_AVG + LDC_CH3_THR_2;
   \   000001B2   0x....             LDR.N    R0,??DataTable3_24
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x....             LDR.N    R1,??DataTable3_39
   \   000001B8   0x6809             LDR      R1,[R1, #+0]
   \   000001BA   0x1808             ADDS     R0,R1,R0
   \   000001BC   0x....             LDR.N    R1,??DataTable3_40
   \   000001BE   0x6008             STR      R0,[R1, #+0]
   1081            
   1082            if(LDC_CH0_INST_AVG >= LDC_CH0_THRESHOLD_2)
   \   000001C0   0x....             LDR.N    R0,??DataTable3_12
   \   000001C2   0x6800             LDR      R0,[R0, #+0]
   \   000001C4   0x....             LDR.N    R1,??DataTable3_34
   \   000001C6   0x6809             LDR      R1,[R1, #+0]
   \   000001C8   0x4288             CMP      R0,R1
   \   000001CA   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_1
   1083            {
   1084              //Set button push flag
   1085              LDC_CH0_PUSH = 2;
   \   000001CC   0x2002             MOVS     R0,#+2
   \   000001CE   0x....             LDR.N    R1,??DataTable3_41
   \   000001D0   0x7008             STRB     R0,[R1, #+0]
   \   000001D2   0xE00C             B.N      ??LDC1614_button_press_IIR_algorithm_2
   1086            }
   1087            else if(LDC_CH0_INST_AVG >= LDC_CH0_THRESHOLD_1)
   \                     ??LDC1614_button_press_IIR_algorithm_1: (+1)
   \   000001D4   0x....             LDR.N    R0,??DataTable3_12
   \   000001D6   0x6800             LDR      R0,[R0, #+0]
   \   000001D8   0x....             LDR.N    R1,??DataTable3_26
   \   000001DA   0x6809             LDR      R1,[R1, #+0]
   \   000001DC   0x4288             CMP      R0,R1
   \   000001DE   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_3
   1088            {
   1089              LDC_CH0_PUSH = 1;
   \   000001E0   0x2001             MOVS     R0,#+1
   \   000001E2   0x....             LDR.N    R1,??DataTable3_41
   \   000001E4   0x7008             STRB     R0,[R1, #+0]
   \   000001E6   0xE002             B.N      ??LDC1614_button_press_IIR_algorithm_2
   1090            }
   1091            else
   1092            {
   1093              //Clear button push flag
   1094              LDC_CH0_PUSH = 0;
   \                     ??LDC1614_button_press_IIR_algorithm_3: (+1)
   \   000001E8   0x2000             MOVS     R0,#+0
   \   000001EA   0x....             LDR.N    R1,??DataTable3_41
   \   000001EC   0x7008             STRB     R0,[R1, #+0]
   1095            }
   1096            
   1097            if(LDC_CH1_INST_AVG >= LDC_CH1_THRESHOLD_2)
   \                     ??LDC1614_button_press_IIR_algorithm_2: (+1)
   \   000001EE   0x....             LDR.N    R0,??DataTable3_13
   \   000001F0   0x6800             LDR      R0,[R0, #+0]
   \   000001F2   0x....             LDR.N    R1,??DataTable3_36
   \   000001F4   0x6809             LDR      R1,[R1, #+0]
   \   000001F6   0x4288             CMP      R0,R1
   \   000001F8   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_4
   1098            {
   1099              //Set button push flag
   1100              LDC_CH1_PUSH = 2;
   \   000001FA   0x2002             MOVS     R0,#+2
   \   000001FC   0x....             LDR.N    R1,??DataTable3_42
   \   000001FE   0x7008             STRB     R0,[R1, #+0]
   \   00000200   0xE00C             B.N      ??LDC1614_button_press_IIR_algorithm_5
   1101            }
   1102            else if(LDC_CH1_INST_AVG >= LDC_CH1_THRESHOLD_1)
   \                     ??LDC1614_button_press_IIR_algorithm_4: (+1)
   \   00000202   0x....             LDR.N    R0,??DataTable3_13
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0x....             LDR.N    R1,??DataTable3_28
   \   00000208   0x6809             LDR      R1,[R1, #+0]
   \   0000020A   0x4288             CMP      R0,R1
   \   0000020C   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_6
   1103            {
   1104              LDC_CH1_PUSH = 1;
   \   0000020E   0x2001             MOVS     R0,#+1
   \   00000210   0x....             LDR.N    R1,??DataTable3_42
   \   00000212   0x7008             STRB     R0,[R1, #+0]
   \   00000214   0xE002             B.N      ??LDC1614_button_press_IIR_algorithm_5
   1105            }
   1106            else
   1107            {
   1108              //Clear button push flag
   1109              LDC_CH1_PUSH = 0;
   \                     ??LDC1614_button_press_IIR_algorithm_6: (+1)
   \   00000216   0x2000             MOVS     R0,#+0
   \   00000218   0x....             LDR.N    R1,??DataTable3_42
   \   0000021A   0x7008             STRB     R0,[R1, #+0]
   1110            }
   1111            
   1112            if(LDC_CH2_INST_AVG >= LDC_CH2_THRESHOLD_2)
   \                     ??LDC1614_button_press_IIR_algorithm_5: (+1)
   \   0000021C   0x....             LDR.N    R0,??DataTable3_14
   \   0000021E   0x6800             LDR      R0,[R0, #+0]
   \   00000220   0x....             LDR.N    R1,??DataTable3_38
   \   00000222   0x6809             LDR      R1,[R1, #+0]
   \   00000224   0x4288             CMP      R0,R1
   \   00000226   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_7
   1113            {
   1114              //Set button push flag
   1115              LDC_CH2_PUSH = 2;
   \   00000228   0x2002             MOVS     R0,#+2
   \   0000022A   0x....             LDR.N    R1,??DataTable3_43
   \   0000022C   0x7008             STRB     R0,[R1, #+0]
   \   0000022E   0xE00C             B.N      ??LDC1614_button_press_IIR_algorithm_8
   1116            }
   1117            else if(LDC_CH2_INST_AVG >= LDC_CH2_THRESHOLD_1)
   \                     ??LDC1614_button_press_IIR_algorithm_7: (+1)
   \   00000230   0x....             LDR.N    R0,??DataTable3_14
   \   00000232   0x6800             LDR      R0,[R0, #+0]
   \   00000234   0x....             LDR.N    R1,??DataTable3_30
   \   00000236   0x6809             LDR      R1,[R1, #+0]
   \   00000238   0x4288             CMP      R0,R1
   \   0000023A   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_9
   1118            {
   1119              LDC_CH2_PUSH = 1;
   \   0000023C   0x2001             MOVS     R0,#+1
   \   0000023E   0x....             LDR.N    R1,??DataTable3_43
   \   00000240   0x7008             STRB     R0,[R1, #+0]
   \   00000242   0xE002             B.N      ??LDC1614_button_press_IIR_algorithm_8
   1120            }
   1121            else
   1122            {
   1123              //Clear button push flag
   1124              LDC_CH2_PUSH = 0;
   \                     ??LDC1614_button_press_IIR_algorithm_9: (+1)
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0x....             LDR.N    R1,??DataTable3_43
   \   00000248   0x7008             STRB     R0,[R1, #+0]
   1125            }
   1126            
   1127            if(LDC_CH3_INST_AVG >= LDC_CH3_THRESHOLD_2)
   \                     ??LDC1614_button_press_IIR_algorithm_8: (+1)
   \   0000024A   0x....             LDR.N    R0,??DataTable3_15
   \   0000024C   0x6800             LDR      R0,[R0, #+0]
   \   0000024E   0x....             LDR.N    R1,??DataTable3_40
   \   00000250   0x6809             LDR      R1,[R1, #+0]
   \   00000252   0x4288             CMP      R0,R1
   \   00000254   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_10
   1128            {
   1129              //Set button push flag
   1130              LDC_CH3_PUSH = 2;
   \   00000256   0x2002             MOVS     R0,#+2
   \   00000258   0x....             LDR.N    R1,??DataTable3_44
   \   0000025A   0x7008             STRB     R0,[R1, #+0]
   \   0000025C   0xE00C             B.N      ??LDC1614_button_press_IIR_algorithm_11
   1131            }
   1132            else if(LDC_CH3_INST_AVG >= LDC_CH3_THRESHOLD_1){
   \                     ??LDC1614_button_press_IIR_algorithm_10: (+1)
   \   0000025E   0x....             LDR.N    R0,??DataTable3_15
   \   00000260   0x6800             LDR      R0,[R0, #+0]
   \   00000262   0x....             LDR.N    R1,??DataTable3_32
   \   00000264   0x6809             LDR      R1,[R1, #+0]
   \   00000266   0x4288             CMP      R0,R1
   \   00000268   0xD303             BCC.N    ??LDC1614_button_press_IIR_algorithm_12
   1133              LDC_CH3_PUSH = 1;
   \   0000026A   0x2001             MOVS     R0,#+1
   \   0000026C   0x....             LDR.N    R1,??DataTable3_44
   \   0000026E   0x7008             STRB     R0,[R1, #+0]
   \   00000270   0xE002             B.N      ??LDC1614_button_press_IIR_algorithm_11
   1134            }
   1135            else
   1136            {
   1137              //Clear button push flag
   1138              LDC_CH3_PUSH = 0;
   \                     ??LDC1614_button_press_IIR_algorithm_12: (+1)
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x....             LDR.N    R1,??DataTable3_44
   \   00000276   0x7008             STRB     R0,[R1, #+0]
   1139            }
   1140            
   1141          }
   \                     ??LDC1614_button_press_IIR_algorithm_11: (+1)
   \   00000278   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     LDC_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     LDC_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     LDC_STATUS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     LDC_CH0_SUM_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     LDC_CH0_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     LDC_CH1_SUM_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     LDC_CH1_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     LDC_CH2_SUM_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     LDC_CH2_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     LDC_CH3_SUM_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     LDC_CH3_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     RUNNING_AVG_INDEX1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     LDC_CH0_INST_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     LDC_CH1_INST_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     LDC_CH2_INST_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     LDC_CH3_INST_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     LDC_CH0_SUM_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     LDC_CH1_SUM_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x........         DC32     LDC_CH2_SUM_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x........         DC32     LDC_CH3_SUM_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x........         DC32     RUNNING_AVG_INDEX2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x........         DC32     LDC_CH0_SLOW_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x........         DC32     LDC_CH1_SLOW_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x........         DC32     LDC_CH2_SLOW_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x........         DC32     LDC_CH3_SLOW_AVG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x........         DC32     LDC_CH0_THR_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   0x........         DC32     LDC_CH0_THRESHOLD_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \   00000000   0x........         DC32     LDC_CH1_THR_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \   00000000   0x........         DC32     LDC_CH1_THRESHOLD_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_29:
   \   00000000   0x........         DC32     LDC_CH2_THR_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_30:
   \   00000000   0x........         DC32     LDC_CH2_THRESHOLD_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_31:
   \   00000000   0x........         DC32     LDC_CH3_THR_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_32:
   \   00000000   0x........         DC32     LDC_CH3_THRESHOLD_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_33:
   \   00000000   0x........         DC32     LDC_CH0_THR_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_34:
   \   00000000   0x........         DC32     LDC_CH0_THRESHOLD_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_35:
   \   00000000   0x........         DC32     LDC_CH1_THR_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_36:
   \   00000000   0x........         DC32     LDC_CH1_THRESHOLD_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_37:
   \   00000000   0x........         DC32     LDC_CH2_THR_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_38:
   \   00000000   0x........         DC32     LDC_CH2_THRESHOLD_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_39:
   \   00000000   0x........         DC32     LDC_CH3_THR_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_40:
   \   00000000   0x........         DC32     LDC_CH3_THRESHOLD_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_41:
   \   00000000   0x........         DC32     LDC_CH0_PUSH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_42:
   \   00000000   0x........         DC32     LDC_CH1_PUSH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_43:
   \   00000000   0x........         DC32     LDC_CH2_PUSH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_44:
   \   00000000   0x........         DC32     LDC_CH3_PUSH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_45:
   \   00000000   0x........         DC32     FIRST_RUN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_46:
   \   00000000   0x........         DC32     INST_AVG_POWER

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_47:
   \   00000000   0x........         DC32     SLOW_AVG_POWER
   1142          //*****************************************************************************
   1143          // Interrupt Service Routines
   1144          //*****************************************************************************

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LDC1614_button_press_IIR_algorithm
       0   LDC1614_button_press_running_average_algorithm
       8   LDC1614_init
         8   -> LDC_SEND
       8   LDC1614_read_meas
         8   -> LDC1614_status
         8   -> LDC_READ
         8   -> push
       8   LDC1614_reset
         8   -> LDC_SEND
       8   LDC1614_sleep
         8   -> LDC_SEND
       8   LDC1614_start_meas
         8   -> LDC_SEND
       8   LDC1614_status
         8   -> LDC_READ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_34
       4  ??DataTable3_35
       4  ??DataTable3_36
       4  ??DataTable3_37
       4  ??DataTable3_38
       4  ??DataTable3_39
       4  ??DataTable3_4
       4  ??DataTable3_40
       4  ??DataTable3_41
       4  ??DataTable3_42
       4  ??DataTable3_43
       4  ??DataTable3_44
       4  ??DataTable3_45
       4  ??DataTable3_46
       4  ??DataTable3_47
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       1  FIRST_RUN
       1  INST_AVG_POWER
     634  LDC1614_button_press_IIR_algorithm
     806  LDC1614_button_press_running_average_algorithm
     210  LDC1614_init
     260  LDC1614_read_meas
      14  LDC1614_reset
      14  LDC1614_sleep
      14  LDC1614_start_meas
      16  LDC1614_status
       4  LDC_CH0_DATA
       1  LDC_CH0_ERRORS
       4  LDC_CH0_INST_AVG
       1  LDC_CH0_PUSH
       4  LDC_CH0_SLOW_AVG
       4  LDC_CH0_SUM_1
       4  LDC_CH0_SUM_2
       4  LDC_CH0_THRESHOLD_1
       4  LDC_CH0_THRESHOLD_2
       4  LDC_CH0_THR_1
       4  LDC_CH0_THR_2
       4  LDC_CH1_DATA
       1  LDC_CH1_ERRORS
       4  LDC_CH1_INST_AVG
       1  LDC_CH1_PUSH
       4  LDC_CH1_SLOW_AVG
       4  LDC_CH1_SUM_1
       4  LDC_CH1_SUM_2
       4  LDC_CH1_THRESHOLD_1
       4  LDC_CH1_THRESHOLD_2
       4  LDC_CH1_THR_1
       4  LDC_CH1_THR_2
       4  LDC_CH2_DATA
       1  LDC_CH2_ERRORS
       4  LDC_CH2_INST_AVG
       1  LDC_CH2_PUSH
       4  LDC_CH2_SLOW_AVG
       4  LDC_CH2_SUM_1
       4  LDC_CH2_SUM_2
       4  LDC_CH2_THRESHOLD_1
       4  LDC_CH2_THRESHOLD_2
       4  LDC_CH2_THR_1
       4  LDC_CH2_THR_2
       4  LDC_CH3_DATA
       1  LDC_CH3_ERRORS
       4  LDC_CH3_INST_AVG
       1  LDC_CH3_PUSH
       4  LDC_CH3_SLOW_AVG
       4  LDC_CH3_SUM_1
       4  LDC_CH3_SUM_2
       4  LDC_CH3_THRESHOLD_1
       4  LDC_CH3_THRESHOLD_2
       4  LDC_CH3_THR_1
       4  LDC_CH3_THR_2
       2  LDC_STATUS
      16  LDC_data
       4  LDC_flag
       1  RUNNING_AVG_INDEX1
       1  RUNNING_AVG_INDEX2
       1  SLOW_AVG_POWER

 
   144 bytes in section .bss
    35 bytes in section .data
 2 160 bytes in section .text
 
 2 160 bytes of CODE memory
   179 bytes of DATA memory

Errors: none
Warnings: none
