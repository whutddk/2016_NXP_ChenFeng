###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        31/Dec/2015  15:17:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SPI.c
#    Command line =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SPI.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\"
#        -lB
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\"
#        -o
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\MAIN\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\BSP\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\CTL\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\sensor\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\ITAC\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\common\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\FUNC\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\class\"
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\List\HW_SPI.lst
#    Object file  =  
#        G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\FLASH\Obj\HW_SPI.o
#
###############################################################################

G:\快盘网络撤离\whutddk\飞思卡尔\LPLDV3.1\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SPI.c
      1          /**
      2           * @file HW_SPI.c
      3           * @version 3.03[By LPLD]
      4           * @date 2014-2-10
      5           * @brief SPI底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_SPI.h"
     24          

   \                                 In section .bss, align 4
     25          SPI_ISR_CALLBACK SPI0_ISR[6];
   \                     SPI0_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     26          SPI_ISR_CALLBACK SPI1_ISR[6];
   \                     SPI1_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     27          SPI_ISR_CALLBACK SPI2_ISR[6];
   \                     SPI2_ISR:
   \   00000000                      DS8 24
     28          
     29          /*
     30           * LPLD_SPI_Init
     31           * SPI初始化函数,在该函数中选择SPI通道，初始化SPI SCK总线时钟
     32           * 选择使能Tx，Rx FIFO，选择开启SPI外设的发送完成，发送队列结束，
     33           * Tx FIFO队列为空，Rx FIFO队列溢出，选择FIFO的中断方式和DMA请求等
     34           * 
     35           * 参数:
     36           *    spi_init_structure--SPI初始化结构体，
     37           *                        具体定义见SPI_InitTypeDef
     38           *
     39           * 输出:
     40           *    0--配置错误
     41           *    1--配置成功
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 LPLD_SPI_Init(SPI_InitTypeDef spi_init_structure)
     44          {
   \                     LPLD_SPI_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB08B             SUB      SP,SP,#+44
     45            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000008   0x9C14             LDR      R4,[SP, #+80]
     46            uint8 spi_mode = spi_init_structure.SPI_ModeSelect;
   \   0000000A   0xF89D 0x0054      LDRB     R0,[SP, #+84]
   \   0000000E   0xF88D 0x0009      STRB     R0,[SP, #+9]
     47            uint8 sck_div = spi_init_structure.SPI_SckDivider; 
   \   00000012   0xF89D 0x0055      LDRB     R0,[SP, #+85]
   \   00000016   0xF88D 0x0008      STRB     R0,[SP, #+8]
     48            boolean txFIFO_enable = spi_init_structure.SPI_EnableTxFIFO;
   \   0000001A   0xF89D 0x0056      LDRB     R0,[SP, #+86]
   \   0000001E   0xF88D 0x000D      STRB     R0,[SP, #+13]
     49            boolean rxFIFO_enable = spi_init_structure.SPI_EnableRxFIFO;
   \   00000022   0xF89D 0x0057      LDRB     R0,[SP, #+87]
   \   00000026   0xF88D 0x000C      STRB     R0,[SP, #+12]
     50            //定义SPI外设中断变量
     51            boolean tx_complete_int = spi_init_structure.SPI_TxCompleteIntEnable;
   \   0000002A   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
     52            boolean QueueEnd_Request_int = spi_init_structure.SPI_QueueEndIntEnable; 
   \   00000032   0xF89D 0x5059      LDRB     R5,[SP, #+89]
     53            boolean txFIFO_underflow_int = spi_init_structure.SPI_TxFIFO_UnderflowIntEnable;
   \   00000036   0xF89D 0x605A      LDRB     R6,[SP, #+90]
     54            boolean rxFIFO_overflow_int = spi_init_structure.SPI_RxFIFO_OverflowIntEnable;
   \   0000003A   0xF89D 0x705B      LDRB     R7,[SP, #+91]
     55            boolean txFIFO_Fill_int = spi_init_structure.SPI_TxFIFO_FillIntEnable;
   \   0000003E   0xF89D 0x805C      LDRB     R8,[SP, #+92]
     56            boolean rxFIFO_Drain_int = spi_init_structure.SPI_RxFIFO_DrainIntEnable; 
   \   00000042   0xF89D 0x905D      LDRB     R9,[SP, #+93]
     57            boolean txFIFO_req = spi_init_structure.SPI_TxFIFO_RequestSelect;
   \   00000046   0xF89D 0xA05E      LDRB     R10,[SP, #+94]
     58            boolean rxFIFO_req = spi_init_structure.SPI_RxFIFO_RequestSelect;
   \   0000004A   0xF89D 0xB05F      LDRB     R11,[SP, #+95]
     59            //选择SPI引脚
     60            PortPinsEnum_Type miso_pin = spi_init_structure.SPI_MisoPin;//MISO 
   \   0000004E   0xF89D 0x0068      LDRB     R0,[SP, #+104]
   \   00000052   0xF88D 0x0005      STRB     R0,[SP, #+5]
     61            PortPinsEnum_Type mosi_pin = spi_init_structure.SPI_MosiPin;//MOSI
   \   00000056   0xF89D 0x0067      LDRB     R0,[SP, #+103]
   \   0000005A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     62            PortPinsEnum_Type sck_pin = spi_init_structure.SPI_SckPin;  //SCK
   \   0000005E   0xF89D 0x0066      LDRB     R0,[SP, #+102]
   \   00000062   0xF88D 0x0003      STRB     R0,[SP, #+3]
     63            PortPinsEnum_Type pcs0_pin = spi_init_structure.SPI_Pcs0Pin;//PCS0
   \   00000066   0xF89D 0x0060      LDRB     R0,[SP, #+96]
   \   0000006A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     64            PortPinsEnum_Type pcs1_pin = spi_init_structure.SPI_Pcs1Pin;//PCS1
   \   0000006E   0xF89D 0x0061      LDRB     R0,[SP, #+97]
   \   00000072   0xF88D 0x0001      STRB     R0,[SP, #+1]
     65            PortPinsEnum_Type pcs2_pin = spi_init_structure.SPI_Pcs2Pin;//PCS2
   \   00000076   0xF89D 0x0062      LDRB     R0,[SP, #+98]
   \   0000007A   0xF88D 0x0007      STRB     R0,[SP, #+7]
     66            PortPinsEnum_Type pcs3_pin = spi_init_structure.SPI_Pcs3Pin;//PCS3
   \   0000007E   0xF89D 0x0063      LDRB     R0,[SP, #+99]
   \   00000082   0xF88D 0x0006      STRB     R0,[SP, #+6]
     67            PortPinsEnum_Type pcs4_pin = spi_init_structure.SPI_Pcs4Pin;//PCS4
   \   00000086   0xF89D 0x0064      LDRB     R0,[SP, #+100]
   \   0000008A   0xF88D 0x000B      STRB     R0,[SP, #+11]
     68            PortPinsEnum_Type pcs5_pin = spi_init_structure.SPI_Pcs5Pin;//PCS5
   \   0000008E   0xF89D 0x0065      LDRB     R0,[SP, #+101]
   \   00000092   0xF88D 0x000A      STRB     R0,[SP, #+10]
     69            //定义中断回掉函数
     70            SPI_ISR_CALLBACK TxComplete_isr = spi_init_structure.SPI_TxCompleteIntIsr;
   \   00000096   0x981B             LDR      R0,[SP, #+108]
   \   00000098   0x9009             STR      R0,[SP, #+36]
     71            SPI_ISR_CALLBACK QueueEndReq_isr = spi_init_structure.SPI_QueueEndIntIsr;
   \   0000009A   0x981C             LDR      R0,[SP, #+112]
   \   0000009C   0x9008             STR      R0,[SP, #+32]
     72            SPI_ISR_CALLBACK UnderflowInt_isr = spi_init_structure.SPI_TxFIFO_UnderflowIntIsr;
   \   0000009E   0x981D             LDR      R0,[SP, #+116]
   \   000000A0   0x9007             STR      R0,[SP, #+28]
     73            SPI_ISR_CALLBACK OverflowInt_isr = spi_init_structure.SPI_RxFIFO_OverflowIntIsr;
   \   000000A2   0x981E             LDR      R0,[SP, #+120]
   \   000000A4   0x9006             STR      R0,[SP, #+24]
     74            SPI_ISR_CALLBACK FillInt_isr = spi_init_structure.SPI_TxFIFO_FillIntIsr;
   \   000000A6   0x981F             LDR      R0,[SP, #+124]
   \   000000A8   0x9005             STR      R0,[SP, #+20]
     75            SPI_ISR_CALLBACK DrainInt_isr = spi_init_structure.SPI_RxFIFO_DrainIntIsr;
   \   000000AA   0x9820             LDR      R0,[SP, #+128]
   \   000000AC   0x9004             STR      R0,[SP, #+16]
     76            //检测参数
     77            ASSERT(spi_mode <= SPI_MODE_MASTER);
   \   000000AE   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD004             BEQ.N    ??LPLD_SPI_Init_0
   \   000000B6   0x214D             MOVS     R1,#+77
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   000000BC   0x.... 0x....      BL       assert_failed
     78            ASSERT(sck_div <= SPI_SCK_DIV_32768);
   \                     ??LPLD_SPI_Init_0: (+1)
   \   000000C0   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000C4   0x2810             CMP      R0,#+16
   \   000000C6   0xDB04             BLT.N    ??LPLD_SPI_Init_1
   \   000000C8   0x214E             MOVS     R1,#+78
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   000000CE   0x.... 0x....      BL       assert_failed
     79          
     80            if(spix == SPI0)
   \                     ??LPLD_SPI_Init_1: (+1)
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4002c000
   \   000000D6   0x4284             CMP      R4,R0
   \   000000D8   0xF040 0x8084      BNE.W    ??LPLD_SPI_Init_2
     81            {
     82          #if defined(CPU_MK60D10)  
     83              SIM->SCGC6 |= SIM_SCGC6_SPI0_MASK; 
     84          #elif defined(CPU_MK60DZ10) || defined(CPU_MK60F12) || defined(CPU_MK60F15)
     85              SIM->SCGC6 |= SIM_SCGC6_DSPI0_MASK;  
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4004803c
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x4004803c
   \   000000EA   0x6008             STR      R0,[R1, #+0]
     86          #endif
     87               
     88              //选择PCS0
     89              if(pcs0_pin == PTA14)
   \   000000EC   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000000F0   0x280E             CMP      R0,#+14
   \   000000F2   0xD105             BNE.N    ??LPLD_SPI_Init_3
     90              {
     91                PORTA->PCR[14] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000000F4   0xF44F 0x7010      MOV      R0,#+576
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable8_5  ;; 0x40049038
   \   000000FC   0x6008             STR      R0,[R1, #+0]
   \   000000FE   0xE004             B.N      ??LPLD_SPI_Init_4
     92              }
     93              else//pcs0_pin == PTC4
     94              {
     95                PORTC->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_3: (+1)
   \   00000100   0xF44F 0x7010      MOV      R0,#+576
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x4004b010
   \   00000108   0x6008             STR      R0,[R1, #+0]
     96              }
     97              //选择PCS1
     98              if(pcs1_pin == PTC3)
   \                     ??LPLD_SPI_Init_4: (+1)
   \   0000010A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000010E   0x283F             CMP      R0,#+63
   \   00000110   0xD105             BNE.N    ??LPLD_SPI_Init_5
     99              {
    100                PORTC->PCR[3]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000112   0xF44F 0x7010      MOV      R0,#+576
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable8_7  ;; 0x4004b00c
   \   0000011A   0x6008             STR      R0,[R1, #+0]
   \   0000011C   0xE004             B.N      ??LPLD_SPI_Init_6
    101              }
    102              else //pcs1_pin == PTD4
    103              {
    104                PORTD->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_5: (+1)
   \   0000011E   0xF44F 0x7010      MOV      R0,#+576
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable8_8  ;; 0x4004c010
   \   00000126   0x6008             STR      R0,[R1, #+0]
    105              }
    106              //选择PCS2
    107              if(pcs2_pin == PTC2)
   \                     ??LPLD_SPI_Init_6: (+1)
   \   00000128   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   0000012C   0x283E             CMP      R0,#+62
   \   0000012E   0xD105             BNE.N    ??LPLD_SPI_Init_7
    108              {
    109                PORTC->PCR[2]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000130   0xF44F 0x7010      MOV      R0,#+576
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable8_9  ;; 0x4004b008
   \   00000138   0x6008             STR      R0,[R1, #+0]
   \   0000013A   0xE004             B.N      ??LPLD_SPI_Init_8
    110              }
    111              else //pcs2_pin == PTD5
    112              {
    113                PORTD->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_7: (+1)
   \   0000013C   0xF44F 0x7010      MOV      R0,#+576
   \   00000140   0x.... 0x....      LDR.W    R1,??DataTable8_10  ;; 0x4004c014
   \   00000144   0x6008             STR      R0,[R1, #+0]
    114              }
    115              //选择PCS3
    116              if(pcs3_pin == PTC1)
   \                     ??LPLD_SPI_Init_8: (+1)
   \   00000146   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000014A   0x283D             CMP      R0,#+61
   \   0000014C   0xD105             BNE.N    ??LPLD_SPI_Init_9
    117              {
    118                PORTC->PCR[1]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000014E   0xF44F 0x7010      MOV      R0,#+576
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable8_11  ;; 0x4004b004
   \   00000156   0x6008             STR      R0,[R1, #+0]
   \   00000158   0xE004             B.N      ??LPLD_SPI_Init_10
    119              }
    120              else //pcs3_pin == PTD6
    121              {
    122                PORTD->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_9: (+1)
   \   0000015A   0xF44F 0x7010      MOV      R0,#+576
   \   0000015E   0x.... 0x....      LDR.W    R1,??DataTable8_12  ;; 0x4004c018
   \   00000162   0x6008             STR      R0,[R1, #+0]
    123              }
    124              //选择PCS4
    125              if(pcs4_pin == PTC0)
   \                     ??LPLD_SPI_Init_10: (+1)
   \   00000164   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   00000168   0x283C             CMP      R0,#+60
   \   0000016A   0xD104             BNE.N    ??LPLD_SPI_Init_11
    126              {
    127                PORTC->PCR[0]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000016C   0xF44F 0x7010      MOV      R0,#+576
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable8_13  ;; 0x4004b000
   \   00000174   0x6008             STR      R0,[R1, #+0]
    128              }
    129              //选择PCS5
    130              if(pcs5_pin == PTB23)
   \                     ??LPLD_SPI_Init_11: (+1)
   \   00000176   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   0000017A   0x2837             CMP      R0,#+55
   \   0000017C   0xD104             BNE.N    ??LPLD_SPI_Init_12
    131              {
    132                PORTB->PCR[23] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
   \   0000017E   0xF44F 0x7050      MOV      R0,#+832
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable8_14  ;; 0x4004a05c
   \   00000186   0x6008             STR      R0,[R1, #+0]
    133              }
    134          
    135              //选择SCK
    136              if(sck_pin == PTA15)
   \                     ??LPLD_SPI_Init_12: (+1)
   \   00000188   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000018C   0x280F             CMP      R0,#+15
   \   0000018E   0xD105             BNE.N    ??LPLD_SPI_Init_13
    137              {
    138                PORTA->PCR[15] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \   00000190   0xF44F 0x7010      MOV      R0,#+576
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable8_15  ;; 0x4004903c
   \   00000198   0x6008             STR      R0,[R1, #+0]
   \   0000019A   0xE004             B.N      ??LPLD_SPI_Init_14
    139              }
    140              else //sck_pin == PTC5
    141              {
    142                PORTC->PCR[5] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_13: (+1)
   \   0000019C   0xF44F 0x7010      MOV      R0,#+576
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable8_16  ;; 0x4004b014
   \   000001A4   0x6008             STR      R0,[R1, #+0]
    143              }
    144              //选择MOSI
    145              if(mosi_pin == PTA16)
   \                     ??LPLD_SPI_Init_14: (+1)
   \   000001A6   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001AA   0x2810             CMP      R0,#+16
   \   000001AC   0xD105             BNE.N    ??LPLD_SPI_Init_15
    146              {
    147                PORTA->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   000001AE   0xF44F 0x7010      MOV      R0,#+576
   \   000001B2   0x.... 0x....      LDR.W    R1,??DataTable8_17  ;; 0x40049040
   \   000001B6   0x6008             STR      R0,[R1, #+0]
   \   000001B8   0xE004             B.N      ??LPLD_SPI_Init_16
    148              }
    149              else //mosi_pin == PTC6
    150              {
    151                PORTC->PCR[6] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_15: (+1)
   \   000001BA   0xF44F 0x7010      MOV      R0,#+576
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable8_18  ;; 0x4004b018
   \   000001C2   0x6008             STR      R0,[R1, #+0]
    152              }
    153              //选择MISO
    154              if(miso_pin == PTA17)
   \                     ??LPLD_SPI_Init_16: (+1)
   \   000001C4   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000001C8   0x2811             CMP      R0,#+17
   \   000001CA   0xD105             BNE.N    ??LPLD_SPI_Init_17
    155              {
    156                PORTA->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
   \   000001CC   0xF44F 0x7000      MOV      R0,#+512
   \   000001D0   0x.... 0x....      LDR.W    R1,??DataTable8_19  ;; 0x40049044
   \   000001D4   0x6008             STR      R0,[R1, #+0]
   \   000001D6   0xE0C3             B.N      ??LPLD_SPI_Init_18
    157              }
    158              else //miso_pin == PTC7
    159              {
    160                PORTC->PCR[7] = 0 | PORT_PCR_MUX(2); //SIN
   \                     ??LPLD_SPI_Init_17: (+1)
   \   000001D8   0xF44F 0x7000      MOV      R0,#+512
   \   000001DC   0x.... 0x....      LDR.W    R1,??DataTable8_20  ;; 0x4004b01c
   \   000001E0   0x6008             STR      R0,[R1, #+0]
   \   000001E2   0xE0BD             B.N      ??LPLD_SPI_Init_18
    161              } 
    162            
    163            }
    164            else if(spix == SPI1)
   \                     ??LPLD_SPI_Init_2: (+1)
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable8_21  ;; 0x4002d000
   \   000001E8   0x4284             CMP      R4,R0
   \   000001EA   0xD165             BNE.N    ??LPLD_SPI_Init_19
    165            {
    166          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)  
    167              SIM->SCGC6 |= SIM_SCGC6_SPI1_MASK; 
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4004803c
   \   000001F0   0x6800             LDR      R0,[R0, #+0]
   \   000001F2   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   000001F6   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x4004803c
   \   000001FA   0x6008             STR      R0,[R1, #+0]
    168          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    169              SIM->SCGC6 |= SIM_SCGC6_DSPI1_MASK; 
    170          #endif
    171              //选择PCS0
    172              if(pcs0_pin == PTB10)
   \   000001FC   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000200   0x282A             CMP      R0,#+42
   \   00000202   0xD105             BNE.N    ??LPLD_SPI_Init_20
    173              {
    174                PORTB->PCR[10] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000204   0xF44F 0x7010      MOV      R0,#+576
   \   00000208   0x.... 0x....      LDR.W    R1,??DataTable8_22  ;; 0x4004a028
   \   0000020C   0x6008             STR      R0,[R1, #+0]
   \   0000020E   0xE004             B.N      ??LPLD_SPI_Init_21
    175              }
    176              else//pcs0_pin == PTE4
    177              {
    178                PORTE->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_20: (+1)
   \   00000210   0xF44F 0x7010      MOV      R0,#+576
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable8_23  ;; 0x4004d010
   \   00000218   0x6008             STR      R0,[R1, #+0]
    179              }
    180              //选择PCS1
    181              if(pcs1_pin == PTB9)
   \                     ??LPLD_SPI_Init_21: (+1)
   \   0000021A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000021E   0x2829             CMP      R0,#+41
   \   00000220   0xD105             BNE.N    ??LPLD_SPI_Init_22
    182              {
    183                PORTB->PCR[9]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000222   0xF44F 0x7010      MOV      R0,#+576
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable8_24  ;; 0x4004a024
   \   0000022A   0x6008             STR      R0,[R1, #+0]
   \   0000022C   0xE004             B.N      ??LPLD_SPI_Init_23
    184              }
    185              else //pcs1_pin == PTE0
    186              {
    187                PORTE->PCR[0] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_22: (+1)
   \   0000022E   0xF44F 0x7010      MOV      R0,#+576
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable8_25  ;; 0x4004d000
   \   00000236   0x6008             STR      R0,[R1, #+0]
    188              }
    189              //选择PCS2
    190              if(pcs2_pin == PTE5)
   \                     ??LPLD_SPI_Init_23: (+1)
   \   00000238   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   0000023C   0x2881             CMP      R0,#+129
   \   0000023E   0xD104             BNE.N    ??LPLD_SPI_Init_24
    191              {
    192                PORTE->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000240   0xF44F 0x7010      MOV      R0,#+576
   \   00000244   0x.... 0x....      LDR.W    R1,??DataTable8_26  ;; 0x4004d014
   \   00000248   0x6008             STR      R0,[R1, #+0]
    193              }
    194          
    195              //选择PCS3
    196              if(pcs3_pin == PTE6)
   \                     ??LPLD_SPI_Init_24: (+1)
   \   0000024A   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000024E   0x2882             CMP      R0,#+130
   \   00000250   0xD104             BNE.N    ??LPLD_SPI_Init_25
    197              {
    198                PORTE->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000252   0xF44F 0x7010      MOV      R0,#+576
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable8_27  ;; 0x4004d018
   \   0000025A   0x6008             STR      R0,[R1, #+0]
    199              }
    200          
    201              //选择SCK
    202              if(sck_pin == PTB11)
   \                     ??LPLD_SPI_Init_25: (+1)
   \   0000025C   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000260   0x282B             CMP      R0,#+43
   \   00000262   0xD105             BNE.N    ??LPLD_SPI_Init_26
    203              {
    204                PORTB->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000264   0xF44F 0x7010      MOV      R0,#+576
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable8_28  ;; 0x4004a02c
   \   0000026C   0x6008             STR      R0,[R1, #+0]
   \   0000026E   0xE004             B.N      ??LPLD_SPI_Init_27
    205              }
    206              else //sck_pin == PTE2
    207              {
    208                PORTE->PCR[2] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_26: (+1)
   \   00000270   0xF44F 0x7010      MOV      R0,#+576
   \   00000274   0x.... 0x....      LDR.W    R1,??DataTable8_29  ;; 0x4004d008
   \   00000278   0x6008             STR      R0,[R1, #+0]
    209              }
    210              //选择MOSI
    211              if(mosi_pin == PTB16)
   \                     ??LPLD_SPI_Init_27: (+1)
   \   0000027A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000027E   0x2830             CMP      R0,#+48
   \   00000280   0xD105             BNE.N    ??LPLD_SPI_Init_28
    212              {
    213                PORTB->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   00000282   0xF44F 0x7010      MOV      R0,#+576
   \   00000286   0x.... 0x....      LDR.W    R1,??DataTable8_30  ;; 0x4004a040
   \   0000028A   0x6008             STR      R0,[R1, #+0]
   \   0000028C   0xE004             B.N      ??LPLD_SPI_Init_29
    214              }
    215              else //mosi_pin == PTE1
    216              {
    217                PORTE->PCR[1] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_28: (+1)
   \   0000028E   0xF44F 0x7010      MOV      R0,#+576
   \   00000292   0x.... 0x....      LDR.W    R1,??DataTable8_31  ;; 0x4004d004
   \   00000296   0x6008             STR      R0,[R1, #+0]
    218              }
    219              //选择MISO
    220              if(miso_pin == PTB17)
   \                     ??LPLD_SPI_Init_29: (+1)
   \   00000298   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000029C   0x2831             CMP      R0,#+49
   \   0000029E   0xD105             BNE.N    ??LPLD_SPI_Init_30
    221              {
    222                PORTB->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
   \   000002A0   0xF44F 0x7000      MOV      R0,#+512
   \   000002A4   0x.... 0x....      LDR.W    R1,??DataTable8_32  ;; 0x4004a044
   \   000002A8   0x6008             STR      R0,[R1, #+0]
   \   000002AA   0xE059             B.N      ??LPLD_SPI_Init_18
    223              }
    224              else //miso_pin == PTE3
    225              {
    226                PORTE->PCR[3] = 0 | PORT_PCR_MUX(2); //SIN
   \                     ??LPLD_SPI_Init_30: (+1)
   \   000002AC   0xF44F 0x7000      MOV      R0,#+512
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable8_33  ;; 0x4004d00c
   \   000002B4   0x6008             STR      R0,[R1, #+0]
   \   000002B6   0xE053             B.N      ??LPLD_SPI_Init_18
    227              } 
    228            }
    229            else if(spix == SPI2)
   \                     ??LPLD_SPI_Init_19: (+1)
   \   000002B8   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x400ac000
   \   000002BC   0x4284             CMP      R4,R0
   \   000002BE   0xD14D             BNE.N    ??LPLD_SPI_Init_31
    230            {
    231          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    232              SIM->SCGC3 |= SIM_SCGC3_SPI2_MASK; 
   \   000002C0   0x.... 0x....      LDR.W    R0,??DataTable8_35  ;; 0x40048030
   \   000002C4   0x6800             LDR      R0,[R0, #+0]
   \   000002C6   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000002CA   0x.... 0x....      LDR.W    R1,??DataTable8_35  ;; 0x40048030
   \   000002CE   0x6008             STR      R0,[R1, #+0]
    233          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    234              SIM->SCGC3 |= SIM_SCGC3_DSPI2_MASK; 
    235          #endif
    236              //选择PCS0
    237              if(pcs0_pin == PTD11)
   \   000002D0   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000002D4   0x2867             CMP      R0,#+103
   \   000002D6   0xD105             BNE.N    ??LPLD_SPI_Init_32
    238              {
    239                PORTD->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000002D8   0xF44F 0x7010      MOV      R0,#+576
   \   000002DC   0x.... 0x....      LDR.W    R1,??DataTable8_36  ;; 0x4004c02c
   \   000002E0   0x6008             STR      R0,[R1, #+0]
   \   000002E2   0xE004             B.N      ??LPLD_SPI_Init_33
    240              }
    241              else//pcs0_pin == PTB20
    242              {
    243                PORTB->PCR[20] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_32: (+1)
   \   000002E4   0xF44F 0x7010      MOV      R0,#+576
   \   000002E8   0x.... 0x....      LDR.W    R1,??DataTable8_37  ;; 0x4004a050
   \   000002EC   0x6008             STR      R0,[R1, #+0]
    244              }
    245              //选择PCS1
    246              if(pcs1_pin == PTD15)
   \                     ??LPLD_SPI_Init_33: (+1)
   \   000002EE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000002F2   0x286B             CMP      R0,#+107
   \   000002F4   0xD104             BNE.N    ??LPLD_SPI_Init_34
    247              {
    248                PORTD->PCR[15]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000002F6   0xF44F 0x7010      MOV      R0,#+576
   \   000002FA   0x.... 0x....      LDR.W    R1,??DataTable8_38  ;; 0x4004c03c
   \   000002FE   0x6008             STR      R0,[R1, #+0]
    249              }
    250          
    251              //选择SCK
    252              if(sck_pin == PTD12)
   \                     ??LPLD_SPI_Init_34: (+1)
   \   00000300   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000304   0x2868             CMP      R0,#+104
   \   00000306   0xD105             BNE.N    ??LPLD_SPI_Init_35
    253              {
    254                PORTD->PCR[12] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000308   0xF44F 0x7010      MOV      R0,#+576
   \   0000030C   0x.... 0x....      LDR.W    R1,??DataTable8_39  ;; 0x4004c030
   \   00000310   0x6008             STR      R0,[R1, #+0]
   \   00000312   0xE004             B.N      ??LPLD_SPI_Init_36
    255              }
    256              else //sck_pin == PTB21
    257              {
    258                PORTB->PCR[21] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_35: (+1)
   \   00000314   0xF44F 0x7010      MOV      R0,#+576
   \   00000318   0x.... 0x....      LDR.W    R1,??DataTable8_40  ;; 0x4004a054
   \   0000031C   0x6008             STR      R0,[R1, #+0]
    259              }
    260              //选择MOSI
    261              if(mosi_pin == PTD13)
   \                     ??LPLD_SPI_Init_36: (+1)
   \   0000031E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000322   0x2869             CMP      R0,#+105
   \   00000324   0xD105             BNE.N    ??LPLD_SPI_Init_37
    262              {
    263                PORTD->PCR[13] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   00000326   0xF44F 0x7010      MOV      R0,#+576
   \   0000032A   0x.... 0x....      LDR.W    R1,??DataTable8_41  ;; 0x4004c034
   \   0000032E   0x6008             STR      R0,[R1, #+0]
   \   00000330   0xE004             B.N      ??LPLD_SPI_Init_38
    264              }
    265              else //mosi_pin == PTB22
    266              {
    267                PORTB->PCR[22] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_37: (+1)
   \   00000332   0xF44F 0x7010      MOV      R0,#+576
   \   00000336   0x.... 0x....      LDR.W    R1,??DataTable8_42  ;; 0x4004a058
   \   0000033A   0x6008             STR      R0,[R1, #+0]
    268              }
    269              //选择MISO
    270              if(miso_pin == PTD14)
   \                     ??LPLD_SPI_Init_38: (+1)
   \   0000033C   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000340   0x286A             CMP      R0,#+106
   \   00000342   0xD105             BNE.N    ??LPLD_SPI_Init_39
    271              {
    272                PORTD->PCR[14] = 0 | PORT_PCR_MUX(2); //SIN
   \   00000344   0xF44F 0x7000      MOV      R0,#+512
   \   00000348   0x.... 0x....      LDR.W    R1,??DataTable8_43  ;; 0x4004c038
   \   0000034C   0x6008             STR      R0,[R1, #+0]
   \   0000034E   0xE007             B.N      ??LPLD_SPI_Init_18
    273              }
    274              else //miso_pin == PTB23
    275              {
    276                PORTB->PCR[23] = 0 | PORT_PCR_MUX(2); //SIN
   \                     ??LPLD_SPI_Init_39: (+1)
   \   00000350   0xF44F 0x7000      MOV      R0,#+512
   \   00000354   0x.... 0x....      LDR.W    R1,??DataTable8_14  ;; 0x4004a05c
   \   00000358   0x6008             STR      R0,[R1, #+0]
   \   0000035A   0xE001             B.N      ??LPLD_SPI_Init_18
    277              } 
    278            }
    279            else
    280              return 0;
   \                     ??LPLD_SPI_Init_31: (+1)
   \   0000035C   0x2000             MOVS     R0,#+0
   \   0000035E   0xE177             B.N      ??LPLD_SPI_Init_40
    281            //配置SPI MCR寄存器
    282            spix->MCR = 0 & (~SPI_MCR_MDIS_MASK)        
    283                          |SPI_MCR_HALT_MASK        
    284                          |SPI_MCR_PCSIS_MASK       
    285                          |SPI_MCR_CLR_TXF_MASK    
    286                          |SPI_MCR_CLR_RXF_MASK;  
   \                     ??LPLD_SPI_Init_18: (+1)
   \   00000360   0x.... 0x....      LDR.W    R0,??DataTable8_44  ;; 0x3f0c01
   \   00000364   0x6020             STR      R0,[R4, #+0]
    287            //选择SPI 工作模式
    288            if(spi_mode == SPI_MODE_SLAVE)
   \   00000366   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000036A   0x2801             CMP      R0,#+1
   \   0000036C   0xD104             BNE.N    ??LPLD_SPI_Init_41
    289            {
    290              spix->MCR &= ~SPI_MCR_MSTR_MASK;//从机模式  
   \   0000036E   0x6820             LDR      R0,[R4, #+0]
   \   00000370   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   00000372   0x0840             LSRS     R0,R0,#+1
   \   00000374   0x6020             STR      R0,[R4, #+0]
   \   00000376   0xE003             B.N      ??LPLD_SPI_Init_42
    291            }
    292            else
    293            {
    294              spix->MCR |= SPI_MCR_MSTR_MASK; //主机模式 
   \                     ??LPLD_SPI_Init_41: (+1)
   \   00000378   0x6820             LDR      R0,[R4, #+0]
   \   0000037A   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000037E   0x6020             STR      R0,[R4, #+0]
    295            }
    296            //选择使能tx FIFO
    297            if(txFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_42: (+1)
   \   00000380   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   00000384   0x2801             CMP      R0,#+1
   \   00000386   0xD104             BNE.N    ??LPLD_SPI_Init_43
    298            {
    299              spix->MCR &= ~SPI_MCR_DIS_TXF_MASK; 
   \   00000388   0x6820             LDR      R0,[R4, #+0]
   \   0000038A   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000038E   0x6020             STR      R0,[R4, #+0]
   \   00000390   0xE003             B.N      ??LPLD_SPI_Init_44
    300            }
    301            else
    302            {
    303              spix->MCR |= SPI_MCR_DIS_TXF_MASK;//选择传统方式
   \                     ??LPLD_SPI_Init_43: (+1)
   \   00000392   0x6820             LDR      R0,[R4, #+0]
   \   00000394   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000398   0x6020             STR      R0,[R4, #+0]
    304            }
    305            //选择使能Rx FIFO
    306            if(rxFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_44: (+1)
   \   0000039A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000039E   0x2801             CMP      R0,#+1
   \   000003A0   0xD104             BNE.N    ??LPLD_SPI_Init_45
    307            {
    308              spix->MCR &= ~SPI_MCR_DIS_RXF_MASK;
   \   000003A2   0x6820             LDR      R0,[R4, #+0]
   \   000003A4   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   000003A8   0x6020             STR      R0,[R4, #+0]
   \   000003AA   0xE003             B.N      ??LPLD_SPI_Init_46
    309            }
    310            else
    311            {
    312              spix->MCR |= SPI_MCR_DIS_RXF_MASK; //选择传统方式
   \                     ??LPLD_SPI_Init_45: (+1)
   \   000003AC   0x6820             LDR      R0,[R4, #+0]
   \   000003AE   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000003B2   0x6020             STR      R0,[R4, #+0]
    313            }
    314            //选择使能发送完成中断
    315            if(tx_complete_int == TRUE)
   \                     ??LPLD_SPI_Init_46: (+1)
   \   000003B4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000003B8   0x2801             CMP      R0,#+1
   \   000003BA   0xD104             BNE.N    ??LPLD_SPI_Init_47
    316            {
    317              spix->RSER |= SPI_RSER_TCF_RE_MASK; 
   \   000003BC   0x6B20             LDR      R0,[R4, #+48]
   \   000003BE   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000003C2   0x6320             STR      R0,[R4, #+48]
   \   000003C4   0xE003             B.N      ??LPLD_SPI_Init_48
    318            }
    319            else
    320            { 
    321              spix->RSER &= ~SPI_RSER_TCF_RE_MASK;
   \                     ??LPLD_SPI_Init_47: (+1)
   \   000003C6   0x6B20             LDR      R0,[R4, #+48]
   \   000003C8   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   000003CA   0x0840             LSRS     R0,R0,#+1
   \   000003CC   0x6320             STR      R0,[R4, #+48]
    322            }
    323            //选择使能发送队列结束中断
    324            if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_48: (+1)
   \   000003CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003D0   0x2D01             CMP      R5,#+1
   \   000003D2   0xD104             BNE.N    ??LPLD_SPI_Init_49
    325            {
    326              spix->RSER |=SPI_RSER_EOQF_RE_MASK;
   \   000003D4   0x6B20             LDR      R0,[R4, #+48]
   \   000003D6   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   000003DA   0x6320             STR      R0,[R4, #+48]
   \   000003DC   0xE003             B.N      ??LPLD_SPI_Init_50
    327            }
    328            else
    329              spix->RSER &= ~SPI_RSER_EOQF_RE_MASK;
   \                     ??LPLD_SPI_Init_49: (+1)
   \   000003DE   0x6B20             LDR      R0,[R4, #+48]
   \   000003E0   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   000003E4   0x6320             STR      R0,[R4, #+48]
    330            //选择使能txFIFO为空中断
    331            if(txFIFO_underflow_int== TRUE)
   \                     ??LPLD_SPI_Init_50: (+1)
   \   000003E6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003E8   0x2E01             CMP      R6,#+1
   \   000003EA   0xD104             BNE.N    ??LPLD_SPI_Init_51
    332            {
    333              spix->RSER |=SPI_RSER_TFUF_RE_MASK;
   \   000003EC   0x6B20             LDR      R0,[R4, #+48]
   \   000003EE   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   000003F2   0x6320             STR      R0,[R4, #+48]
   \   000003F4   0xE003             B.N      ??LPLD_SPI_Init_52
    334            }
    335            else
    336              spix->RSER &= ~SPI_RSER_TFUF_RE_MASK;
   \                     ??LPLD_SPI_Init_51: (+1)
   \   000003F6   0x6B20             LDR      R0,[R4, #+48]
   \   000003F8   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   000003FC   0x6320             STR      R0,[R4, #+48]
    337            //选择使能rxFIFO溢出中断
    338            if(rxFIFO_overflow_int== TRUE)
   \                     ??LPLD_SPI_Init_52: (+1)
   \   000003FE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000400   0x2F01             CMP      R7,#+1
   \   00000402   0xD104             BNE.N    ??LPLD_SPI_Init_53
    339            {
    340              spix->RSER |=SPI_RSER_RFOF_RE_MASK;
   \   00000404   0x6B20             LDR      R0,[R4, #+48]
   \   00000406   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000040A   0x6320             STR      R0,[R4, #+48]
   \   0000040C   0xE003             B.N      ??LPLD_SPI_Init_54
    341            }
    342            else
    343            {
    344              spix->RSER &= ~SPI_RSER_RFOF_RE_MASK;
   \                     ??LPLD_SPI_Init_53: (+1)
   \   0000040E   0x6B20             LDR      R0,[R4, #+48]
   \   00000410   0xF430 0x2000      BICS     R0,R0,#0x80000
   \   00000414   0x6320             STR      R0,[R4, #+48]
    345            }
    346            //选择使能txFIFO有数据进入队列中断或者DMA请求
    347            if(txFIFO_Fill_int== TRUE)
   \                     ??LPLD_SPI_Init_54: (+1)
   \   00000416   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000041A   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000041E   0xD104             BNE.N    ??LPLD_SPI_Init_55
    348            {
    349              spix->RSER |=SPI_RSER_TFFF_RE_MASK;
   \   00000420   0x6B20             LDR      R0,[R4, #+48]
   \   00000422   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000426   0x6320             STR      R0,[R4, #+48]
   \   00000428   0xE003             B.N      ??LPLD_SPI_Init_56
    350            }
    351            else
    352            {
    353              spix->RSER &= ~SPI_RSER_TFFF_RE_MASK;
   \                     ??LPLD_SPI_Init_55: (+1)
   \   0000042A   0x6B20             LDR      R0,[R4, #+48]
   \   0000042C   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   00000430   0x6320             STR      R0,[R4, #+48]
    354            }
    355            //选择使能rxFIFO非空中断或者DMA请求
    356            if(rxFIFO_Drain_int== TRUE)
   \                     ??LPLD_SPI_Init_56: (+1)
   \   00000432   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000436   0xF1B9 0x0F01      CMP      R9,#+1
   \   0000043A   0xD104             BNE.N    ??LPLD_SPI_Init_57
    357            {
    358              spix->RSER |=SPI_RSER_RFDF_RE_MASK;
   \   0000043C   0x6B20             LDR      R0,[R4, #+48]
   \   0000043E   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000442   0x6320             STR      R0,[R4, #+48]
   \   00000444   0xE003             B.N      ??LPLD_SPI_Init_58
    359            }
    360            else
    361            {
    362              spix->RSER &= ~SPI_RSER_RFDF_RE_MASK;
   \                     ??LPLD_SPI_Init_57: (+1)
   \   00000446   0x6B20             LDR      R0,[R4, #+48]
   \   00000448   0xF430 0x3000      BICS     R0,R0,#0x20000
   \   0000044C   0x6320             STR      R0,[R4, #+48]
    363            }
    364            //选择使能txFIFO中断或者DMA请求
    365            if(txFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_58: (+1)
   \   0000044E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000452   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000456   0xD104             BNE.N    ??LPLD_SPI_Init_59
    366            {
    367              spix->RSER |=SPI_RSER_TFFF_DIRS_MASK;
   \   00000458   0x6B20             LDR      R0,[R4, #+48]
   \   0000045A   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000045E   0x6320             STR      R0,[R4, #+48]
   \   00000460   0xE003             B.N      ??LPLD_SPI_Init_60
    368            }
    369            else
    370            {
    371              spix->RSER &= ~SPI_RSER_TFFF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_59: (+1)
   \   00000462   0x6B20             LDR      R0,[R4, #+48]
   \   00000464   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000468   0x6320             STR      R0,[R4, #+48]
    372            }
    373            //选择使能rxFIFO中断或者DMA请求
    374            if(rxFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_60: (+1)
   \   0000046A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000046E   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000472   0xD104             BNE.N    ??LPLD_SPI_Init_61
    375            {
    376              spix->RSER |= SPI_RSER_RFDF_DIRS_MASK;
   \   00000474   0x6B20             LDR      R0,[R4, #+48]
   \   00000476   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   0000047A   0x6320             STR      R0,[R4, #+48]
   \   0000047C   0xE003             B.N      ??LPLD_SPI_Init_62
    377            }
    378            else 
    379            {
    380              spix->RSER &= ~SPI_RSER_RFDF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_61: (+1)
   \   0000047E   0x6B20             LDR      R0,[R4, #+48]
   \   00000480   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   00000484   0x6320             STR      R0,[R4, #+48]
    381            }
    382            //添加中断回调函数
    383          
    384            if(spix == SPI0)
   \                     ??LPLD_SPI_Init_62: (+1)
   \   00000486   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4002c000
   \   0000048A   0x4284             CMP      R4,R0
   \   0000048C   0xD13B             BNE.N    ??LPLD_SPI_Init_63
    385            {
    386              if(tx_complete_int == TRUE)
   \   0000048E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000492   0x2801             CMP      R0,#+1
   \   00000494   0xD103             BNE.N    ??LPLD_SPI_Init_64
    387              { SPI0_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000496   0x9809             LDR      R0,[SP, #+36]
   \   00000498   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   0000049C   0x6008             STR      R0,[R1, #+0]
    388              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_64: (+1)
   \   0000049E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004A0   0x2D01             CMP      R5,#+1
   \   000004A2   0xD103             BNE.N    ??LPLD_SPI_Init_65
    389              { SPI0_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   000004A4   0x9808             LDR      R0,[SP, #+32]
   \   000004A6   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000004AA   0x6048             STR      R0,[R1, #+4]
    390              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_65: (+1)
   \   000004AC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004AE   0x2E01             CMP      R6,#+1
   \   000004B0   0xD103             BNE.N    ??LPLD_SPI_Init_66
    391              { SPI0_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   000004B2   0x9807             LDR      R0,[SP, #+28]
   \   000004B4   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000004B8   0x6088             STR      R0,[R1, #+8]
    392              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_66: (+1)
   \   000004BA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000004BC   0x2F01             CMP      R7,#+1
   \   000004BE   0xD103             BNE.N    ??LPLD_SPI_Init_67
    393              { SPI0_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   000004C0   0x9806             LDR      R0,[SP, #+24]
   \   000004C2   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000004C6   0x60C8             STR      R0,[R1, #+12]
    394              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_67: (+1)
   \   000004C8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000004CC   0xF1B8 0x0F01      CMP      R8,#+1
   \   000004D0   0xD108             BNE.N    ??LPLD_SPI_Init_68
   \   000004D2   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000004D6   0xF1BA 0x0F00      CMP      R10,#+0
   \   000004DA   0xD103             BNE.N    ??LPLD_SPI_Init_68
    395              { SPI0_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   000004DC   0x9805             LDR      R0,[SP, #+20]
   \   000004DE   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000004E2   0x6108             STR      R0,[R1, #+16]
    396              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_68: (+1)
   \   000004E4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000004E8   0xF1B9 0x0F01      CMP      R9,#+1
   \   000004EC   0xF040 0x8086      BNE.W    ??LPLD_SPI_Init_69
   \   000004F0   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000004F4   0xF1BB 0x0F00      CMP      R11,#+0
   \   000004F8   0xF040 0x8080      BNE.W    ??LPLD_SPI_Init_69
    397              { SPI0_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   000004FC   0x9804             LDR      R0,[SP, #+16]
   \   000004FE   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   00000502   0x6148             STR      R0,[R1, #+20]
   \   00000504   0xE07A             B.N      ??LPLD_SPI_Init_69
    398            }
    399            else if (spix == SPI1)
   \                     ??LPLD_SPI_Init_63: (+1)
   \   00000506   0x.... 0x....      LDR.W    R0,??DataTable8_21  ;; 0x4002d000
   \   0000050A   0x4284             CMP      R4,R0
   \   0000050C   0xD139             BNE.N    ??LPLD_SPI_Init_70
    400            {
    401              if(tx_complete_int == TRUE)
   \   0000050E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000512   0x2801             CMP      R0,#+1
   \   00000514   0xD103             BNE.N    ??LPLD_SPI_Init_71
    402              { SPI1_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000516   0x9809             LDR      R0,[SP, #+36]
   \   00000518   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000051C   0x6008             STR      R0,[R1, #+0]
    403              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_71: (+1)
   \   0000051E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000520   0x2D01             CMP      R5,#+1
   \   00000522   0xD103             BNE.N    ??LPLD_SPI_Init_72
    404              { SPI1_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   00000524   0x9808             LDR      R0,[SP, #+32]
   \   00000526   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000052A   0x6048             STR      R0,[R1, #+4]
    405              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_72: (+1)
   \   0000052C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000052E   0x2E01             CMP      R6,#+1
   \   00000530   0xD103             BNE.N    ??LPLD_SPI_Init_73
    406              { SPI1_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   00000532   0x9807             LDR      R0,[SP, #+28]
   \   00000534   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000538   0x6088             STR      R0,[R1, #+8]
    407              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_73: (+1)
   \   0000053A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000053C   0x2F01             CMP      R7,#+1
   \   0000053E   0xD103             BNE.N    ??LPLD_SPI_Init_74
    408              { SPI1_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   00000540   0x9806             LDR      R0,[SP, #+24]
   \   00000542   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000546   0x60C8             STR      R0,[R1, #+12]
    409              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_74: (+1)
   \   00000548   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000054C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000550   0xD108             BNE.N    ??LPLD_SPI_Init_75
   \   00000552   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000556   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000055A   0xD103             BNE.N    ??LPLD_SPI_Init_75
    410              { SPI1_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   0000055C   0x9805             LDR      R0,[SP, #+20]
   \   0000055E   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000562   0x6108             STR      R0,[R1, #+16]
    411              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_75: (+1)
   \   00000564   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000568   0xF1B9 0x0F01      CMP      R9,#+1
   \   0000056C   0xD146             BNE.N    ??LPLD_SPI_Init_69
   \   0000056E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000572   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000576   0xD141             BNE.N    ??LPLD_SPI_Init_69
    412              { SPI1_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   00000578   0x9804             LDR      R0,[SP, #+16]
   \   0000057A   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000057E   0x6148             STR      R0,[R1, #+20]
   \   00000580   0xE03C             B.N      ??LPLD_SPI_Init_69
    413            }
    414            else if (spix == SPI2)
   \                     ??LPLD_SPI_Init_70: (+1)
   \   00000582   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x400ac000
   \   00000586   0x4284             CMP      R4,R0
   \   00000588   0xD138             BNE.N    ??LPLD_SPI_Init_69
    415            {
    416              if(tx_complete_int == TRUE)
   \   0000058A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000058E   0x2801             CMP      R0,#+1
   \   00000590   0xD103             BNE.N    ??LPLD_SPI_Init_76
    417              { SPI2_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000592   0x9809             LDR      R0,[SP, #+36]
   \   00000594   0x.... 0x....      LDR.W    R1,??DataTable8_47
   \   00000598   0x6008             STR      R0,[R1, #+0]
    418              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_76: (+1)
   \   0000059A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000059C   0x2D01             CMP      R5,#+1
   \   0000059E   0xD103             BNE.N    ??LPLD_SPI_Init_77
    419              { SPI2_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   000005A0   0x9808             LDR      R0,[SP, #+32]
   \   000005A2   0x.... 0x....      LDR.W    R1,??DataTable8_47
   \   000005A6   0x6048             STR      R0,[R1, #+4]
    420              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_77: (+1)
   \   000005A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005AA   0x2E01             CMP      R6,#+1
   \   000005AC   0xD103             BNE.N    ??LPLD_SPI_Init_78
    421              { SPI2_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   000005AE   0x9807             LDR      R0,[SP, #+28]
   \   000005B0   0x.... 0x....      LDR.W    R1,??DataTable8_47
   \   000005B4   0x6088             STR      R0,[R1, #+8]
    422              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_78: (+1)
   \   000005B6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000005B8   0x2F01             CMP      R7,#+1
   \   000005BA   0xD103             BNE.N    ??LPLD_SPI_Init_79
    423              { SPI2_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   000005BC   0x9806             LDR      R0,[SP, #+24]
   \   000005BE   0x.... 0x....      LDR.W    R1,??DataTable8_47
   \   000005C2   0x60C8             STR      R0,[R1, #+12]
    424              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_79: (+1)
   \   000005C4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000005C8   0xF1B8 0x0F01      CMP      R8,#+1
   \   000005CC   0xD108             BNE.N    ??LPLD_SPI_Init_80
   \   000005CE   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000005D2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000005D6   0xD103             BNE.N    ??LPLD_SPI_Init_80
    425              { SPI2_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   000005D8   0x9805             LDR      R0,[SP, #+20]
   \   000005DA   0x.... 0x....      LDR.W    R1,??DataTable8_47
   \   000005DE   0x6108             STR      R0,[R1, #+16]
    426              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_80: (+1)
   \   000005E0   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000005E4   0xF1B9 0x0F01      CMP      R9,#+1
   \   000005E8   0xD108             BNE.N    ??LPLD_SPI_Init_69
   \   000005EA   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000005EE   0xF1BB 0x0F00      CMP      R11,#+0
   \   000005F2   0xD103             BNE.N    ??LPLD_SPI_Init_69
    427              { SPI2_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   000005F4   0x9804             LDR      R0,[SP, #+16]
   \   000005F6   0x.... 0x....      LDR.W    R1,??DataTable8_47
   \   000005FA   0x6148             STR      R0,[R1, #+20]
    428            }
    429            //配置SPI CTAR寄存器，设置SPI的总线时序
    430            spix->CTAR[0] = 0 & (~SPI_CTAR_LSBFE_MASK)
    431                                |SPI_CTAR_DBR_MASK  
    432                                |SPI_CTAR_PBR(0)           
    433                                |SPI_CTAR_FMSZ(7);        
   \                     ??LPLD_SPI_Init_69: (+1)
   \   000005FC   0xF05F 0x4038      MOVS     R0,#-1207959552
   \   00000600   0x60E0             STR      R0,[R4, #+12]
    434                                 
    435            //设置SPI总线频率
    436            //SCK总线频率 = g_bus_clock/ SCK_DIV_x                                             
    437            spix->CTAR[0] |=SPI_CTAR_BR(sck_div);
   \   00000602   0x68E0             LDR      R0,[R4, #+12]
   \   00000604   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000608   0xF011 0x010F      ANDS     R1,R1,#0xF
   \   0000060C   0x4308             ORRS     R0,R1,R0
   \   0000060E   0x60E0             STR      R0,[R4, #+12]
    438          
    439            //tCSC = (1/g_bus_clock) x PCSSCK x CSSCK
    440            //tCSC = 1/50,000,000 x PCSSCK x CSSCK
    441            spix->CTAR[0] |=SPI_CTAR_PCSSCK(1); 
   \   00000610   0x68E0             LDR      R0,[R4, #+12]
   \   00000612   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   00000616   0x60E0             STR      R0,[R4, #+12]
    442            spix->CTAR[0] |=SPI_CTAR_CSSCK(1);  
   \   00000618   0x68E0             LDR      R0,[R4, #+12]
   \   0000061A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000061E   0x60E0             STR      R0,[R4, #+12]
    443            
    444            //tDT = (1/g_bus_clock) x PDT x DT
    445            spix->CTAR[0] |=SPI_CTAR_DT(1);
   \   00000620   0x68E0             LDR      R0,[R4, #+12]
   \   00000622   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000626   0x60E0             STR      R0,[R4, #+12]
    446            spix->CTAR[0] |=SPI_CTAR_PDT(1);
   \   00000628   0x68E0             LDR      R0,[R4, #+12]
   \   0000062A   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000062E   0x60E0             STR      R0,[R4, #+12]
    447            
    448            //Config the Delay of the last edge of SCK and the negation of PCS
    449            //tASC = (1/g_bus_clock) x PASC x ASC
    450            spix->CTAR[0] |=SPI_CTAR_PASC(1);
   \   00000630   0x68E0             LDR      R0,[R4, #+12]
   \   00000632   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   00000636   0x60E0             STR      R0,[R4, #+12]
    451            spix->CTAR[0] |=SPI_CTAR_ASC(1);
   \   00000638   0x68E0             LDR      R0,[R4, #+12]
   \   0000063A   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000063E   0x60E0             STR      R0,[R4, #+12]
    452            //清除标志位
    453            spix->SR =  SPI_SR_RFDF_MASK   
    454                        |SPI_SR_RFOF_MASK
    455                        |SPI_SR_TFFF_MASK
    456                        |SPI_SR_TFUF_MASK
    457                        |SPI_SR_TCF_MASK
    458                        |SPI_SR_EOQF_MASK;
   \   00000640   0x.... 0x....      LDR.W    R0,??DataTable8_48  ;; 0x9a0a0000
   \   00000644   0x62E0             STR      R0,[R4, #+44]
    459            //使能SPIx
    460            spix->MCR &=~SPI_MCR_HALT_MASK; 
   \   00000646   0x6820             LDR      R0,[R4, #+0]
   \   00000648   0x0840             LSRS     R0,R0,#+1
   \   0000064A   0x0040             LSLS     R0,R0,#+1
   \   0000064C   0x6020             STR      R0,[R4, #+0]
    461            
    462            return 1;
   \   0000064E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Init_40: (+1)
   \   00000650   0xB00B             ADD      SP,SP,#+44
   \   00000652   0xE8BD 0x0FF0      POP      {R4-R11}
   \   00000656   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    463          }
    464          
    465          /*
    466           * LPLD_SPI_Deinit
    467           * SPI反初始化函数,在该函数中将SPI设置成为暂停模式，关闭SPI总线时钟，
    468           * 关闭SPI外设中断
    469           * 
    470           * 参数:
    471           *    spi_init_structure--SPI初始化结构体，
    472           *                        具体定义见SPI_InitTypeDef
    473           *
    474           * 输出:
    475           *    0--配置错误
    476           *    1--配置成功
    477           */

   \                                 In section .text, align 2, keep-with-next
    478          uint8 LPLD_SPI_Deinit(SPI_InitTypeDef spi_init_structure)
    479          {
   \                     LPLD_SPI_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    480            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9C02             LDR      R4,[SP, #+8]
    481            spix->MCR |= SPI_MCR_HALT_MASK; //
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000C   0x6020             STR      R0,[R4, #+0]
    482            if(spix == SPI0)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4002c000
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD10B             BNE.N    ??LPLD_SPI_Deinit_0
    483            {
    484              disable_irq(SPI0_IRQn);
   \   00000016   0x201A             MOVS     R0,#+26
   \   00000018   0x.... 0x....      BL       NVIC_DisableIRQ
    485          #if defined(CPU_MK60D10)
    486              SIM->SCGC6 &= ~SIM_SCGC6_SPI0_MASK;
    487          #elif defined(CPU_MK60DZ10) || defined(CPU_MK60F12) || defined(CPU_MK60F15)
    488              SIM->SCGC6 &= ~SIM_SCGC6_DSPI0_MASK;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4004803c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x4004803c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0xE021             B.N      ??LPLD_SPI_Deinit_1
    489          #endif 
    490            }
    491            else if(spix == SPI1)
   \                     ??LPLD_SPI_Deinit_0: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable8_21  ;; 0x4002d000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD10B             BNE.N    ??LPLD_SPI_Deinit_2
    492            {
    493              disable_irq(SPI1_IRQn);
   \   00000036   0x201B             MOVS     R0,#+27
   \   00000038   0x.... 0x....      BL       NVIC_DisableIRQ
    494          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    495              SIM->SCGC6 &= ~SIM_SCGC6_SPI1_MASK; 
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4004803c
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x4004803c
   \   0000004A   0x6008             STR      R0,[R1, #+0]
   \   0000004C   0xE011             B.N      ??LPLD_SPI_Deinit_1
    496          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    497              SIM->SCGC6 &= ~SIM_SCGC6_DSPI1_MASK; 
    498          #endif
    499            }
    500            else if(spix == SPI2)
   \                     ??LPLD_SPI_Deinit_2: (+1)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x400ac000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD10B             BNE.N    ??LPLD_SPI_Deinit_3
    501            {
    502              disable_irq(SPI2_IRQn);
   \   00000056   0x201C             MOVS     R0,#+28
   \   00000058   0x.... 0x....      BL       NVIC_DisableIRQ
    503          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)  
    504              SIM->SCGC3 &= ~SIM_SCGC3_SPI2_MASK; 
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable8_35  ;; 0x40048030
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable8_35  ;; 0x40048030
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0xE001             B.N      ??LPLD_SPI_Deinit_1
    505          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    506              SIM->SCGC3 &= ~SIM_SCGC3_DSPI2_MASK; 
    507          #endif
    508            }
    509            else
    510              return 0;
   \                     ??LPLD_SPI_Deinit_3: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE000             B.N      ??LPLD_SPI_Deinit_4
    511            return 1;
   \                     ??LPLD_SPI_Deinit_1: (+1)
   \   00000072   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Deinit_4: (+1)
   \   00000074   0xBC10             POP      {R4}
   \   00000076   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    512          }
    513          
    514          /*
    515           * LPLD_SPI_EnableIrq
    516           * 使能SPI外设中断
    517           * 
    518           * 参数:
    519           *    spi_init_structure--SPI初始化结构体，
    520           *                        具体定义见SPI_InitTypeDef
    521           *
    522           * 输出:
    523           *    0--配置错误
    524           *    1--配置成功
    525           */

   \                                 In section .text, align 2, keep-with-next
    526          uint8 LPLD_SPI_EnableIrq(SPI_InitTypeDef spi_init_structure)
    527          {
   \                     LPLD_SPI_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    528            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9C02             LDR      R4,[SP, #+8]
    529            if(spix == SPI0)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4002c000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_0
    530            {
    531              enable_irq(SPI0_IRQn);
   \   0000000E   0x201A             MOVS     R0,#+26
   \   00000010   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000014   0xE011             B.N      ??LPLD_SPI_EnableIrq_1
    532            }
    533            else if(spix == SPI1)
   \                     ??LPLD_SPI_EnableIrq_0: (+1)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_21  ;; 0x4002d000
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_2
    534            {
    535              enable_irq(SPI1_IRQn);
   \   0000001E   0x201B             MOVS     R0,#+27
   \   00000020   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000024   0xE009             B.N      ??LPLD_SPI_EnableIrq_1
    536            }
    537            else if(spix == SPI2)
   \                     ??LPLD_SPI_EnableIrq_2: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x400ac000
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_3
    538            {
    539              enable_irq(SPI2_IRQn);
   \   0000002E   0x201C             MOVS     R0,#+28
   \   00000030   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000034   0xE001             B.N      ??LPLD_SPI_EnableIrq_1
    540            }
    541            else
    542              return 0;
   \                     ??LPLD_SPI_EnableIrq_3: (+1)
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE000             B.N      ??LPLD_SPI_EnableIrq_4
    543          
    544            return 1;
   \                     ??LPLD_SPI_EnableIrq_1: (+1)
   \   0000003A   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_EnableIrq_4: (+1)
   \   0000003C   0xBC10             POP      {R4}
   \   0000003E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    545          }
    546          
    547          /*
    548           * LPLD_SPI_EnableIrq
    549           * 禁止SPI外设中断
    550           * 
    551           * 参数:
    552           *    spi_init_structure--SPI初始化结构体，
    553           *                        具体定义见SPI_InitTypeDef
    554           *
    555           * 输出:
    556           *    0--配置错误
    557           *    1--配置成功
    558           */

   \                                 In section .text, align 2, keep-with-next
    559          uint8 LPLD_SPI_DisableIrq(SPI_InitTypeDef spi_init_structure)
    560          {
   \                     LPLD_SPI_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    561            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9C02             LDR      R4,[SP, #+8]
    562            if(spix == SPI0)
   \   00000006   0x....             LDR.N    R0,??DataTable8_3  ;; 0x4002c000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_0
    563            {
    564              disable_irq(SPI0_IRQn);
   \   0000000C   0x201A             MOVS     R0,#+26
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000012   0xE010             B.N      ??LPLD_SPI_DisableIrq_1
    565            }
    566            else if(spix == SPI1)
   \                     ??LPLD_SPI_DisableIrq_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable8_21  ;; 0x4002d000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_2
    567            {
    568              disable_irq(SPI1_IRQn);
   \   0000001A   0x201B             MOVS     R0,#+27
   \   0000001C   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000020   0xE009             B.N      ??LPLD_SPI_DisableIrq_1
    569            }
    570            else if(spix == SPI2)
   \                     ??LPLD_SPI_DisableIrq_2: (+1)
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x400ac000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_3
    571            {
    572              disable_irq(SPI2_IRQn);
   \   0000002A   0x201C             MOVS     R0,#+28
   \   0000002C   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000030   0xE001             B.N      ??LPLD_SPI_DisableIrq_1
    573            }
    574            else
    575              return 0;
   \                     ??LPLD_SPI_DisableIrq_3: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B.N      ??LPLD_SPI_DisableIrq_4
    576            return 1;
   \                     ??LPLD_SPI_DisableIrq_1: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_DisableIrq_4: (+1)
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    577          }
    578          
    579          /*
    580           * LPLD_SPI_Master_WriteRead
    581           * K60主机SPI向从机写数据，并读取从机数据
    582           * 
    583           * 参数:
    584           *    spix--SPI选择
    585           *      |__SPI0 -选择SPI0模块
    586           *      |__SPI1 -选择SPI1模块
    587           *      |__SPI2 -选择SPI2模块
    588           *    data--要发送数据
    589           *      |__单位为一个字节，8位
    590           *    pcsx--CS片选端口号
    591           *      |__SPI_PCS0 -0号片选(SPI0、SPI1、SPI2含有)
    592           *      |__SPI_PCS1 -1号片选(SPI0、SPI1、SPI2含有)
    593           *      |__SPI_PCS2 -2号片选(SPI0、SPI1含有)
    594           *      |__SPI_PCS3 -3号片选(SPI0、SPI1含有)
    595           *      |__SPI_PCS4 -4号片选(SPI0含有)
    596           *      |__SPI_PCS5 -5号片选(SPI0含有)
    597           *    pcs_state--一帧数据传输完成后CS的状态
    598           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    599           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    600           * 输出:
    601           *    读取从机8位的数据
    602           */

   \                                 In section .text, align 2, keep-with-next
    603          uint8 LPLD_SPI_Master_WriteRead(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    604          {
   \                     LPLD_SPI_Master_WriteRead: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0004             MOVS     R4,R0
    605            uint8 temp;
    606            
    607            spix->PUSHR  = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT))&SPI_PUSHR_CONT_MASK)
    608                         |SPI_PUSHR_CTAS(0)
    609                         |SPI_PUSHR_PCS(pcsx)
    610                         |data;                 
   \   00000004   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x0415             LSLS     R5,R2,#+16
   \   0000000A   0xF415 0x157C      ANDS     R5,R5,#0x3F0000
   \   0000000E   0xEA55 0x75C3      ORRS     R5,R5,R3, LSL #+31
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x430D             ORRS     R5,R1,R5
   \   00000016   0x6365             STR      R5,[R4, #+52]
    611            
    612            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_WriteRead_0: (+1)
   \   00000018   0x6AE5             LDR      R5,[R4, #+44]
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_0
    613            spix->SR |= SPI_SR_TCF_MASK ;               
   \   0000001E   0x6AE5             LDR      R5,[R4, #+44]
   \   00000020   0xF055 0x4500      ORRS     R5,R5,#0x80000000
   \   00000024   0x62E5             STR      R5,[R4, #+44]
    614            
    615            while(!(spix->SR & SPI_SR_RFDF_MASK)); 
   \                     ??LPLD_SPI_Master_WriteRead_1: (+1)
   \   00000026   0x6AE5             LDR      R5,[R4, #+44]
   \   00000028   0x03AD             LSLS     R5,R5,#+14
   \   0000002A   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_1
    616            temp = (uint8)(spix->POPR & 0xff);           
   \   0000002C   0x6BA5             LDR      R5,[R4, #+56]
   \   0000002E   0x0028             MOVS     R0,R5
    617            spix->SR |= SPI_SR_RFDF_MASK;                
   \   00000030   0x6AE5             LDR      R5,[R4, #+44]
   \   00000032   0xF455 0x3500      ORRS     R5,R5,#0x20000
   \   00000036   0x62E5             STR      R5,[R4, #+44]
    618            return temp;
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBC30             POP      {R4,R5}
   \   0000003C   0x4770             BX       LR               ;; return
    619            
    620          }
    621          
    622          /*
    623           * LPLD_SPI_Master_Read
    624           * K60主机读取从机数据
    625           * 
    626           * 参数:
    627           *    spix--SPI选择
    628           *      |__SPI0 -选择SPI0模块
    629           *      |__SPI1 -选择SPI1模块
    630           *      |__SPI2 -选择SPI2模块
    631           * 输出:
    632           *    读取从机8位的数据
    633           */

   \                                 In section .text, align 2, keep-with-next
    634          uint8 LPLD_SPI_Master_Read(SPI_Type *spix)
    635          {
   \                     LPLD_SPI_Master_Read: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    636            uint8 temp;
    637          
    638            while(!(spix->SR & SPI_SR_RFDF_MASK)); //=1 RIFO is not empty
   \                     ??LPLD_SPI_Master_Read_0: (+1)
   \   00000002   0x6ACA             LDR      R2,[R1, #+44]
   \   00000004   0x0392             LSLS     R2,R2,#+14
   \   00000006   0xD5FC             BPL.N    ??LPLD_SPI_Master_Read_0
    639            temp=(uint8)spix->POPR;
   \   00000008   0x6B8A             LDR      R2,[R1, #+56]
   \   0000000A   0x0010             MOVS     R0,R2
    640            spix->SR |=SPI_SR_RFDF_MASK;
   \   0000000C   0x6ACA             LDR      R2,[R1, #+44]
   \   0000000E   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   00000012   0x62CA             STR      R2,[R1, #+44]
    641          
    642            return temp;
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    643          }
    644          /*
    645           * LPLD_SPI_Master_Write
    646           * K60主机SPI向从机写数据
    647           * 
    648           * 参数:
    649           *    spix--SPI选择
    650           *      |__SPI0 -选择SPI0模块
    651           *      |__SPI1 -选择SPI1模块
    652           *      |__SPI2 -选择SPI2模块
    653           *    data--要发送数据
    654           *      |__单位为一个字节，8位
    655           *    pcsx--CS片选端口号
    656           *      |__SPI_PCS0  -0号片选(SPI0、SPI1、SPI2含有)
    657           *      |__SPI_PCS1  -1号片选(SPI0、SPI1、SPI2含有)
    658           *      |__SPI_PCS2  -2号片选(SPI0、SPI1含有)
    659           *      |__SPI_PCS3  -3号片选(SPI0、SPI1含有)
    660           *      |__SPI_PCS4  -4号片选(SPI0含有)
    661           *      |__SPI_PCS5  -5号片选(SPI0含有)
    662           *    pcs_state--一帧数据传输完成后CS的状态
    663           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    664           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    665           */

   \                                 In section .text, align 2, keep-with-next
    666          void LPLD_SPI_Master_Write(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    667          {  
   \                     LPLD_SPI_Master_Write: (+1)
   \   00000000   0xB410             PUSH     {R4}
    668            
    669            spix->PUSHR = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT)) & SPI_PUSHR_CONT_MASK)
    670                         |SPI_PUSHR_CTAS(0)
    671                         |SPI_PUSHR_PCS(pcsx)
    672                         |data; 
   \   00000002   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x0414             LSLS     R4,R2,#+16
   \   00000008   0xF414 0x147C      ANDS     R4,R4,#0x3F0000
   \   0000000C   0xEA54 0x74C3      ORRS     R4,R4,R3, LSL #+31
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x430C             ORRS     R4,R1,R4
   \   00000014   0x6344             STR      R4,[R0, #+52]
    673          
    674            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_Write_0: (+1)
   \   00000016   0x6AC4             LDR      R4,[R0, #+44]
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD5FC             BPL.N    ??LPLD_SPI_Master_Write_0
    675            spix->SR |= SPI_SR_TCF_MASK ;            
   \   0000001C   0x6AC4             LDR      R4,[R0, #+44]
   \   0000001E   0xF054 0x4400      ORRS     R4,R4,#0x80000000
   \   00000022   0x62C4             STR      R4,[R0, #+44]
    676          }
   \   00000024   0xBC10             POP      {R4}
   \   00000026   0x4770             BX       LR               ;; return
    677          
    678          

   \                                 In section .text, align 2, keep-with-next
    679          void SPI0_IRQHandler(void)
    680          {
   \                     SPI0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    681          #if (UCOS_II > 0u)
    682            OS_CPU_SR  cpu_sr = 0u;
    683            OS_ENTER_CRITICAL(); 
    684            OSIntEnter();
    685            OS_EXIT_CRITICAL();
    686          #endif
    687            if( SPI0->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI0_IRQHandler_0
    688            {
    689              SPI0_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_45
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    690              SPI0->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002c02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI0_IRQHandler_1
    691            }
    692            else if( SPI0->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI0_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI0_IRQHandler_2
    693            {
    694              SPI0_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_45
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    695              SPI0->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002c02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI0_IRQHandler_1
    696            }
    697            else if( SPI0->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI0_IRQHandler_2: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI0_IRQHandler_3
    698            {
    699              SPI0_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_45
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    700              SPI0->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002c02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI0_IRQHandler_1
    701            }
    702            else if( SPI0->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI0_IRQHandler_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI0_IRQHandler_4
    703            {  
    704              SPI0_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_45
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    705              SPI0->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002c02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI0_IRQHandler_1
    706            }
    707            else if( SPI0->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI0_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI0_IRQHandler_5
    708            {   
    709              SPI0_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_45
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    710              SPI0->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002c02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI0_IRQHandler_1
    711            }
    712            else if( SPI0->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI0_IRQHandler_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI0_IRQHandler_1
    713            {
    714              SPI0_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_45
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    715              SPI0->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002c02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002c02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    716            }
    717          #if (UCOS_II > 0u)
    718            OSIntExit();          
    719          #endif
    720          }
   \                     ??SPI0_IRQHandler_1: (+1)
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    721          
    722          

   \                                 In section .text, align 2, keep-with-next
    723          void SPI1_IRQHandler(void)
    724          {
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    725          #if (UCOS_II > 0u)
    726            OS_CPU_SR  cpu_sr = 0u;
    727            OS_ENTER_CRITICAL(); 
    728            OSIntEnter();
    729            OS_EXIT_CRITICAL();
    730          #endif
    731            if( SPI1->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI1_IRQHandler_0
    732            {
    733              SPI1_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_46
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    734              SPI1->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_50  ;; 0x4002d02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI1_IRQHandler_1
    735            }
    736            else if( SPI1->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI1_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI1_IRQHandler_2
    737            {
    738              SPI1_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_46
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    739              SPI1->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_50  ;; 0x4002d02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI1_IRQHandler_1
    740            }
    741            else if( SPI1->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI1_IRQHandler_3
    742            {
    743              SPI1_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_46
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    744              SPI1->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_50  ;; 0x4002d02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI1_IRQHandler_1
    745            }
    746            else if( SPI1->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI1_IRQHandler_4
    747            {  
    748              SPI1_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_46
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    749              SPI1->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_50  ;; 0x4002d02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI1_IRQHandler_1
    750            }
    751            else if( SPI1->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI1_IRQHandler_5
    752            {   
    753              SPI1_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_46
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    754              SPI1->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_50  ;; 0x4002d02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI1_IRQHandler_1
    755            }
    756            else if( SPI1->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI1_IRQHandler_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI1_IRQHandler_1
    757            {
    758              SPI1_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_46
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    759              SPI1->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x4002d02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_50  ;; 0x4002d02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    760            }
    761          #if (UCOS_II > 0u)
    762            OSIntExit();         
    763          #endif
    764          }
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    765          
    766          

   \                                 In section .text, align 2, keep-with-next
    767          void SPI2_IRQHandler(void)
    768          {
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    769          #if (UCOS_II > 0u)
    770            OS_CPU_SR  cpu_sr = 0u;
    771            OS_ENTER_CRITICAL(); 
    772            OSIntEnter();
    773            OS_EXIT_CRITICAL();
    774          #endif
    775            if( SPI2->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI2_IRQHandler_0
    776            {
    777              SPI2_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_47
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    778              SPI2->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_51  ;; 0x400ac02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI2_IRQHandler_1
    779            }
    780            else if( SPI2->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI2_IRQHandler_2
    781            {
    782              SPI2_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_47
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    783              SPI2->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_51  ;; 0x400ac02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI2_IRQHandler_1
    784            }
    785            else if( SPI2->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI2_IRQHandler_2: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI2_IRQHandler_3
    786            {
    787              SPI2_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_47
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    788              SPI2->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_51  ;; 0x400ac02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI2_IRQHandler_1
    789            }
    790            else if( SPI2->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI2_IRQHandler_4
    791            {  
    792              SPI2_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_47
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    793              SPI2->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_51  ;; 0x400ac02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI2_IRQHandler_1
    794            }
    795            else if( SPI2->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI2_IRQHandler_5
    796            {   
    797              SPI2_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_47
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    798              SPI2->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_51  ;; 0x400ac02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI2_IRQHandler_1
    799            }
    800            else if( SPI2->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI2_IRQHandler_1
    801            {
    802              SPI2_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_47
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    803              SPI2->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_51  ;; 0x400ac02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_51  ;; 0x400ac02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    804            }
    805          #if (UCOS_II > 0u)
    806            OSIntExit();          
    807          #endif
    808          }
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x4004B018         DC32     0x4004b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x4004A024         DC32     0x4004a024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x4004D018         DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x4004D008         DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x4004D00C         DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   0x400AC000         DC32     0x400ac000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \   00000000   0x4004C03C         DC32     0x4004c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_40:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_41:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_42:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_43:
   \   00000000   0x4004C038         DC32     0x4004c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_44:
   \   00000000   0x003F0C01         DC32     0x3f0c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_45:
   \   00000000   0x........         DC32     SPI0_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_46:
   \   00000000   0x........         DC32     SPI1_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_47:
   \   00000000   0x........         DC32     SPI2_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_48:
   \   00000000   0x9A0A0000         DC32     0x9a0a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_49:
   \   00000000   0x4002C02C         DC32     0x4002c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_50:
   \   00000000   0x4002D02C         DC32     0x4002d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_51:
   \   00000000   0x400AC02C         DC32     0x400ac02c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x47 0x3A          DC8 47H, 3AH, 5CH, 0BFH, 0ECH, 0C5H, 0CCH, 0CDH
   \              0x5C 0xBF    
   \              0xEC 0xC5    
   \              0xCC 0xCD    
   \   00000008   0xF8 0xC2          DC8 0F8H, 0C2H, 0E7H, 0B3H, 0B7H, 0C0H, 0EBH, 5CH
   \              0xE7 0xB3    
   \              0xB7 0xC0    
   \              0xEB 0x5C    
   \   00000010   0x77 0x68          DC8 77H, 68H, 75H, 74H, 64H, 64H, 6BH, 5CH
   \              0x75 0x74    
   \              0x64 0x64    
   \              0x6B 0x5C    
   \   00000018   0xB7 0xC9          DC8 0B7H, 0C9H, 0CBH, 0BCH, 0BFH, 0A8H, 0B6H, 0FBH
   \              0xCB 0xBC    
   \              0xBF 0xA8    
   \              0xB6 0xFB    
   \   00000020   0x5C 0x4C          DC8 5CH, 4CH, 50H, 4CH, 44H, 56H, 33H, 2EH
   \              0x50 0x4C    
   \              0x44 0x56    
   \              0x33 0x2E    
   \   00000028   0x31 0x5C          DC8 31H, 5CH, 4CH, 50H, 4CH, 44H, 5FH, 4FH
   \              0x4C 0x50    
   \              0x4C 0x44    
   \              0x5F 0x4F    
   \   00000030   0x53 0x4B          DC8 53H, 4BH, 69H, 6EH, 65H, 74H, 69H, 73H
   \              0x69 0x6E    
   \              0x65 0x74    
   \              0x69 0x73    
   \   00000038   0x5F 0x56          DC8 5FH, 56H, 33H, 5CH, 6CH, 69H, 62H, 5CH
   \              0x33 0x5C    
   \              0x6C 0x69    
   \              0x62 0x5C    
   \   00000040   0x4C 0x50          DC8 4CH, 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH
   \              0x4C 0x44    
   \              0x5C 0x48    
   \              0x57 0x5C    
   \   00000048   0x48 0x57          DC8 48H, 57H, 5FH, 53H, 50H, 49H, 2EH, 63H
   \              0x5F 0x53    
   \              0x50 0x49    
   \              0x2E 0x63    
   \   00000050   0x00               DC8 0
   \   00000051   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    809          
    810          
    811          
    812          
    813          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_SPI_Deinit
        24   -> NVIC_DisableIRQ
      24   LPLD_SPI_DisableIrq
        24   -> NVIC_DisableIRQ
      24   LPLD_SPI_EnableIrq
        24   -> NVIC_EnableIRQ
      96   LPLD_SPI_Init
        96   -> assert_failed
       0   LPLD_SPI_Master_Read
       4   LPLD_SPI_Master_Write
       8   LPLD_SPI_Master_WriteRead
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       8   SPI0_IRQHandler
         8   -- Indirect call
       8   SPI1_IRQHandler
         8   -- Indirect call
       8   SPI2_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_40
       4  ??DataTable8_41
       4  ??DataTable8_42
       4  ??DataTable8_43
       4  ??DataTable8_44
       4  ??DataTable8_45
       4  ??DataTable8_46
       4  ??DataTable8_47
       4  ??DataTable8_48
       4  ??DataTable8_49
       4  ??DataTable8_5
       4  ??DataTable8_50
       4  ??DataTable8_51
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      84  ?_0
     122  LPLD_SPI_Deinit
      62  LPLD_SPI_DisableIrq
      66  LPLD_SPI_EnableIrq
    1626  LPLD_SPI_Init
      24  LPLD_SPI_Master_Read
      40  LPLD_SPI_Master_Write
      62  LPLD_SPI_Master_WriteRead
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
     170  SPI0_IRQHandler
      24  SPI0_ISR
     170  SPI1_IRQHandler
      24  SPI1_ISR
     170  SPI2_IRQHandler
      24  SPI2_ISR

 
    72 bytes in section .bss
    84 bytes in section .rodata
 2 764 bytes in section .text
 
 2 764 bytes of CODE  memory
    84 bytes of CONST memory
    72 bytes of DATA  memory

Errors: none
Warnings: none
