###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/Mar/2016  20:36:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\common\printf.c
#    Command line =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\common\printf.c -D LPLD_K60 -D
#        USE_K60DZ10 -lCN
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\RAM\List\"
#        -lB
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\RAM\List\"
#        -o
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\RAM\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\MAIN\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\BSP\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\ITAC\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\CTL\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\app\SENSOR\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\CPU\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\common\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\LPLD\FUNC\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\common\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\driver\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\..\..\..\lib\USB\class\"
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\RAM\List\printf.lst
#    Object file  =  
#        D:\LPLDV3.1\LPLD_OSKinetis_V3\project\freescale_cup(DMA)1.0\iar\RAM\Obj\printf.o
#
###############################################################################

D:\LPLDV3.1\LPLD_OSKinetis_V3\lib\common\printf.c
      1          /**
      2           * @file printf.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief C库标准printf()函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include <stdarg.h>
     25          
     26          /********************************************************************/
     27          
     28          typedef struct
     29          {
     30              int32 dest;
     31              void (*func)(int8);
     32              int8 *loc;
     33          } PRINTK_INFO;
     34          
     35          int32 
     36          printk (PRINTK_INFO *, const int8 *, va_list);
     37          
     38          /********************************************************************/
     39          
     40          #define DEST_CONSOLE    (1)
     41          #define DEST_STRING     (2)
     42          
     43          #define FLAGS_MINUS     (0x01)
     44          #define FLAGS_PLUS      (0x02)
     45          #define FLAGS_SPACE     (0x04)
     46          #define FLAGS_ZERO      (0x08)
     47          #define FLAGS_POUND     (0x10)
     48          
     49          #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
     50          #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
     51          #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
     52          #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
     53          #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
     54          
     55          #define LENMOD_h        (0x01)
     56          #define LENMOD_l        (0x02)
     57          #define LENMOD_L        (0x04)
     58          
     59          #define IS_LENMOD_h(a)  (a & LENMOD_h)
     60          #define IS_LENMOD_l(a)  (a & LENMOD_l)
     61          #define IS_LENMOD_L(a)  (a & LENMOD_L)
     62          
     63          #define FMT_d   (0x0001)
     64          #define FMT_o   (0x0002)
     65          #define FMT_x   (0x0004)
     66          #define FMT_X   (0x0008)
     67          #define FMT_u   (0x0010)
     68          #define FMT_c   (0x0020)
     69          #define FMT_s   (0x0040)
     70          #define FMT_p   (0x0080)
     71          #define FMT_n   (0x0100)
     72          
     73          #define IS_FMT_d(a)     (a & FMT_d)
     74          #define IS_FMT_o(a)     (a & FMT_o)
     75          #define IS_FMT_x(a)     (a & FMT_x)
     76          #define IS_FMT_X(a)     (a & FMT_X)
     77          #define IS_FMT_u(a)     (a & FMT_u)
     78          #define IS_FMT_c(a)     (a & FMT_c)
     79          #define IS_FMT_s(a)     (a & FMT_s)
     80          #define IS_FMT_p(a)     (a & FMT_p)
     81          #define IS_FMT_n(a)     (a & FMT_n)
     82          
     83          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          static void printk_putc (int32 c, int32 *count, PRINTK_INFO *info)
     85          {
   \                     printk_putc: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     86              switch (info->dest)
   \   00000008   0x6830             LDR      R0,[R6, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD002             BEQ.N    ??printk_putc_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD005             BEQ.N    ??printk_putc_1
   \   00000012   0xE00A             B.N      ??printk_putc_2
     87              {
     88                  case DEST_CONSOLE:
     89                      info->func((int8)c);
   \                     ??printk_putc_0: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000018   0x6871             LDR      R1,[R6, #+4]
   \   0000001A   0x4788             BLX      R1
     90                      break;
   \   0000001C   0xE005             B.N      ??printk_putc_3
     91                  case DEST_STRING:
     92                      *(info->loc) = (uint8)c;
   \                     ??printk_putc_1: (+1)
   \   0000001E   0x68B0             LDR      R0,[R6, #+8]
   \   00000020   0x7004             STRB     R4,[R0, #+0]
     93                      ++(info->loc);
   \   00000022   0x68B0             LDR      R0,[R6, #+8]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x60B0             STR      R0,[R6, #+8]
     94                      break;
   \   00000028   0xE7FF             B.N      ??printk_putc_3
     95                  default:
     96                      break;
     97              }
     98              *count += 1;
   \                     ??printk_putc_2: (+1)
   \                     ??printk_putc_3: (+1)
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
     99          }
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
    100          
    101          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          static int32 printk_mknumstr (int8 *numstr, void *nump, int32 neg, int32 radix)
    103          {
   \                     printk_mknumstr: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
    104              int32 a,b,c;
    105              uint32 ua,ub,uc;
    106          
    107              int32 nlen;
    108              int8 *nstrp;
    109          
    110              nlen = 0;
   \   00000006   0xF05F 0x0A00      MOVS     R10,#+0
   \   0000000A   0x4650             MOV      R0,R10
    111              nstrp = numstr;
   \   0000000C   0x46A1             MOV      R9,R4
    112              *nstrp++ = '\0';
   \   0000000E   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000012   0xF889 0xA000      STRB     R10,[R9, #+0]
   \   00000016   0xF119 0x0901      ADDS     R9,R9,#+1
    113          
    114              if (neg)
   \   0000001A   0x2A00             CMP      R2,#+0
   \   0000001C   0xD01F             BEQ.N    ??printk_mknumstr_0
    115              {
    116                  a = *(int32 *)nump;
   \   0000001E   0xF8D1 0xA000      LDR      R10,[R1, #+0]
   \   00000022   0x4655             MOV      R5,R10
    117                  if (a == 0)
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD105             BNE.N    ??printk_mknumstr_1
    118                  {
    119                      *nstrp = '0';
   \   00000028   0xF05F 0x0A30      MOVS     R10,#+48
   \   0000002C   0xF889 0xA000      STRB     R10,[R9, #+0]
    120                      ++nlen;
   \   00000030   0x1C40             ADDS     R0,R0,#+1
    121                      goto done;
   \   00000032   0xE038             B.N      ??printk_mknumstr_2
    122                  }
    123                  while (a != 0)
   \                     ??printk_mknumstr_1: (+1)
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD036             BEQ.N    ??printk_mknumstr_2
    124                  {
    125                      b = (int32)a / (int32)radix;
   \   00000038   0xFB95 0xFAF3      SDIV     R10,R5,R3
   \   0000003C   0x4656             MOV      R6,R10
    126                      c = (int32)a - ((int32)b * (int32)radix);
   \   0000003E   0xFB03 0x5A16      MLS      R10,R3,R6,R5
   \   00000042   0x4657             MOV      R7,R10
    127                      if (c < 0)
   \   00000044   0x2F00             CMP      R7,#+0
   \   00000046   0xD502             BPL.N    ??printk_mknumstr_3
    128                      {
    129                          c = ~c + 1 + '0';
   \   00000048   0x43FF             MVNS     R7,R7
   \   0000004A   0x3731             ADDS     R7,R7,#+49
   \   0000004C   0xE000             B.N      ??printk_mknumstr_4
    130                      }
    131                      else
    132                      {
    133                          c = c + '0';
   \                     ??printk_mknumstr_3: (+1)
   \   0000004E   0x3730             ADDS     R7,R7,#+48
    134                      }
    135                      a = b;
   \                     ??printk_mknumstr_4: (+1)
   \   00000050   0x0035             MOVS     R5,R6
    136                      *nstrp++ = (int8)c;
   \   00000052   0xF889 0x7000      STRB     R7,[R9, #+0]
   \   00000056   0xF119 0x0901      ADDS     R9,R9,#+1
    137                      ++nlen;
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0xE7EA             B.N      ??printk_mknumstr_1
    138                  }
    139              }
    140              else
    141              {
    142                  ua = *(uint32 *)nump;
   \                     ??printk_mknumstr_0: (+1)
   \   0000005E   0xF8D1 0xA000      LDR      R10,[R1, #+0]
   \   00000062   0x46D4             MOV      R12,R10
    143                  if (ua == 0)
   \   00000064   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000068   0xD105             BNE.N    ??printk_mknumstr_5
    144                  {
    145                      *nstrp = '0';
   \   0000006A   0xF05F 0x0A30      MOVS     R10,#+48
   \   0000006E   0xF889 0xA000      STRB     R10,[R9, #+0]
    146                      ++nlen;
   \   00000072   0x1C40             ADDS     R0,R0,#+1
    147                      goto done;
   \   00000074   0xE017             B.N      ??printk_mknumstr_2
    148                  }
    149                  while (ua != 0)
   \                     ??printk_mknumstr_5: (+1)
   \   00000076   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000007A   0xD014             BEQ.N    ??printk_mknumstr_2
    150                  {
    151                      ub = (uint32)ua / (uint32)radix;
   \   0000007C   0xFBBC 0xFAF3      UDIV     R10,R12,R3
   \   00000080   0x46D6             MOV      LR,R10
    152                      uc = (uint32)ua - ((uint32)ub * (uint32)radix);
   \   00000082   0xFB03 0xCA1E      MLS      R10,R3,LR,R12
   \   00000086   0x46D0             MOV      R8,R10
    153                      if (uc < 10)
   \   00000088   0xF1B8 0x0F0A      CMP      R8,#+10
   \   0000008C   0xD202             BCS.N    ??printk_mknumstr_6
    154                      {
    155                          uc = uc + '0';
   \   0000008E   0xF118 0x0830      ADDS     R8,R8,#+48
   \   00000092   0xE001             B.N      ??printk_mknumstr_7
    156                      }
    157                      else
    158                      {
    159                          uc = uc - 10 + 'A';
   \                     ??printk_mknumstr_6: (+1)
   \   00000094   0xF118 0x0837      ADDS     R8,R8,#+55
    160                      }
    161                      ua = ub;
   \                     ??printk_mknumstr_7: (+1)
   \   00000098   0x46F4             MOV      R12,LR
    162                      *nstrp++ = (int8)uc;
   \   0000009A   0xF889 0x8000      STRB     R8,[R9, #+0]
   \   0000009E   0xF119 0x0901      ADDS     R9,R9,#+1
    163                      ++nlen;
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0xE7E7             B.N      ??printk_mknumstr_5
    164                  }
    165              }
    166              done:
    167              return nlen;
   \                     ??printk_mknumstr_2: (+1)
   \   000000A6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    168          }
    169          
    170          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    171          static void printk_pad_zero (int32 curlen, int32 field_width, int32 *count, PRINTK_INFO *info)
    172          {
   \                     printk_pad_zero: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    173              int32 i;
    174          
    175              for (i = curlen; i < field_width; i++)
   \   0000000C   0x46A0             MOV      R8,R4
   \                     ??printk_pad_zero_0: (+1)
   \   0000000E   0x45A8             CMP      R8,R5
   \   00000010   0xDA07             BGE.N    ??printk_pad_zero_1
    176              {
    177                  printk_putc('0',count, info);
   \   00000012   0x003A             MOVS     R2,R7
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x2030             MOVS     R0,#+48
   \   00000018   0x.... 0x....      BL       printk_putc
    178              }
   \   0000001C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000020   0xE7F5             B.N      ??printk_pad_zero_0
    179          }
   \                     ??printk_pad_zero_1: (+1)
   \   00000022   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    180          
    181          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          static void
    183          printk_pad_space (int32 curlen, int32 field_width, int32 *count, PRINTK_INFO *info)
    184          {
   \                     printk_pad_space: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    185              int32 i;
    186          
    187              for (i = curlen; i < field_width; i++)
   \   0000000C   0x46A0             MOV      R8,R4
   \                     ??printk_pad_space_0: (+1)
   \   0000000E   0x45A8             CMP      R8,R5
   \   00000010   0xDA07             BGE.N    ??printk_pad_space_1
    188              {
    189                  printk_putc(' ',count, info);
   \   00000012   0x003A             MOVS     R2,R7
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0x.... 0x....      BL       printk_putc
    190              }
   \   0000001C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000020   0xE7F5             B.N      ??printk_pad_space_0
    191          }
   \                     ??printk_pad_space_1: (+1)
   \   00000022   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    192          
    193          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          int32 printk (PRINTK_INFO *info, const int8 *fmt, va_list ap)
    195          {
   \                     printk: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB092             SUB      SP,SP,#+72
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
    196              /* va_list ap; */
    197              int8 *p;
    198              int32 c;
    199          
    200              int8 vstr[33];
    201              int8 *vstrp;
    202              int32 vlen;
    203          
    204              int32 done;
    205              int32 count = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
    206          
    207              int32 flags_used;
    208              int32 field_width;
    209          #if 0
    210              int32 precision_used;
    211              int32 precision_width;
    212              int32 length_modifier;
    213          #endif
    214          
    215              int32 ival;
    216              int32 schar, dschar;
    217              int32 *ivalp;
    218              int8 *sval;
    219              int32 cval;
    220              uint32 uval;
    221          
    222              /*
    223               * Start parsing apart the format string and display appropriate
    224               * formats and data.
    225               */
    226              for (p = (int8 *)fmt; (c = *p) != 0; p++)
   \   0000000E   0x9812             LDR      R0,[SP, #+72]
   \   00000010   0x4683             MOV      R11,R0
   \                     ??printk_0: (+1)
   \   00000012   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \   00000018   0x9801             LDR      R0,[SP, #+4]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xF000 0x81F7      BEQ.W    ??printk_1
    227              {
    228                  /*
    229                   * All formats begin with a '%' marker.  Special chars like
    230                   * '\n' or '\t' are normally converted to the appropriate
    231                   * character by the __compiler__.  Thus, no need for this
    232                   * routine to account for the '\' character.
    233                   */
    234                  if (c != '%')
   \   00000020   0x9801             LDR      R0,[SP, #+4]
   \   00000022   0x2825             CMP      R0,#+37
   \   00000024   0xD013             BEQ.N    ??printk_2
    235                  {
    236                      /*
    237                       * This needs to be replaced with something like
    238                       * 'out_char()' or call an OS routine.
    239                       */
    240          #ifndef UNIX_DEBUG
    241                      if (c != '\n')
   \   00000026   0x9801             LDR      R0,[SP, #+4]
   \   00000028   0x280A             CMP      R0,#+10
   \   0000002A   0xD005             BEQ.N    ??printk_3
    242                      {
    243                          printk_putc(c, &count, info);
   \   0000002C   0x0022             MOVS     R2,R4
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x9801             LDR      R0,[SP, #+4]
   \   00000032   0x.... 0x....      BL       printk_putc
   \   00000036   0xE009             B.N      ??printk_4
    244                      }
    245                      else
    246                      {
    247                          printk_putc(0x0D /* CR */, &count, info);
   \                     ??printk_3: (+1)
   \   00000038   0x0022             MOVS     R2,R4
   \   0000003A   0xA900             ADD      R1,SP,#+0
   \   0000003C   0x200D             MOVS     R0,#+13
   \   0000003E   0x.... 0x....      BL       printk_putc
    248                          printk_putc(0x0A /* LF */, &count, info);
   \   00000042   0x0022             MOVS     R2,R4
   \   00000044   0xA900             ADD      R1,SP,#+0
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0x.... 0x....      BL       printk_putc
    249                      }
    250          #else
    251                      printk_putc(c, &count, info);
    252          #endif
    253          
    254                      /*
    255                       * By using 'continue', the next iteration of the loop
    256                       * is used, skipping the code that follows.
    257                       */
    258                      continue;
   \                     ??printk_4: (+1)
   \   0000004C   0xE1DC             B.N      ??printk_5
    259                  }
    260          
    261                  /*
    262                   * First check for specification modifier flags.
    263                   */
    264                  flags_used = 0;
   \                     ??printk_2: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x4681             MOV      R9,R0
    265                  done = FALSE;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9004             STR      R0,[SP, #+16]
    266                  while (!done)
   \                     ??printk_6: (+1)
   \   00000056   0x9804             LDR      R0,[SP, #+16]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD122             BNE.N    ??printk_7
    267                  {
    268                      switch (/* c = */ *++p)
   \   0000005C   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000060   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   00000064   0x2820             CMP      R0,#+32
   \   00000066   0xD00E             BEQ.N    ??printk_8
   \   00000068   0x2823             CMP      R0,#+35
   \   0000006A   0xD012             BEQ.N    ??printk_9
   \   0000006C   0x282B             CMP      R0,#+43
   \   0000006E   0xD007             BEQ.N    ??printk_10
   \   00000070   0x282D             CMP      R0,#+45
   \   00000072   0xD002             BEQ.N    ??printk_11
   \   00000074   0x2830             CMP      R0,#+48
   \   00000076   0xD009             BEQ.N    ??printk_12
   \   00000078   0xE00E             B.N      ??printk_13
    269                      {
    270                          case '-':
    271                              flags_used |= FLAGS_MINUS;
   \                     ??printk_11: (+1)
   \   0000007A   0xF059 0x0901      ORRS     R9,R9,#0x1
    272                              break;
   \   0000007E   0xE7EA             B.N      ??printk_6
    273                          case '+':
    274                              flags_used |= FLAGS_PLUS;
   \                     ??printk_10: (+1)
   \   00000080   0xF059 0x0902      ORRS     R9,R9,#0x2
    275                              break;
   \   00000084   0xE7E7             B.N      ??printk_6
    276                          case ' ':
    277                              flags_used |= FLAGS_SPACE;
   \                     ??printk_8: (+1)
   \   00000086   0xF059 0x0904      ORRS     R9,R9,#0x4
    278                              break;
   \   0000008A   0xE7E4             B.N      ??printk_6
    279                          case '0':
    280                              flags_used |= FLAGS_ZERO;
   \                     ??printk_12: (+1)
   \   0000008C   0xF059 0x0908      ORRS     R9,R9,#0x8
    281                              break;
   \   00000090   0xE7E1             B.N      ??printk_6
    282                          case '#':
    283                              flags_used |= FLAGS_POUND;
   \                     ??printk_9: (+1)
   \   00000092   0xF059 0x0910      ORRS     R9,R9,#0x10
    284                              break;
   \   00000096   0xE7DE             B.N      ??printk_6
    285                          default:
    286                              /* we've gone one int8 too far */
    287                              --p;
   \                     ??printk_13: (+1)
   \   00000098   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    288                              done = TRUE;
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x9004             STR      R0,[SP, #+16]
    289                              break;
   \   000000A0   0xE7D9             B.N      ??printk_6
    290                      }
    291                  }
    292          
    293                  /*
    294                   * Next check for minimum field width.
    295                   */
    296                  field_width = 0;
   \                     ??printk_7: (+1)
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x4682             MOV      R10,R0
    297                  done = FALSE;
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9004             STR      R0,[SP, #+16]
    298                  while (!done)
   \                     ??printk_14: (+1)
   \   000000AA   0x9804             LDR      R0,[SP, #+16]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD114             BNE.N    ??printk_15
    299                  {
    300                      switch (c = *++p)
   \   000000B0   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000B4   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   000000B8   0x9001             STR      R0,[SP, #+4]
   \   000000BA   0x9801             LDR      R0,[SP, #+4]
   \   000000BC   0x3830             SUBS     R0,R0,#+48
   \   000000BE   0x2809             CMP      R0,#+9
   \   000000C0   0xD806             BHI.N    ??printk_16
    301                      {
    302                          case '0':
    303                          case '1':
    304                          case '2':
    305                          case '3':
    306                          case '4':
    307                          case '5':
    308                          case '6':
    309                          case '7':
    310                          case '8':
    311                          case '9':
    312                              field_width = (field_width * 10) + (c - '0');
   \                     ??printk_17: (+1)
   \   000000C2   0x200A             MOVS     R0,#+10
   \   000000C4   0x9901             LDR      R1,[SP, #+4]
   \   000000C6   0xFB00 0x100A      MLA      R0,R0,R10,R1
   \   000000CA   0xF1B0 0x0A30      SUBS     R10,R0,#+48
    313                              break;
   \   000000CE   0xE7EC             B.N      ??printk_14
    314                          default:
    315                              /* we've gone one int8 too far */
    316                              --p;
   \                     ??printk_16: (+1)
   \   000000D0   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    317                              done = TRUE;
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x9004             STR      R0,[SP, #+16]
    318                              break;
   \   000000D8   0xE7E7             B.N      ??printk_14
    319                      }
    320                  }
    321          
    322                  /*
    323                   * Next check for the width and precision field separator.
    324                   */
    325                  if (/* (c = *++p) */ *++p == '.')
   \                     ??printk_15: (+1)
   \   000000DA   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000DE   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   000000E2   0x282E             CMP      R0,#+46
   \   000000E4   0xD111             BNE.N    ??printk_18
    326                  {
    327                      /* precision_used = TRUE; */
    328          
    329                      /*
    330                       * Must get precision field width, if present.
    331                       */
    332                      /* precision_width = 0; */
    333                      done = FALSE;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x9004             STR      R0,[SP, #+16]
    334                      while (!done)
   \                     ??printk_19: (+1)
   \   000000EA   0x9804             LDR      R0,[SP, #+16]
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD10E             BNE.N    ??printk_20
    335                      {
    336                          switch (/* c = uncomment if used below */ *++p)
   \   000000F0   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000F4   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   000000F8   0x3830             SUBS     R0,R0,#+48
   \   000000FA   0x2809             CMP      R0,#+9
   \   000000FC   0xD800             BHI.N    ??printk_21
    337                          {
    338                              case '0':
    339                              case '1':
    340                              case '2':
    341                              case '3':
    342                              case '4':
    343                              case '5':
    344                              case '6':
    345                              case '7':
    346                              case '8':
    347                              case '9':
    348          #if 0
    349                                  precision_width = (precision_width * 10) +
    350                                      (c - '0');
    351          #endif
    352                                  break;
   \                     ??printk_22: (+1)
   \   000000FE   0xE7F4             B.N      ??printk_19
    353                              default:
    354                                  /* we've gone one int8 too far */
    355                                  --p;
   \                     ??printk_21: (+1)
   \   00000100   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    356                                  done = TRUE;
   \   00000104   0x2001             MOVS     R0,#+1
   \   00000106   0x9004             STR      R0,[SP, #+16]
    357                                  break;
   \   00000108   0xE7EF             B.N      ??printk_19
    358                          }
    359                      }
    360                  }
    361                  else
    362                  {
    363                      /* we've gone one int8 too far */
    364                      --p;
   \                     ??printk_18: (+1)
   \   0000010A   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    365          #if 0
    366                      precision_used = FALSE;
    367                      precision_width = 0;
    368          #endif
    369                  }
    370          
    371                  /*
    372                   * Check for the length modifier.
    373                   */
    374                  /* length_modifier = 0; */
    375                  switch (/* c = */ *++p)
   \                     ??printk_20: (+1)
   \   0000010E   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000112   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   00000116   0x284C             CMP      R0,#+76
   \   00000118   0xD006             BEQ.N    ??printk_23
   \   0000011A   0x2868             CMP      R0,#+104
   \   0000011C   0xD002             BEQ.N    ??printk_24
   \   0000011E   0x286C             CMP      R0,#+108
   \   00000120   0xD001             BEQ.N    ??printk_25
   \   00000122   0xE002             B.N      ??printk_26
    376                  {
    377                      case 'h':
    378                          /* length_modifier |= LENMOD_h; */
    379                          break;
   \                     ??printk_24: (+1)
   \   00000124   0xE003             B.N      ??printk_27
    380                      case 'l':
    381                          /* length_modifier |= LENMOD_l; */
    382                          break;
   \                     ??printk_25: (+1)
   \   00000126   0xE002             B.N      ??printk_27
    383                      case 'L':
    384                          /* length_modifier |= LENMOD_L; */
    385                          break;
   \                     ??printk_23: (+1)
   \   00000128   0xE001             B.N      ??printk_27
    386                      default:
    387                          /* we've gone one int8 too far */
    388                          --p;
   \                     ??printk_26: (+1)
   \   0000012A   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    389                          break;
    390                  }
    391          
    392                  /*
    393                   * Now we're ready to examine the format.
    394                   */
    395                  switch (c = *++p)
   \                     ??printk_27: (+1)
   \   0000012E   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000132   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   00000136   0x9001             STR      R0,[SP, #+4]
   \   00000138   0x9801             LDR      R0,[SP, #+4]
   \   0000013A   0x2858             CMP      R0,#+88
   \   0000013C   0xD075             BEQ.N    ??printk_28
   \   0000013E   0x2862             CMP      R0,#+98
   \   00000140   0xF000 0x80D5      BEQ.W    ??printk_29
   \   00000144   0x2863             CMP      R0,#+99
   \   00000146   0xF000 0x811F      BEQ.W    ??printk_30
   \   0000014A   0x2864             CMP      R0,#+100
   \   0000014C   0xD013             BEQ.N    ??printk_31
   \   0000014E   0x2869             CMP      R0,#+105
   \   00000150   0xD011             BEQ.N    ??printk_31
   \   00000152   0x286E             CMP      R0,#+110
   \   00000154   0xF000 0x814C      BEQ.W    ??printk_32
   \   00000158   0x286F             CMP      R0,#+111
   \   0000015A   0xF000 0x80BD      BEQ.W    ??printk_33
   \   0000015E   0x2870             CMP      R0,#+112
   \   00000160   0xF000 0x80D0      BEQ.W    ??printk_34
   \   00000164   0x2873             CMP      R0,#+115
   \   00000166   0xF000 0x8119      BEQ.W    ??printk_35
   \   0000016A   0x2875             CMP      R0,#+117
   \   0000016C   0xF000 0x80D5      BEQ.W    ??printk_36
   \   00000170   0x2878             CMP      R0,#+120
   \   00000172   0xD05A             BEQ.N    ??printk_28
   \   00000174   0xE143             B.N      ??printk_37
    396                  {
    397                      case 'd':
    398                      case 'i':
    399                          ival = (int32)va_arg(ap, int32);
   \                     ??printk_31: (+1)
   \   00000176   0x6828             LDR      R0,[R5, #+0]
   \   00000178   0x1D2D             ADDS     R5,R5,#+4
   \   0000017A   0x9006             STR      R0,[SP, #+24]
    400                          vlen = printk_mknumstr(vstr,&ival,TRUE,10);
   \   0000017C   0x230A             MOVS     R3,#+10
   \   0000017E   0x2201             MOVS     R2,#+1
   \   00000180   0xA906             ADD      R1,SP,#+24
   \   00000182   0xA809             ADD      R0,SP,#+36
   \   00000184   0x.... 0x....      BL       printk_mknumstr
   \   00000188   0x0007             MOVS     R7,R0
    401                          vstrp = &vstr[vlen];
   \   0000018A   0xA809             ADD      R0,SP,#+36
   \   0000018C   0x1838             ADDS     R0,R7,R0
   \   0000018E   0x0006             MOVS     R6,R0
    402          
    403                          if (ival < 0)
   \   00000190   0x9806             LDR      R0,[SP, #+24]
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD503             BPL.N    ??printk_38
    404                          {
    405                              schar = '-';
   \   00000196   0x202D             MOVS     R0,#+45
   \   00000198   0x9003             STR      R0,[SP, #+12]
    406                              ++vlen;
   \   0000019A   0x1C7F             ADDS     R7,R7,#+1
   \   0000019C   0xE00F             B.N      ??printk_39
    407                          }
    408                          else
    409                          {
    410                              if (IS_FLAG_PLUS(flags_used))
   \                     ??printk_38: (+1)
   \   0000019E   0xEA5F 0x7089      LSLS     R0,R9,#+30
   \   000001A2   0xD503             BPL.N    ??printk_40
    411                              {
    412                                  schar = '+';
   \   000001A4   0x202B             MOVS     R0,#+43
   \   000001A6   0x9003             STR      R0,[SP, #+12]
    413                                  ++vlen;
   \   000001A8   0x1C7F             ADDS     R7,R7,#+1
   \   000001AA   0xE008             B.N      ??printk_39
    414                              }
    415                              else
    416                              {
    417                                  if (IS_FLAG_SPACE(flags_used))
   \                     ??printk_40: (+1)
   \   000001AC   0xEA5F 0x7049      LSLS     R0,R9,#+29
   \   000001B0   0xD503             BPL.N    ??printk_41
    418                                  {
    419                                      schar = ' ';
   \   000001B2   0x2020             MOVS     R0,#+32
   \   000001B4   0x9003             STR      R0,[SP, #+12]
    420                                      ++vlen;
   \   000001B6   0x1C7F             ADDS     R7,R7,#+1
   \   000001B8   0xE001             B.N      ??printk_39
    421                                  }
    422                                  else
    423                                  {
    424                                      schar = 0;
   \                     ??printk_41: (+1)
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0x9003             STR      R0,[SP, #+12]
    425                                  }
    426                              }
    427                          }
    428                          dschar = FALSE;
   \                     ??printk_39: (+1)
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x9005             STR      R0,[SP, #+20]
    429                      
    430                          /*
    431                           * do the ZERO pad.
    432                           */
    433                          if (IS_FLAG_ZERO(flags_used))
   \   000001C2   0xEA5F 0x7009      LSLS     R0,R9,#+28
   \   000001C6   0xD511             BPL.N    ??printk_42
    434                          {
    435                              if (schar)
   \   000001C8   0x9803             LDR      R0,[SP, #+12]
   \   000001CA   0x2800             CMP      R0,#+0
   \   000001CC   0xD004             BEQ.N    ??printk_43
    436                                  printk_putc(schar, &count, info);
   \   000001CE   0x0022             MOVS     R2,R4
   \   000001D0   0xA900             ADD      R1,SP,#+0
   \   000001D2   0x9803             LDR      R0,[SP, #+12]
   \   000001D4   0x.... 0x....      BL       printk_putc
    437                              dschar = TRUE;
   \                     ??printk_43: (+1)
   \   000001D8   0x2001             MOVS     R0,#+1
   \   000001DA   0x9005             STR      R0,[SP, #+20]
    438                      
    439                              printk_pad_zero (vlen, field_width, &count, info);
   \   000001DC   0x0023             MOVS     R3,R4
   \   000001DE   0xAA00             ADD      R2,SP,#+0
   \   000001E0   0x4651             MOV      R1,R10
   \   000001E2   0x0038             MOVS     R0,R7
   \   000001E4   0x.... 0x....      BL       printk_pad_zero
    440                              vlen = field_width;
   \   000001E8   0x4657             MOV      R7,R10
   \   000001EA   0xE012             B.N      ??printk_44
    441                          }
    442                          else
    443                          {
    444                              if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_42: (+1)
   \   000001EC   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000001F0   0xD40F             BMI.N    ??printk_44
    445                              {
    446                                  printk_pad_space (vlen, field_width, &count, info);
   \   000001F2   0x0023             MOVS     R3,R4
   \   000001F4   0xAA00             ADD      R2,SP,#+0
   \   000001F6   0x4651             MOV      R1,R10
   \   000001F8   0x0038             MOVS     R0,R7
   \   000001FA   0x.... 0x....      BL       printk_pad_space
    447                      
    448                                  if (schar)
   \   000001FE   0x9803             LDR      R0,[SP, #+12]
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD004             BEQ.N    ??printk_45
    449                                      printk_putc(schar, &count, info);
   \   00000204   0x0022             MOVS     R2,R4
   \   00000206   0xA900             ADD      R1,SP,#+0
   \   00000208   0x9803             LDR      R0,[SP, #+12]
   \   0000020A   0x.... 0x....      BL       printk_putc
    450                                  dschar = TRUE;
   \                     ??printk_45: (+1)
   \   0000020E   0x2001             MOVS     R0,#+1
   \   00000210   0x9005             STR      R0,[SP, #+20]
    451                              }
    452                          }
    453                      
    454                          /* the string was built in reverse order, now display in */
    455                          /* correct order */
    456                          if (!dschar && schar)
   \                     ??printk_44: (+1)
   \   00000212   0x9805             LDR      R0,[SP, #+20]
   \   00000214   0x2800             CMP      R0,#+0
   \   00000216   0xD107             BNE.N    ??printk_46
   \   00000218   0x9803             LDR      R0,[SP, #+12]
   \   0000021A   0x2800             CMP      R0,#+0
   \   0000021C   0xD004             BEQ.N    ??printk_46
    457                          {
    458                              printk_putc(schar, &count, info);
   \   0000021E   0x0022             MOVS     R2,R4
   \   00000220   0xA900             ADD      R1,SP,#+0
   \   00000222   0x9803             LDR      R0,[SP, #+12]
   \   00000224   0x.... 0x....      BL       printk_putc
    459                          }
    460                          goto cont_xd;
   \                     ??printk_46: (+1)
   \   00000228   0xE098             B.N      ??printk_47
    461          
    462                      case 'x':
    463                      case 'X':
    464                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_28: (+1)
   \   0000022A   0x6828             LDR      R0,[R5, #+0]
   \   0000022C   0x1D2D             ADDS     R5,R5,#+4
   \   0000022E   0x9002             STR      R0,[SP, #+8]
    465                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
   \   00000230   0x2310             MOVS     R3,#+16
   \   00000232   0x2200             MOVS     R2,#+0
   \   00000234   0xA902             ADD      R1,SP,#+8
   \   00000236   0xA809             ADD      R0,SP,#+36
   \   00000238   0x.... 0x....      BL       printk_mknumstr
   \   0000023C   0x0007             MOVS     R7,R0
    466                          vstrp = &vstr[vlen];
   \   0000023E   0xA809             ADD      R0,SP,#+36
   \   00000240   0x1838             ADDS     R0,R7,R0
   \   00000242   0x0006             MOVS     R6,R0
    467          
    468                          dschar = FALSE;
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0x9005             STR      R0,[SP, #+20]
    469                          if (IS_FLAG_ZERO(flags_used))
   \   00000248   0xEA5F 0x7009      LSLS     R0,R9,#+28
   \   0000024C   0xD516             BPL.N    ??printk_48
    470                          {
    471                              if (IS_FLAG_POUND(flags_used))
   \   0000024E   0xEA5F 0x60C9      LSLS     R0,R9,#+27
   \   00000252   0xD50B             BPL.N    ??printk_49
    472                              {
    473                                  printk_putc('0', &count, info);
   \   00000254   0x0022             MOVS     R2,R4
   \   00000256   0xA900             ADD      R1,SP,#+0
   \   00000258   0x2030             MOVS     R0,#+48
   \   0000025A   0x.... 0x....      BL       printk_putc
    474                                  printk_putc('x', &count, info);
   \   0000025E   0x0022             MOVS     R2,R4
   \   00000260   0xA900             ADD      R1,SP,#+0
   \   00000262   0x2078             MOVS     R0,#+120
   \   00000264   0x.... 0x....      BL       printk_putc
    475                                  /*vlen += 2;*/
    476                                  dschar = TRUE;
   \   00000268   0x2001             MOVS     R0,#+1
   \   0000026A   0x9005             STR      R0,[SP, #+20]
    477                              }
    478                              printk_pad_zero (vlen, field_width, &count, info);
   \                     ??printk_49: (+1)
   \   0000026C   0x0023             MOVS     R3,R4
   \   0000026E   0xAA00             ADD      R2,SP,#+0
   \   00000270   0x4651             MOV      R1,R10
   \   00000272   0x0038             MOVS     R0,R7
   \   00000274   0x.... 0x....      BL       printk_pad_zero
    479                              vlen = field_width;
   \   00000278   0x4657             MOV      R7,R10
   \   0000027A   0xE01B             B.N      ??printk_50
    480                          }
    481                          else
    482                          {
    483                              if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_48: (+1)
   \   0000027C   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000280   0xD418             BMI.N    ??printk_50
    484                              {
    485                                  if (IS_FLAG_POUND(flags_used))
   \   00000282   0xEA5F 0x60C9      LSLS     R0,R9,#+27
   \   00000286   0xD500             BPL.N    ??printk_51
    486                                  {
    487                                      vlen += 2;
   \   00000288   0x1CBF             ADDS     R7,R7,#+2
    488                                  }
    489                                  printk_pad_space (vlen, field_width, &count, info);
   \                     ??printk_51: (+1)
   \   0000028A   0x0023             MOVS     R3,R4
   \   0000028C   0xAA00             ADD      R2,SP,#+0
   \   0000028E   0x4651             MOV      R1,R10
   \   00000290   0x0038             MOVS     R0,R7
   \   00000292   0x.... 0x....      BL       printk_pad_space
    490                                  if (IS_FLAG_POUND(flags_used))
   \   00000296   0xEA5F 0x60C9      LSLS     R0,R9,#+27
   \   0000029A   0xD50B             BPL.N    ??printk_50
    491                                  {
    492                                      printk_putc('0', &count, info);
   \   0000029C   0x0022             MOVS     R2,R4
   \   0000029E   0xA900             ADD      R1,SP,#+0
   \   000002A0   0x2030             MOVS     R0,#+48
   \   000002A2   0x.... 0x....      BL       printk_putc
    493                                      printk_putc('x', &count, info);
   \   000002A6   0x0022             MOVS     R2,R4
   \   000002A8   0xA900             ADD      R1,SP,#+0
   \   000002AA   0x2078             MOVS     R0,#+120
   \   000002AC   0x.... 0x....      BL       printk_putc
    494                                      dschar = TRUE;
   \   000002B0   0x2001             MOVS     R0,#+1
   \   000002B2   0x9005             STR      R0,[SP, #+20]
    495                                  }
    496                              }
    497                          }
    498          
    499                          if ((IS_FLAG_POUND(flags_used)) && !dschar)
   \                     ??printk_50: (+1)
   \   000002B4   0xEA5F 0x60C9      LSLS     R0,R9,#+27
   \   000002B8   0xD50D             BPL.N    ??printk_52
   \   000002BA   0x9805             LDR      R0,[SP, #+20]
   \   000002BC   0x2800             CMP      R0,#+0
   \   000002BE   0xD10A             BNE.N    ??printk_52
    500                          {
    501                              printk_putc('0', &count, info);
   \   000002C0   0x0022             MOVS     R2,R4
   \   000002C2   0xA900             ADD      R1,SP,#+0
   \   000002C4   0x2030             MOVS     R0,#+48
   \   000002C6   0x.... 0x....      BL       printk_putc
    502                              printk_putc('x', &count, info);
   \   000002CA   0x0022             MOVS     R2,R4
   \   000002CC   0xA900             ADD      R1,SP,#+0
   \   000002CE   0x2078             MOVS     R0,#+120
   \   000002D0   0x.... 0x....      BL       printk_putc
    503                              vlen += 2;
   \   000002D4   0x1CBF             ADDS     R7,R7,#+2
    504                          }
    505                          goto cont_xd;
   \                     ??printk_52: (+1)
   \   000002D6   0xE041             B.N      ??printk_47
    506          
    507                      case 'o':
    508                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_33: (+1)
   \   000002D8   0x6828             LDR      R0,[R5, #+0]
   \   000002DA   0x1D2D             ADDS     R5,R5,#+4
   \   000002DC   0x9002             STR      R0,[SP, #+8]
    509                          vlen = printk_mknumstr(vstr,&uval,FALSE,8);
   \   000002DE   0x2308             MOVS     R3,#+8
   \   000002E0   0x2200             MOVS     R2,#+0
   \   000002E2   0xA902             ADD      R1,SP,#+8
   \   000002E4   0xA809             ADD      R0,SP,#+36
   \   000002E6   0x.... 0x....      BL       printk_mknumstr
   \   000002EA   0x0007             MOVS     R7,R0
    510                          goto cont_u;
   \   000002EC   0xE01F             B.N      ??printk_53
    511                      case 'b':
    512                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_29: (+1)
   \   000002EE   0x6828             LDR      R0,[R5, #+0]
   \   000002F0   0x1D2D             ADDS     R5,R5,#+4
   \   000002F2   0x9002             STR      R0,[SP, #+8]
    513                          vlen = printk_mknumstr(vstr,&uval,FALSE,2);
   \   000002F4   0x2302             MOVS     R3,#+2
   \   000002F6   0x2200             MOVS     R2,#+0
   \   000002F8   0xA902             ADD      R1,SP,#+8
   \   000002FA   0xA809             ADD      R0,SP,#+36
   \   000002FC   0x.... 0x....      BL       printk_mknumstr
   \   00000300   0x0007             MOVS     R7,R0
    514                          goto cont_u;
   \   00000302   0xE014             B.N      ??printk_53
    515                      case 'p':
    516                          uval = (uint32)va_arg(ap, void *);
   \                     ??printk_34: (+1)
   \   00000304   0x6828             LDR      R0,[R5, #+0]
   \   00000306   0x1D2D             ADDS     R5,R5,#+4
   \   00000308   0x9002             STR      R0,[SP, #+8]
    517                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
   \   0000030A   0x2310             MOVS     R3,#+16
   \   0000030C   0x2200             MOVS     R2,#+0
   \   0000030E   0xA902             ADD      R1,SP,#+8
   \   00000310   0xA809             ADD      R0,SP,#+36
   \   00000312   0x.... 0x....      BL       printk_mknumstr
   \   00000316   0x0007             MOVS     R7,R0
    518                          goto cont_u;
   \   00000318   0xE009             B.N      ??printk_53
    519                      case 'u':
    520                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_36: (+1)
   \   0000031A   0x6828             LDR      R0,[R5, #+0]
   \   0000031C   0x1D2D             ADDS     R5,R5,#+4
   \   0000031E   0x9002             STR      R0,[SP, #+8]
    521                          vlen = printk_mknumstr(vstr,&uval,FALSE,10);
   \   00000320   0x230A             MOVS     R3,#+10
   \   00000322   0x2200             MOVS     R2,#+0
   \   00000324   0xA902             ADD      R1,SP,#+8
   \   00000326   0xA809             ADD      R0,SP,#+36
   \   00000328   0x.... 0x....      BL       printk_mknumstr
   \   0000032C   0x0007             MOVS     R7,R0
    522          
    523                          cont_u:
    524                              vstrp = &vstr[vlen];
   \                     ??printk_53: (+1)
   \   0000032E   0xA809             ADD      R0,SP,#+36
   \   00000330   0x1838             ADDS     R0,R7,R0
   \   00000332   0x0006             MOVS     R6,R0
    525          
    526                              if (IS_FLAG_ZERO(flags_used))
   \   00000334   0xEA5F 0x7009      LSLS     R0,R9,#+28
   \   00000338   0xD507             BPL.N    ??printk_54
    527                              {
    528                                  printk_pad_zero (vlen, field_width, &count, info);
   \   0000033A   0x0023             MOVS     R3,R4
   \   0000033C   0xAA00             ADD      R2,SP,#+0
   \   0000033E   0x4651             MOV      R1,R10
   \   00000340   0x0038             MOVS     R0,R7
   \   00000342   0x.... 0x....      BL       printk_pad_zero
    529                                  vlen = field_width;
   \   00000346   0x4657             MOV      R7,R10
   \   00000348   0xE008             B.N      ??printk_47
    530                              }
    531                              else
    532                              {
    533                                  if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_54: (+1)
   \   0000034A   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000034E   0xD405             BMI.N    ??printk_47
    534                                  {
    535                                      printk_pad_space (vlen, field_width, &count, info);
   \   00000350   0x0023             MOVS     R3,R4
   \   00000352   0xAA00             ADD      R2,SP,#+0
   \   00000354   0x4651             MOV      R1,R10
   \   00000356   0x0038             MOVS     R0,R7
   \   00000358   0x.... 0x....      BL       printk_pad_space
    536                                  }
    537                              }
    538          
    539                          cont_xd:
    540                              while (*vstrp)
   \                     ??printk_47: (+1)
   \   0000035C   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   00000360   0x2800             CMP      R0,#+0
   \   00000362   0xD007             BEQ.N    ??printk_55
    541                                  printk_putc(*vstrp--, &count, info);
   \   00000364   0x0022             MOVS     R2,R4
   \   00000366   0xA900             ADD      R1,SP,#+0
   \   00000368   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   0000036C   0x.... 0x....      BL       printk_putc
   \   00000370   0x1E76             SUBS     R6,R6,#+1
   \   00000372   0xE7F3             B.N      ??printk_47
    542          
    543                              if (IS_FLAG_MINUS(flags_used))
   \                     ??printk_55: (+1)
   \   00000374   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000378   0xD505             BPL.N    ??printk_56
    544                              {
    545                                  printk_pad_space (vlen, field_width, &count, info);
   \   0000037A   0x0023             MOVS     R3,R4
   \   0000037C   0xAA00             ADD      R2,SP,#+0
   \   0000037E   0x4651             MOV      R1,R10
   \   00000380   0x0038             MOVS     R0,R7
   \   00000382   0x.... 0x....      BL       printk_pad_space
    546                              }
    547                          break;
   \                     ??printk_56: (+1)
   \   00000386   0xE03F             B.N      ??printk_5
    548          
    549                      case 'c':
    550                          cval = (int8)va_arg(ap, uint32);
   \                     ??printk_30: (+1)
   \   00000388   0x6828             LDR      R0,[R5, #+0]
   \   0000038A   0x1D2D             ADDS     R5,R5,#+4
   \   0000038C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000038E   0x9007             STR      R0,[SP, #+28]
    551                          printk_putc(cval,&count, info);
   \   00000390   0x0022             MOVS     R2,R4
   \   00000392   0xA900             ADD      R1,SP,#+0
   \   00000394   0x9807             LDR      R0,[SP, #+28]
   \   00000396   0x.... 0x....      BL       printk_putc
    552                          break;
   \   0000039A   0xE035             B.N      ??printk_5
    553                      case 's':
    554                          sval = (int8 *)va_arg(ap, int8 *);
   \                     ??printk_35: (+1)
   \   0000039C   0x6828             LDR      R0,[R5, #+0]
   \   0000039E   0x1D2D             ADDS     R5,R5,#+4
   \   000003A0   0x4680             MOV      R8,R0
    555                          if (sval)
   \   000003A2   0xF1B8 0x0F00      CMP      R8,#+0
   \   000003A6   0xD022             BEQ.N    ??printk_57
    556                          {
    557                              vlen = strlen(sval);
   \   000003A8   0x4640             MOV      R0,R8
   \   000003AA   0x.... 0x....      BL       strlen
   \   000003AE   0x0007             MOVS     R7,R0
    558                              if (!IS_FLAG_MINUS(flags_used))
   \   000003B0   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000003B4   0xD405             BMI.N    ??printk_58
    559                              {
    560                                  printk_pad_space (vlen, field_width, &count, info);
   \   000003B6   0x0023             MOVS     R3,R4
   \   000003B8   0xAA00             ADD      R2,SP,#+0
   \   000003BA   0x4651             MOV      R1,R10
   \   000003BC   0x0038             MOVS     R0,R7
   \   000003BE   0x.... 0x....      BL       printk_pad_space
    561                              }
    562                              while (*sval)
   \                     ??printk_58: (+1)
   \   000003C2   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \   000003C6   0x2800             CMP      R0,#+0
   \   000003C8   0xD008             BEQ.N    ??printk_59
    563                                  printk_putc(*sval++,&count, info);
   \   000003CA   0x0022             MOVS     R2,R4
   \   000003CC   0xA900             ADD      R1,SP,#+0
   \   000003CE   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \   000003D2   0x.... 0x....      BL       printk_putc
   \   000003D6   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000003DA   0xE7F2             B.N      ??printk_58
    564                              if (IS_FLAG_MINUS(flags_used))
   \                     ??printk_59: (+1)
   \   000003DC   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000003E0   0xD505             BPL.N    ??printk_57
    565                              {
    566                                  printk_pad_space (vlen, field_width, &count, info);
   \   000003E2   0x0023             MOVS     R3,R4
   \   000003E4   0xAA00             ADD      R2,SP,#+0
   \   000003E6   0x4651             MOV      R1,R10
   \   000003E8   0x0038             MOVS     R0,R7
   \   000003EA   0x.... 0x....      BL       printk_pad_space
    567                              }
    568                          }
    569                          break;
   \                     ??printk_57: (+1)
   \   000003EE   0xE00B             B.N      ??printk_5
    570                      case 'n':
    571                          ivalp = (int32 *)va_arg(ap, int32 *);
   \                     ??printk_32: (+1)
   \   000003F0   0x6828             LDR      R0,[R5, #+0]
   \   000003F2   0x1D2D             ADDS     R5,R5,#+4
   \   000003F4   0x9008             STR      R0,[SP, #+32]
    572                          *ivalp = count;
   \   000003F6   0x9800             LDR      R0,[SP, #+0]
   \   000003F8   0x9908             LDR      R1,[SP, #+32]
   \   000003FA   0x6008             STR      R0,[R1, #+0]
    573                          break;
   \   000003FC   0xE004             B.N      ??printk_5
    574                      default:
    575                          printk_putc(c,&count, info);
   \                     ??printk_37: (+1)
   \   000003FE   0x0022             MOVS     R2,R4
   \   00000400   0xA900             ADD      R1,SP,#+0
   \   00000402   0x9801             LDR      R0,[SP, #+4]
   \   00000404   0x.... 0x....      BL       printk_putc
    576                          break;
    577                  }
    578              }
   \                     ??printk_5: (+1)
   \   00000408   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000040C   0xE601             B.N      ??printk_0
    579              return count;
   \                     ??printk_1: (+1)
   \   0000040E   0x9800             LDR      R0,[SP, #+0]
   \   00000410   0xB013             ADD      SP,SP,#+76
   \   00000412   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    580          }
    581          
    582          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    583          int32 printf (const int8 *fmt, ...)
    584          {
   \                     printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB57E             PUSH     {R1-R6,LR}
   \   00000004   0x0004             MOVS     R4,R0
    585              va_list ap;
    586              int32 rvalue;
    587              PRINTK_INFO info;
    588          
    589          
    590              info.dest = DEST_CONSOLE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9000             STR      R0,[SP, #+0]
    591              info.func = &out_char;
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    592              /*
    593               * Initialize the pointer to the variable length argument list.
    594               */
    595              va_start(ap, fmt);
   \   0000000E   0xA807             ADD      R0,SP,#+28
   \   00000010   0x0005             MOVS     R5,R0
    596              rvalue = printk(&info, fmt, ap);
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       printk
   \   0000001C   0x0006             MOVS     R6,R0
    597              /*
    598               * Cleanup the variable length argument list.
    599               */
    600              va_end(ap);
    601              return rvalue;
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0xBC7E             POP      {R1-R6}
   \   00000022   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    602          }
    603          
    604          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    605          int32 sprintf (int8 *s, const int8 *fmt, ...)
    606          {
   \                     sprintf: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB5FE             PUSH     {R1-R7,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    607              va_list ap;
    608              int32 rvalue = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    609              PRINTK_INFO info;
    610          
    611              /*
    612               * Initialize the pointer to the variable length argument list.
    613               */
    614              if (s != 0)
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD00D             BEQ.N    ??sprintf_0
    615              {
    616                  info.dest = DEST_STRING;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x9000             STR      R0,[SP, #+0]
    617                  info.loc = s;
   \   00000012   0x9402             STR      R4,[SP, #+8]
    618                  va_start(ap, fmt);
   \   00000014   0xA808             ADD      R0,SP,#+32
   \   00000016   0x0006             MOVS     R6,R0
    619                  rvalue = printk(&info, fmt, ap);
   \   00000018   0x0032             MOVS     R2,R6
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       printk
   \   00000022   0x0007             MOVS     R7,R0
    620                  *info.loc = '\0';
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9902             LDR      R1,[SP, #+8]
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    621                  va_end(ap);
    622              }
    623              return rvalue;
   \                     ??sprintf_0: (+1)
   \   0000002A   0x0038             MOVS     R0,R7
   \   0000002C   0xBCFE             POP      {R1-R7}
   \   0000002E   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    624          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     out_char
    625          
    626          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   printf
        40   -> printk
     112   printk
       112   -> printk_mknumstr
       112   -> printk_pad_space
       112   -> printk_pad_zero
       112   -> printk_putc
       112   -> strlen
      32   printk_mknumstr
      24   printk_pad_space
        24   -> printk_putc
      24   printk_pad_zero
        24   -> printk_putc
      16   printk_putc
        16   -- Indirect call
      40   sprintf
        40   -> printk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      38  printf
    1046  printk
     170  printk_mknumstr
      38  printk_pad_space
      38  printk_pad_zero
      50  printk_putc
      50  sprintf

 
 1 434 bytes in section .text
 
 1 434 bytes of CODE memory

Errors: none
Warnings: none
