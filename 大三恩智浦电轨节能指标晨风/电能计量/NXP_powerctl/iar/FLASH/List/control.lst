###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        14/Aug/2016  11:14:40
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\app\CTL\control.c
#    Command line =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\app\CTL\control.c
#        -D LPLD_K60 -lCN
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\
#        -lB
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\
#        -o
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\BSP\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\ITAC\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\CTL\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\CPU\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\common\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\FatFs\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\common\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\class\
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\control.lst
#    Object file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\Obj\control.o
#
###############################################################################

C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\app\CTL\control.c
      1          //控制部分通用代码
      2          #include "include.h"
      3          #include "math.h"

   \                                 In section .bss, align 4
      4          struct _ctl ctl;
   \                     ctl:
   \   00000000                      DS8 20
      5          
      6          
      7          
      8          
      9          //控制中断函数

   \                                 In section .text, align 2, keep-with-next
     10          void CTL_isr()//控制系统调度 //1ms
     11          {
   \                     CTL_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     12            {
     13              timer_cnt++ ;
   \   00000002   0x....             LDR.N    R0,??DataTable4_3
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable4_3
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
     14              bz_cnt++;
   \   0000000C   0x....             LDR.N    R0,??DataTable4_4
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable4_4
   \   00000014   0x8008             STRH     R0,[R1, #+0]
     15              send_cnt++;
   \   00000016   0x....             LDR.N    R0,??DataTable4_5
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable4_5
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     16              
     17              
     18              if (timer_cnt == 1000)//1s
   \   00000020   0x....             LDR.N    R0,??DataTable4_3
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000028   0xD102             BNE.N    ??CTL_isr_0
     19              {
     20                timer_cnt = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable4_3
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
     21              }
     22            }
     23            
     24            {
     25              if ( ctl.flag_on == 1 )
   \                     ??CTL_isr_0: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable4_6
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD102             BNE.N    ??CTL_isr_1
     26              {
     27                relay_ON();
   \   00000038   0x.... 0x....      BL       relay_ON
   \   0000003C   0xE001             B.N      ??CTL_isr_2
     28              }
     29              else
     30              {
     31                relay_OFF();
   \                     ??CTL_isr_1: (+1)
   \   0000003E   0x.... 0x....      BL       relay_OFF
     32              }
     33              if ( ctl.flag_start == 1)
   \                     ??CTL_isr_2: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable4_6
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD101             BNE.N    ??CTL_isr_3
     34              {
     35                meterage();
   \   0000004A   0x.... 0x....      BL       meterage
     36              }
     37              
     38            }
     39          }
   \                     ??CTL_isr_3: (+1)
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void relay_ON()
     42          {
   \                     relay_ON: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     43            LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch0, 9999);
   \   00000002   0xF242 0x720F      MOVW     R2,#+9999
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40038000
   \   0000000A   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     44          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void relay_OFF()
     47          {
   \                     relay_OFF: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     48             LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch0, 0);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40038000
   \   00000008   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     49          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void meterage()
     52          {
   \                     meterage: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     53            static uint8 cnt = 0;
     54            ctl.current = LPLD_ADC_Get(ADC0, AD8) ;
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x....             LDR.N    R0,??DataTable4_8  ;; 0x4003b000
   \   00000006   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000000A   0x....             LDR.N    R1,??DataTable4_6
   \   0000000C   0x6048             STR      R0,[R1, #+4]
     55            if (  ctl.current > ctl.current_offset  )
   \   0000000E   0x....             LDR.N    R0,??DataTable4_6
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x....             LDR.N    R1,??DataTable4_6
   \   00000014   0x6849             LDR      R1,[R1, #+4]
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD20A             BCS.N    ??meterage_0
     56            {
     57              ctl.current_sum += ( ctl.current - ctl.current_offset );
   \   0000001A   0x....             LDR.N    R0,??DataTable4_6
   \   0000001C   0x68C0             LDR      R0,[R0, #+12]
   \   0000001E   0x....             LDR.N    R1,??DataTable4_6
   \   00000020   0x6849             LDR      R1,[R1, #+4]
   \   00000022   0x1808             ADDS     R0,R1,R0
   \   00000024   0x....             LDR.N    R1,??DataTable4_6
   \   00000026   0x6889             LDR      R1,[R1, #+8]
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0x....             LDR.N    R1,??DataTable4_6
   \   0000002C   0x60C8             STR      R0,[R1, #+12]
   \   0000002E   0xE009             B.N      ??meterage_1
     58            }
     59            else
     60            {
     61              ctl.current_sum -= ( ctl.current - ctl.current_offset );
   \                     ??meterage_0: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable4_6
   \   00000032   0x68C0             LDR      R0,[R0, #+12]
   \   00000034   0x....             LDR.N    R1,??DataTable4_6
   \   00000036   0x6849             LDR      R1,[R1, #+4]
   \   00000038   0x1A40             SUBS     R0,R0,R1
   \   0000003A   0x....             LDR.N    R1,??DataTable4_6
   \   0000003C   0x6889             LDR      R1,[R1, #+8]
   \   0000003E   0x1808             ADDS     R0,R1,R0
   \   00000040   0x....             LDR.N    R1,??DataTable4_6
   \   00000042   0x60C8             STR      R0,[R1, #+12]
     62            }
     63            
     64            ctl.POWER = ( ctl.current_sum / 32768. * 5 ) * 2    
     65              * 12. * 0.001 ;
   \                     ??meterage_1: (+1)
   \   00000044   0x....             LDR.N    R0,??DataTable4_6
   \   00000046   0x68C0             LDR      R0,[R0, #+12]
   \   00000048   0x.... 0x....      BL       __aeabi_i2d
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x....             LDR.N    R3,??DataTable4_9  ;; 0x40e00000
   \   00000050   0x.... 0x....      BL       __aeabi_ddiv
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x....             LDR.N    R3,??DataTable4_10  ;; 0x40140000
   \   00000058   0x.... 0x....      BL       __aeabi_dmul
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000062   0x.... 0x....      BL       __aeabi_dmul
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x....             LDR.N    R3,??DataTable4_11  ;; 0x40280000
   \   0000006A   0x.... 0x....      BL       __aeabi_dmul
   \   0000006E   0x....             LDR.N    R2,??DataTable4_12  ;; 0xd2f1a9fc
   \   00000070   0x....             LDR.N    R3,??DataTable4_13  ;; 0x3f50624d
   \   00000072   0x.... 0x....      BL       __aeabi_dmul
   \   00000076   0x.... 0x....      BL       __aeabi_d2iz
   \   0000007A   0x....             LDR.N    R1,??DataTable4_6
   \   0000007C   0x6108             STR      R0,[R1, #+16]
     66            cnt++;
   \   0000007E   0x....             LDR.N    R0,??DataTable4_14
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0x....             LDR.N    R1,??DataTable4_14
   \   00000086   0x7008             STRB     R0,[R1, #+0]
     67            if ( cnt == 100 )
   \   00000088   0x....             LDR.N    R0,??DataTable4_14
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2864             CMP      R0,#+100
   \   0000008E   0xD104             BNE.N    ??meterage_2
     68            {
     69              cnt = 0;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x....             LDR.N    R1,??DataTable4_14
   \   00000094   0x7008             STRB     R0,[R1, #+0]
     70              show();
   \   00000096   0x.... 0x....      BL       show
     71            }
     72          }
   \                     ??meterage_2: (+1)
   \   0000009A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??cnt:
   \   00000000                      DS8 1
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void show()
     75          {
   \                     show: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     76            OLED_CLS();
   \   00000002   0x.... 0x....      BL       OLED_CLS
     77            OLED_P8x16Str(0,0,"WUT");
   \   00000006   0x....             ADR.N    R2,??DataTable4  ;; "WUT"
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       OLED_P8x16Str
     78            
     79            OLED_PrintInt16( 0,2,(int16)( (ctl.current - ctl.current_offset) / 32768. * 5000.) *2 );
   \   00000010   0x....             LDR.N    R0,??DataTable4_6
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0x....             LDR.N    R1,??DataTable4_6
   \   00000016   0x6889             LDR      R1,[R1, #+8]
   \   00000018   0x1A40             SUBS     R0,R0,R1
   \   0000001A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x....             LDR.N    R3,??DataTable4_9  ;; 0x40e00000
   \   00000022   0x.... 0x....      BL       __aeabi_ddiv
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x....             LDR.N    R3,??DataTable4_15  ;; 0x40b38800
   \   0000002A   0x.... 0x....      BL       __aeabi_dmul
   \   0000002E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000032   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000034   0x0042             LSLS     R2,R0,#+1
   \   00000036   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000038   0x2102             MOVS     R1,#+2
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       OLED_PrintInt16
     80            OLED_P8x16Str(80,2 ,"mA" );
   \   00000040   0x....             ADR.N    R2,??DataTable4_1  ;; 0x6D, 0x41, 0x00, 0x00
   \   00000042   0x2102             MOVS     R1,#+2
   \   00000044   0x2050             MOVS     R0,#+80
   \   00000046   0x.... 0x....      BL       OLED_P8x16Str
     81            
     82            OLED_PrintInt16( 0,4,(int16)( ctl.POWER ));
   \   0000004A   0x....             LDR.N    R0,??DataTable4_6
   \   0000004C   0x6902             LDR      R2,[R0, #+16]
   \   0000004E   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000050   0x2104             MOVS     R1,#+4
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       OLED_PrintInt16
     83            OLED_P8x16Str(80,4 ,"W*s" );
   \   00000058   0x....             ADR.N    R2,??DataTable4_2  ;; "W*s"
   \   0000005A   0x2104             MOVS     R1,#+4
   \   0000005C   0x2050             MOVS     R0,#+80
   \   0000005E   0x.... 0x....      BL       OLED_P8x16Str
     84          }
   \   00000062   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x57 0x55          DC8      "WUT"
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x6D 0x41          DC8      0x6D, 0x41, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x57 0x2A          DC8      "W*s"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     timer_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     bz_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     send_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ctl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40E00000         DC32     0x40e00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x40140000         DC32     0x40140000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x40280000         DC32     0x40280000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0xD2F1A9FC         DC32     0xd2f1a9fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x3F50624D         DC32     0x3f50624d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ??cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x40B38800         DC32     0x40b38800

   \                                 In section .rodata, align 4
   \   00000000   0x57 0x55          DC8 "WUT"
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x41          DC8 "mA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x57 0x2A          DC8 "W*s"
   \              0x73 0x00    
     85          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CTL_isr
         8   -> meterage
         8   -> relay_OFF
         8   -> relay_ON
       8   meterage
         8   -> LPLD_ADC_Get
         8   -> __aeabi_d2iz
         8   -> __aeabi_ddiv
         8   -> __aeabi_dmul
         8   -> __aeabi_i2d
         8   -> show
       8   relay_OFF
         8   -> LPLD_FTM_PWM_ChangeDuty
       8   relay_ON
         8   -> LPLD_FTM_PWM_ChangeDuty
       8   show
         8   -> OLED_CLS
         8   -> OLED_P8x16Str
         8   -> OLED_PrintInt16
         8   -> __aeabi_d2iz
         8   -> __aeabi_ddiv
         8   -> __aeabi_dmul
         8   -> __aeabi_ui2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ?_0
       4  ?_1
       4  ?_2
      80  CTL_isr
       1  cnt
      20  ctl
     156  meterage
      14  relay_OFF
      16  relay_ON
     100  show

 
  21 bytes in section .bss
  12 bytes in section .rodata
 430 bytes in section .text
 
 430 bytes of CODE  memory
  12 bytes of CONST memory
  21 bytes of DATA  memory

Errors: none
Warnings: 1
