###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        28/Jul/2016  17:58:33
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_ADC.c
#    Command line =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_ADC.c -D
#        LPLD_K60 -lCN
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\
#        -lB
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\
#        -o
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\BSP\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\ITAC\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\CTL\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\CPU\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\common\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\FatFs\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\common\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\class\
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\HW_ADC.lst
#    Object file  =  
#        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\Obj\HW_ADC.o
#
###############################################################################

C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_ADC.c
      1          /**
      2           * @file HW_ADC.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief ADC底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_ADC.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          ADC_ISR_CALLBACK ADC_ISR[2];
   \                     ADC_ISR:
   \   00000000                      DS8 8
     27          
     28          static uint8 LPLD_ADC_Cal(ADC_Type *);
     29          
     30          /*
     31           * LPLD_ADC_Init
     32           * ADC通用初始化函数，选择ADCx、采集模式、精度等参数
     33           * 
     34           * 参数:
     35           *    adc_init_structure--ADC初始化结构体，
     36           *                        具体定义见ADC_InitTypeDef
     37           *
     38           * 输出:
     39           *    0--配置错误
     40           *    1--配置成功
     41           */

   \                                 In section .text, align 2, keep-with-next
     42          uint8 LPLD_ADC_Init(ADC_InitTypeDef adc_init_structure)
     43          {
   \                     LPLD_ADC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     44            uint8 i;
     45            ADC_Type *adcx = adc_init_structure.ADC_Adcx;
   \   00000006   0x9C0A             LDR      R4,[SP, #+40]
     46            uint8 diff = adc_init_structure.ADC_DiffMode;
   \   00000008   0xF89D 0x502C      LDRB     R5,[SP, #+44]
     47            uint8 mode = adc_init_structure.ADC_BitMode;
   \   0000000C   0xF89D 0x002D      LDRB     R0,[SP, #+45]
   \   00000010   0xF88D 0x0001      STRB     R0,[SP, #+1]
     48            uint8 time = adc_init_structure.ADC_SampleTimeCfg;
   \   00000014   0xF89D 0x602E      LDRB     R6,[SP, #+46]
     49            uint8 ltime = adc_init_structure.ADC_LongSampleTimeSel;
   \   00000018   0xF89D 0x002F      LDRB     R0,[SP, #+47]
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     50            uint8 avg = adc_init_structure.ADC_HwAvgSel;
   \   00000020   0xF89D 0x7030      LDRB     R7,[SP, #+48]
     51            uint8 muxab = adc_init_structure.ADC_MuxSel;
   \   00000024   0xF89D 0x8032      LDRB     R8,[SP, #+50]
     52            uint8 pga = adc_init_structure.ADC_PgaGain;
   \   00000028   0xF89D 0x9031      LDRB     R9,[SP, #+49]
     53            uint8 hwtrg = adc_init_structure.ADC_HwTrgCfg;
   \   0000002C   0xF89D 0xA034      LDRB     R10,[SP, #+52]
     54            ADC_ISR_CALLBACK isr_func = adc_init_structure.ADC_Isr;
   \   00000030   0xF8DD 0xB038      LDR      R11,[SP, #+56]
     55            
     56            //参数检查
     57            ASSERT( (diff==ADC_SE)||(diff==ADC_DIFF) );  //判断模式选择
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD007             BEQ.N    ??LPLD_ADC_Init_0
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D20             CMP      R5,#+32
   \   0000003E   0xD004             BEQ.N    ??LPLD_ADC_Init_0
   \   00000040   0x2139             MOVS     R1,#+57
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000046   0x.... 0x....      BL       assert_failed
     58            ASSERT( mode<=SE_16BIT );       //判断精度选择
   \                     ??LPLD_ADC_Init_0: (+1)
   \   0000004A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000004E   0x2804             CMP      R0,#+4
   \   00000050   0xDB04             BLT.N    ??LPLD_ADC_Init_1
   \   00000052   0x213A             MOVS     R1,#+58
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000058   0x.... 0x....      BL       assert_failed
     59            ASSERT( (time==SAMTIME_SHORT)||(time==SAMTIME_LONG) );  //判断采样时间选择
   \                     ??LPLD_ADC_Init_1: (+1)
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x2E00             CMP      R6,#+0
   \   00000060   0xD007             BEQ.N    ??LPLD_ADC_Init_2
   \   00000062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000064   0x2E10             CMP      R6,#+16
   \   00000066   0xD004             BEQ.N    ??LPLD_ADC_Init_2
   \   00000068   0x213B             MOVS     R1,#+59
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000006E   0x.... 0x....      BL       assert_failed
     60            ASSERT( ltime<=LSAMTIME_2EX );  //判断长采样时间
   \                     ??LPLD_ADC_Init_2: (+1)
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0x2804             CMP      R0,#+4
   \   00000078   0xDB04             BLT.N    ??LPLD_ADC_Init_3
   \   0000007A   0x213C             MOVS     R1,#+60
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000080   0x.... 0x....      BL       assert_failed
     61            ASSERT( (avg&0x3)<=(HW_32AVG&0x3) );  //判断硬件平均
   \                     ??LPLD_ADC_Init_3: (+1)
   \   00000084   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000086   0xF017 0x0003      ANDS     R0,R7,#0x3
   \   0000008A   0x2804             CMP      R0,#+4
   \   0000008C   0xD304             BCC.N    ??LPLD_ADC_Init_4
   \   0000008E   0x213D             MOVS     R1,#+61
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000094   0x.... 0x....      BL       assert_failed
     62            ASSERT( (muxab==MUX_ADXXA)||(muxab==MUX_ADXXB) );  //判断ADC复用AB选择
   \                     ??LPLD_ADC_Init_4: (+1)
   \   00000098   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009C   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000A0   0xD009             BEQ.N    ??LPLD_ADC_Init_5
   \   000000A2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000A6   0xF1B8 0x0F10      CMP      R8,#+16
   \   000000AA   0xD004             BEQ.N    ??LPLD_ADC_Init_5
   \   000000AC   0x213E             MOVS     R1,#+62
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000000B2   0x.... 0x....      BL       assert_failed
     63            ASSERT( (pga&0x7)<=(LSAMTIME_2EX&0x7));  //判断PGA
   \                     ??LPLD_ADC_Init_5: (+1)
   \   000000B6   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000BA   0xF019 0x0007      ANDS     R0,R9,#0x7
   \   000000BE   0x2804             CMP      R0,#+4
   \   000000C0   0xDB04             BLT.N    ??LPLD_ADC_Init_6
   \   000000C2   0x213F             MOVS     R1,#+63
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000000C8   0x.... 0x....      BL       assert_failed
     64            
     65            //配置ADC时钟
     66            if(adcx == ADC0)
   \                     ??LPLD_ADC_Init_6: (+1)
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x4003b000
   \   000000D0   0x4284             CMP      R4,R0
   \   000000D2   0xD10B             BNE.N    ??LPLD_ADC_Init_7
     67            {
     68              i=0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xF88D 0x0002      STRB     R0,[SP, #+2]
     69              SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;   // 开启ADC0时钟
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004803c
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x4004803c
   \   000000E8   0x6008             STR      R0,[R1, #+0]
   \   000000EA   0xE011             B.N      ??LPLD_ADC_Init_8
     70            }
     71            else if(adcx == ADC1)
   \                     ??LPLD_ADC_Init_7: (+1)
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x400bb000
   \   000000F0   0x4284             CMP      R4,R0
   \   000000F2   0xD10B             BNE.N    ??LPLD_ADC_Init_9
     72            {
     73              i=1;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0xF88D 0x0002      STRB     R0,[SP, #+2]
     74              SIM->SCGC3 |= SIM_SCGC3_ADC1_MASK;   // 开启ADC1时钟
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40048030
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0x40048030
   \   00000108   0x6008             STR      R0,[R1, #+0]
   \   0000010A   0xE001             B.N      ??LPLD_ADC_Init_8
     75            }
     76            else 
     77            {
     78              return 0;
   \                     ??LPLD_ADC_Init_9: (+1)
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0xE048             B.N      ??LPLD_ADC_Init_10
     79            }
     80          
     81            if(adc_init_structure.ADC_CalEnable == TRUE)
   \                     ??LPLD_ADC_Init_8: (+1)
   \   00000110   0xF89D 0x0033      LDRB     R0,[SP, #+51]
   \   00000114   0x2801             CMP      R0,#+1
   \   00000116   0xD102             BNE.N    ??LPLD_ADC_Init_11
     82              LPLD_ADC_Cal(adcx);  //进行ADC校准
   \   00000118   0x0020             MOVS     R0,R4
   \   0000011A   0x.... 0x....      BL       LPLD_ADC_Cal
     83            
     84            //设置ADCCFG1寄存器
     85            adcx->CFG1  =  0& (~ADC_CFG1_ADLPC_MASK)         // 重新为正常使用进行配置
     86                            | ADC_CFG1_ADIV(ADIV_1)          // ADC输入时钟分频为 1
     87                            | time                           // 设置长短时间采样模式
     88                            | ADC_CFG1_ADICLK(ADICLK_BUS_2)  // ADC输入时钟源为 BusClk
     89                            | ADC_CFG1_MODE(mode);           //设置ADC转换精度
   \                     ??LPLD_ADC_Init_11: (+1)
   \   0000011E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000120   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000124   0x0080             LSLS     R0,R0,#+2
   \   00000126   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   0000012A   0x4330             ORRS     R0,R0,R6
   \   0000012C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000130   0x60A0             STR      R0,[R4, #+8]
     90          
     91            //设置ADCCFG2寄存器
     92            adcx->CFG2 = 0 & (~ADC_CFG2_ADACKEN_MASK)   //禁用异步时钟输出
     93                           | muxab        // ADC复用选择
     94                           | ADC_CFG2_ADHSC_MASK        // 高速转换
     95                           | ADC_CFG2_ADLSTS(ltime);    // 长采样时间时钟周期选择
   \   00000132   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000136   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000013A   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000013E   0xEA50 0x0008      ORRS     R0,R0,R8
   \   00000142   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000146   0x60E0             STR      R0,[R4, #+12]
     96                                                        // 总采样周期见K60技术文档 page:840
     97            //用于设定阈值
     98            adcx->CV1  = 0x1234u ; 
   \   00000148   0xF241 0x2034      MOVW     R0,#+4660
   \   0000014C   0x61A0             STR      R0,[R4, #+24]
     99            adcx->CV2  = 0x5678u ;
   \   0000014E   0xF245 0x6078      MOVW     R0,#+22136
   \   00000152   0x61E0             STR      R0,[R4, #+28]
    100            
    101            adcx->SC2  = 0 | (hwtrg & ADC_SC2_ADTRG_MASK) //设置触发方式
    102                           & (~ADC_SC2_ACFE_MASK)         //关闭比较功能
    103                           & (~ADC_SC2_DMAEN_MASK)        //关闭DMA
    104                           |  ADC_SC2_ACREN_MASK          //使能范围比较
    105                           |  ADC_SC2_ACFGT_MASK          //使能大于比较功能
    106                           |  ADC_SC2_REFSEL(REFSEL_EXT); //选择外部参考源VREFH和VREFL
   \   00000154   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000158   0xF01A 0x0040      ANDS     R0,R10,#0x40
   \   0000015C   0xF050 0x0018      ORRS     R0,R0,#0x18
   \   00000160   0x6220             STR      R0,[R4, #+32]
    107            
    108            if(adc_init_structure.ADC_DmaEnable == TRUE) 
   \   00000162   0xF89D 0x0035      LDRB     R0,[SP, #+53]
   \   00000166   0x2801             CMP      R0,#+1
   \   00000168   0xD103             BNE.N    ??LPLD_ADC_Init_12
    109              adcx->SC2  |= ADC_SC2_DMAEN_MASK;   //使能DMA
   \   0000016A   0x6A20             LDR      R0,[R4, #+32]
   \   0000016C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000170   0x6220             STR      R0,[R4, #+32]
    110          
    111            adcx->SC3  = 0 & (~ADC_SC3_CAL_MASK)          //关闭校准
    112                           & (~ADC_SC3_ADCO_MASK)         //选择一次转换
    113                           |  avg;        //硬件平均
   \                     ??LPLD_ADC_Init_12: (+1)
   \   00000172   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000174   0x6267             STR      R7,[R4, #+36]
    114            
    115            adcx->PGA  = pga<<ADC_PGA_PGAG_SHIFT; 
   \   00000176   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000017A   0xEA5F 0x4009      LSLS     R0,R9,#+16
   \   0000017E   0x6520             STR      R0,[R4, #+80]
    116            
    117            //校准完毕后再重新初始化ADC寄存器
    118            //adcx->SC1[0] = ADC_SC1_ADCH(AD31);    //复位SC1
    119            adcx->SC1[hwtrg & 0x01] = diff;         //设置单端、差分输入
   \   00000180   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000182   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000186   0xF01A 0x0001      ANDS     R0,R10,#0x1
   \   0000018A   0xF844 0x5020      STR      R5,[R4, R0, LSL #+2]
    120            
    121            if(isr_func!= NULL)
   \   0000018E   0x4658             MOV      R0,R11
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD005             BEQ.N    ??LPLD_ADC_Init_13
    122            {
    123              ADC_ISR[i] = isr_func;
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000198   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   0000019C   0xF840 0xB021      STR      R11,[R0, R1, LSL #+2]
    124            }
    125            
    126            return 1;
   \                     ??LPLD_ADC_Init_13: (+1)
   \   000001A0   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_Init_10: (+1)
   \   000001A2   0xE8BD 0x0FF2      POP      {R1,R4-R11}
   \   000001A6   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    127          }
    128          
    129          /*
    130           * LPLD_ADC_Deinit
    131           * ADC反初始化函数，禁用ADC模块
    132           * 
    133           * 参数:
    134           *    adc_init_structure--ADC初始化结构体，
    135           *                        具体定义见ADC_InitTypeDef
    136           *
    137           * 输出:
    138           *    0--配置错误
    139           *    1--配置成功
    140           */

   \                                 In section .text, align 2, keep-with-next
    141          uint8 LPLD_ADC_Deinit(ADC_InitTypeDef adc_init_structure)
    142          {
   \                     LPLD_ADC_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
    143            ADC_Type *adcx = adc_init_structure.ADC_Adcx;
   \   00000002   0x9900             LDR      R1,[SP, #+0]
    144            uint8 hwtrg = adc_init_structure.ADC_HwTrgCfg;
   \   00000004   0xF89D 0x200C      LDRB     R2,[SP, #+12]
    145            
    146            adcx->SC1[hwtrg & 0x01] = ADC_SC1_ADCH(AD31);    //复位SC1
   \   00000008   0x201F             MOVS     R0,#+31
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0xF012 0x0301      ANDS     R3,R2,#0x1
   \   00000010   0xF841 0x0023      STR      R0,[R1, R3, LSL #+2]
    147            
    148            //配置ADC时钟
    149            if(adcx == ADC0)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x4003b000
   \   00000018   0x4281             CMP      R1,R0
   \   0000001A   0xD108             BNE.N    ??LPLD_ADC_Deinit_0
    150            {
    151              SIM->SCGC6 &= ~(SIM_SCGC6_ADC0_MASK);   // 关闭ADC0时钟
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004803c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable10_4  ;; 0x4004803c
   \   0000002A   0x6018             STR      R0,[R3, #+0]
   \   0000002C   0xE00E             B.N      ??LPLD_ADC_Deinit_1
    152            }
    153            else if(adcx == ADC1)
   \                     ??LPLD_ADC_Deinit_0: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x400bb000
   \   00000032   0x4281             CMP      R1,R0
   \   00000034   0xD108             BNE.N    ??LPLD_ADC_Deinit_2
    154            {
    155              SIM->SCGC3 &= ~(SIM_SCGC3_ADC1_MASK);   // 关闭ADC1时钟
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40048030
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   00000040   0x.... 0x....      LDR.W    R3,??DataTable10_6  ;; 0x40048030
   \   00000044   0x6018             STR      R0,[R3, #+0]
   \   00000046   0xE001             B.N      ??LPLD_ADC_Deinit_1
    156            }
    157            else 
    158            {
    159              return 0;
   \                     ??LPLD_ADC_Deinit_2: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xE000             B.N      ??LPLD_ADC_Deinit_3
    160            }
    161            
    162            return 1;
   \                     ??LPLD_ADC_Deinit_1: (+1)
   \   0000004C   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_Deinit_3: (+1)
   \   0000004E   0xB004             ADD      SP,SP,#+16
   \   00000050   0x4770             BX       LR               ;; return
    163          }
    164          
    165          /*
    166           * LPLD_ADC_Get
    167           * 软件触发模式获取AD转换结果
    168           * 
    169           * 参数:
    170           *    adcx--ADCx模块号
    171           *      |__ADC0          --ADC0
    172           *      |__ADC1          --ADC1
    173           *    chn--ADC采集输入通道,详见技术手册K60P144M100SF2RM第118页
    174           *      ADC0
    175           *      |__DAD0          --差分(ADC0_DP0和ADC0_DM0)/单端(ADC0_DP0)
    176           *      |__DAD1          --差分(ADC0_DP1和ADC0_DM1)/单端(ADC0_DP1)
    177           *      |__DAD2          --差分(PGA0_DP和PGA0_DM)/单端(PGA0_DP)
    178           *      |__DAD3          --差分(ADC0_DP3和ADC0_DM3)/单端(ADC0_DP3)
    179           *      |__AD4           --单端A(保留)/单端B(ADC0_SE4b--PTC2)
    180           *      |__AD5           --单端A(保留)/单端B(ADC0_SE5b--PTD1)
    181           *      |__AD6           --单端A(保留)/单端B(ADC0_SE6b--PTD5)
    182           *      |__AD7           --单端A(保留)/单端B(ADC0_SE7b--PTD6)
    183           *      |__AD8           --单端(ADC0_SE8--PTB0)
    184           *      |__AD9           --单端(ADC0_SE9--PTB1)
    185           *      |__AD10          --单端(ADC0_SE10--PTA7)
    186           *      |__AD11          --单端(ADC0_SE11--PTA8)
    187           *      |__AD12          --单端(ADC0_SE12--PTB2)
    188           *      |__AD13          --单端(ADC0_SE13--PTB3)
    189           *      |__AD14          --单端(ADC0_SE14--PTC0)
    190           *      |__AD15          --单端(ADC0_SE15--PTC1)
    191           *      |__AD16          --单端(ADC0_SE16)
    192           *      |__AD17          --单端(ADC0_SE17-PTE24)
    193           *      |__AD18          --单端(ADC0_SE18--PTE25)
    194           *      |__AD19          --单端(ADC0_DM0)
    195           *      |__AD20          --单端(ADC0_DM1)
    196           *      |__AD23          --单端(DAC0)
    197           *      |__AD26          --温度传感器
    198           *      |__AD27          --Bandgap
    199           *      |__AD29          --差分(-VREFH)/单端(VREFH)
    200           *      |__AD30          --单端(VREFL)
    201           *      ADC1
    202           *      |__DAD0          --差分(ADC1_DP0和ADC1_DM0)/单端(ADC1_DP0)
    203           *      |__DAD1          --差分(ADC1_DP1和ADC1_DM1)/单端(ADC1_DP1)
    204           *      |__DAD2          --差分(PGA1_DP和PGA1_DM)/单端(PGA1_DP)
    205           *      |__DAD3          --差分(ADC1_DP3和ADC1_DM3)/单端(ADC1_DP3)
    206           *      |__AD4           --单端A(ADC1_SE4a--PTE0)/单端B(ADC1_SE4b--PTC8)
    207           *      |__AD5           --单端A(ADC1_SE5a--PTE1)/单端B(ADC1_SE5b--PTC9)
    208           *      |__AD6           --单端A(ADC1_SE6a--PTE2)/单端B(ADC1_SE6b--PTC10)
    209           *      |__AD7           --单端A(ADC1_SE7a--PTE3)/单端B(ADC1_SE7b--PTC11)
    210           *      |__AD8           --单端(ADC1_SE8--PTB0)
    211           *      |__AD9           --单端(ADC1_SE9--PTB1)
    212           *      |__AD10          --单端(ADC1_SE10--PTB4)
    213           *      |__AD11          --单端(ADC1_SE11--PTB5)
    214           *      |__AD12          --单端(ADC1_SE12--PTB6)
    215           *      |__AD13          --单端(ADC1_SE13--PTB7)
    216           *      |__AD14          --单端(ADC1_SE14--PTB10)
    217           *      |__AD15          --单端(ADC1_SE15--PTB11)
    218           *      |__AD16          --单端(ADC1_SE16)
    219           *      |__AD17          --单端(ADC1_SE17--PTA17)
    220           *      |__AD18          --单端(VREF)
    221           *      |__AD19          --单端(ADC1_DM0)
    222           *      |__AD20          --单端(ADC1_DM1)
    223           *      |__AD23          --单端(DAC1)
    224           *      |__AD26          --温度传感器
    225           *      |__AD27          --Bandgap
    226           *      |__AD29          --差分(-VREFH)/单端(VREFH)
    227           *      |__AD30          --单端(VREFL)
    228           *
    229           * 输出:
    230           *    AD通道转换值(右对齐)，若为差分转换结果，则为二进制补码格式(需强制转换为int16)
    231           *
    232           */

   \                                 In section .text, align 2, keep-with-next
    233          uint16 LPLD_ADC_Get(ADC_Type *adcx, AdcChnEnum_Type chn)
    234          {
    235            adcx->SC1[0] &= ~(ADC_SC1_AIEN_MASK);
   \                     LPLD_ADC_Get: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0xF032 0x0240      BICS     R2,R2,#0x40
   \   00000006   0x6002             STR      R2,[R0, #+0]
    236            adcx->SC1[0] &= ~(ADC_SC1_ADCH_MASK);
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x0952             LSRS     R2,R2,#+5
   \   0000000C   0x0152             LSLS     R2,R2,#+5
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    237            adcx->SC1[0] |= ADC_SC1_ADCH(chn);
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0xF011 0x031F      ANDS     R3,R1,#0x1F
   \   00000018   0x431A             ORRS     R2,R3,R2
   \   0000001A   0x6002             STR      R2,[R0, #+0]
    238            while((adcx->SC1[0]&ADC_SC1_COCO_MASK) == 0); //等待转换完成  
   \                     ??LPLD_ADC_Get_0: (+1)
   \   0000001C   0x6802             LDR      R2,[R0, #+0]
   \   0000001E   0x0612             LSLS     R2,R2,#+24
   \   00000020   0xD5FC             BPL.N    ??LPLD_ADC_Get_0
    239            return adcx->R[0];
   \   00000022   0x6900             LDR      R0,[R0, #+16]
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x4770             BX       LR               ;; return
    240          }
    241          
    242          /*
    243           * LPLD_ADC_EnableConversion
    244           * 使能ADCx转换通道，用于软件中断、硬件触发等模式
    245           * 
    246           * 参数:
    247           *    adcx--ADCx模块号
    248           *      |__ADC0          --ADC0
    249           *      |__ADC1          --ADC1
    250           *    chn--ADC采集输入通道,详见技术手册K60P144M100SF2RM第118页
    251           *      取值同LPLD_ADC_Get形参chn
    252           *    ab--SC1寄存器A、B通道选择
    253           *      |__0          --A转换通道
    254           *      |__1          --B转换通道
    255           *    irq--是否使能转换完成中断
    256           *      |__TRUE       --使能转换完成中断
    257           *      |__FALSE      --禁用转换完成中断
    258           *
    259           * 输出:
    260           *    无
    261           *
    262           */

   \                                 In section .text, align 2, keep-with-next
    263          void LPLD_ADC_EnableConversion(ADC_Type *adcx, AdcChnEnum_Type chn, uint8 ab, boolean irq)
    264          {
   \                     LPLD_ADC_EnableConversion: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    265            //参数检查
    266            ASSERT( ab<=1 );  //判断AB控制寄存器
   \   0000000A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000C   0x2E02             CMP      R6,#+2
   \   0000000E   0xDB05             BLT.N    ??LPLD_ADC_EnableConversion_0
   \   00000010   0xF44F 0x7185      MOV      R1,#+266
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000018   0x.... 0x....      BL       assert_failed
    267            ASSERT( irq<=1 );  //判断是否使能中断
   \                     ??LPLD_ADC_EnableConversion_0: (+1)
   \   0000001C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   0x2F02             CMP      R7,#+2
   \   00000020   0xDB05             BLT.N    ??LPLD_ADC_EnableConversion_1
   \   00000022   0xF240 0x110B      MOVW     R1,#+267
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000002A   0x.... 0x....      BL       assert_failed
    268            if(irq == TRUE)
   \                     ??LPLD_ADC_EnableConversion_1: (+1)
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0x2F01             CMP      R7,#+1
   \   00000032   0xD107             BNE.N    ??LPLD_ADC_EnableConversion_2
    269            {
    270              adcx->SC1[ab] |= (ADC_SC1_AIEN_MASK);
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0xF854 0x0026      LDR      R0,[R4, R6, LSL #+2]
   \   0000003A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    271            }
    272            adcx->SC1[ab] &= ~(ADC_SC1_ADCH_MASK);
   \                     ??LPLD_ADC_EnableConversion_2: (+1)
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0xF854 0x0026      LDR      R0,[R4, R6, LSL #+2]
   \   0000004A   0x0940             LSRS     R0,R0,#+5
   \   0000004C   0x0140             LSLS     R0,R0,#+5
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    273            adcx->SC1[ab] |= ADC_SC1_ADCH(chn);
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0xF854 0x0026      LDR      R0,[R4, R6, LSL #+2]
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0xF015 0x011F      ANDS     R1,R5,#0x1F
   \   00000060   0x4308             ORRS     R0,R1,R0
   \   00000062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000064   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    274          }
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    275          
    276          /*
    277           * LPLD_ADC_GetResult
    278           * 获取AD转换结果
    279           * 
    280           * 参数:
    281           *    adcx--ADCx模块号
    282           *      |__ADC0          --ADC0
    283           *      |__ADC1          --ADC1
    284           *    ab--SC1寄存器A、B通道选择
    285           *      |__0          --A转换通道
    286           *      |__1          --B转换通道
    287           *
    288           * 输出:
    289           *    AD通道转换值(右对齐)，若为差分转换结果，则为二进制补码格式(需强制转换为int16)
    290           *
    291           */

   \                                 In section .text, align 2, keep-with-next
    292          uint16 LPLD_ADC_GetResult(ADC_Type *adcx, uint8 ab)
    293          {
   \                     LPLD_ADC_GetResult: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    294            //参数检查
    295            ASSERT( ab<=1 );  //判断AB控制寄存器
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D02             CMP      R5,#+2
   \   0000000A   0xDB04             BLT.N    ??LPLD_ADC_GetResult_0
   \   0000000C   0xF240 0x1127      MOVW     R1,#+295
   \   00000010   0x....             LDR.N    R0,??DataTable10_2
   \   00000012   0x.... 0x....      BL       assert_failed
    296            return adcx->R[ab];
   \                     ??LPLD_ADC_GetResult_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0xEB14 0x0085      ADDS     R0,R4,R5, LSL #+2
   \   0000001C   0x6900             LDR      R0,[R0, #+16]
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    297          }
    298          
    299          /*
    300           * LPLD_ADC_GetSC1nCOCO
    301           * 获取SC1寄存器中COCO位置1的编号
    302           * 
    303           * 参数:
    304           *    adcx--ADCx模块号
    305           *      |__ADC0          --ADC0
    306           *      |__ADC1          --ADC1
    307           *
    308           * 输出:
    309          *    0--SC1A寄存器COCO位置1
    310          *    1--SC1B寄存器COCO位置1
    311           *
    312           */

   \                                 In section .text, align 2, keep-with-next
    313          uint8 LPLD_ADC_GetSC1nCOCO(ADC_Type *adcx)
    314          {
   \                     LPLD_ADC_GetSC1nCOCO: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    315            if(adcx->SC1[0] & ADC_SC1_COCO_MASK)
   \   00000002   0x6808             LDR      R0,[R1, #+0]
   \   00000004   0x0600             LSLS     R0,R0,#+24
   \   00000006   0xD501             BPL.N    ??LPLD_ADC_GetSC1nCOCO_0
    316              return 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE005             B.N      ??LPLD_ADC_GetSC1nCOCO_1
    317            if(adcx->SC1[1] & ADC_SC1_COCO_MASK)
   \                     ??LPLD_ADC_GetSC1nCOCO_0: (+1)
   \   0000000C   0x6848             LDR      R0,[R1, #+4]
   \   0000000E   0x0600             LSLS     R0,R0,#+24
   \   00000010   0xD501             BPL.N    ??LPLD_ADC_GetSC1nCOCO_2
    318              return 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE000             B.N      ??LPLD_ADC_GetSC1nCOCO_1
    319            return -1;
   \                     ??LPLD_ADC_GetSC1nCOCO_2: (+1)
   \   00000016   0x20FF             MOVS     R0,#+255
   \                     ??LPLD_ADC_GetSC1nCOCO_1: (+1)
   \   00000018   0x4770             BX       LR               ;; return
    320          }
    321          
    322          /*
    323           * LPLD_ADC_EnableIrq
    324           * 使能ADCx中断
    325           * 
    326           * 参数:
    327           *    adc_init_structure--PIT初始化结构体，
    328           *                        具体定义见ADC_InitTypeDef
    329           *
    330           * 输出:
    331           *    0--配置错误
    332           *    1--配置成功
    333           *
    334           */

   \                                 In section .text, align 2, keep-with-next
    335          uint8 LPLD_ADC_EnableIrq(ADC_InitTypeDef adc_init_structure)
    336          {
   \                     LPLD_ADC_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB538             PUSH     {R3-R5,LR}
    337            uint8 i;
    338            ADC_Type *adcx = adc_init_structure.ADC_Adcx;
   \   00000004   0x9D04             LDR      R5,[SP, #+16]
    339            
    340            if(adcx == ADC0)
   \   00000006   0x....             LDR.N    R0,??DataTable10_3  ;; 0x4003b000
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD102             BNE.N    ??LPLD_ADC_EnableIrq_0
    341              i=0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xE007             B.N      ??LPLD_ADC_EnableIrq_1
    342            else if(adcx == ADC1)
   \                     ??LPLD_ADC_EnableIrq_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable10_5  ;; 0x400bb000
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD102             BNE.N    ??LPLD_ADC_EnableIrq_2
    343              i=1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x0004             MOVS     R4,R0
   \   0000001C   0xE001             B.N      ??LPLD_ADC_EnableIrq_1
    344            else
    345              return 0;
   \                     ??LPLD_ADC_EnableIrq_2: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xE005             B.N      ??LPLD_ADC_EnableIrq_3
    346          
    347            enable_irq((IRQn_Type)(ADC0_IRQn + i));
   \                     ??LPLD_ADC_EnableIrq_1: (+1)
   \   00000022   0xF114 0x0039      ADDS     R0,R4,#+57
   \   00000026   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       NVIC_EnableIRQ
    348            
    349            return 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_EnableIrq_3: (+1)
   \   0000002E   0xBC32             POP      {R1,R4,R5}
   \   00000030   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    350          }
    351          
    352          /*
    353           * LPLD_ADC_DisableIrq
    354           * 禁用ADCx中断
    355           * 
    356           * 参数:
    357           *    adc_init_structure--PIT初始化结构体，
    358           *                        具体定义见ADC_InitTypeDef
    359           *
    360           * 输出:
    361           *    0--配置错误
    362           *    1--配置成功
    363           *
    364           */

   \                                 In section .text, align 2, keep-with-next
    365          uint8 LPLD_ADC_DisableIrq(ADC_InitTypeDef adc_init_structure)
    366          {
   \                     LPLD_ADC_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB538             PUSH     {R3-R5,LR}
    367            uint8 i;
    368            ADC_Type *adcx = adc_init_structure.ADC_Adcx;
   \   00000004   0x9D04             LDR      R5,[SP, #+16]
    369            
    370            if(adcx == ADC0)
   \   00000006   0x....             LDR.N    R0,??DataTable10_3  ;; 0x4003b000
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD102             BNE.N    ??LPLD_ADC_DisableIrq_0
    371              i=0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xE007             B.N      ??LPLD_ADC_DisableIrq_1
    372            else if(adcx == ADC1)
   \                     ??LPLD_ADC_DisableIrq_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable10_5  ;; 0x400bb000
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD102             BNE.N    ??LPLD_ADC_DisableIrq_2
    373              i=1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x0004             MOVS     R4,R0
   \   0000001C   0xE001             B.N      ??LPLD_ADC_DisableIrq_1
    374            else
    375              return 0;
   \                     ??LPLD_ADC_DisableIrq_2: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xE005             B.N      ??LPLD_ADC_DisableIrq_3
    376          
    377            disable_irq((IRQn_Type)(ADC0_IRQn + i));
   \                     ??LPLD_ADC_DisableIrq_1: (+1)
   \   00000022   0xF114 0x0039      ADDS     R0,R4,#+57
   \   00000026   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       NVIC_DisableIRQ
    378            
    379            return 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_DisableIrq_3: (+1)
   \   0000002E   0xBC32             POP      {R1,R4,R5}
   \   00000030   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    380          }
    381          
    382          /*
    383           * LPLD_ADC_Chn_Enable
    384           * 使能ADCx相应转换通道的AD采集功能
    385           * 
    386           * 参数:
    387           *    adcx--ADCx模块号
    388           *      |__ADC0          --ADC0
    389           *      |__ADC1          --ADC1
    390           *    chn--ADC采集输入通道,详见技术手册K60P144M100SF2RM第118页
    391           *      ADC0
    392           *      |__DAD0          --差分(ADC0_DP0和ADC0_DM0)/单端(ADC0_DP0)
    393           *      |__DAD1          --差分(ADC0_DP1和ADC0_DM1)/单端(ADC0_DP1)
    394           *      |__DAD2          --差分(PGA0_DP和PGA0_DM)/单端(PGA0_DP)
    395           *      |__DAD3          --差分(ADC0_DP3和ADC0_DM3)/单端(ADC0_DP3)
    396           *      |__AD4           --单端A(保留)/单端B(ADC0_SE4b--PTC2)
    397           *      |__AD5           --单端A(保留)/单端B(ADC0_SE5b--PTD1)
    398           *      |__AD6           --单端A(保留)/单端B(ADC0_SE6b--PTD5)
    399           *      |__AD7           --单端A(保留)/单端B(ADC0_SE7b--PTD6)
    400           *      |__AD8           --单端(ADC0_SE8--PTB0)
    401           *      |__AD9           --单端(ADC0_SE9--PTB1)
    402           *      |__AD10          --单端(ADC0_SE10--PTA7)
    403           *      |__AD11          --单端(ADC0_SE11--PTA8)
    404           *      |__AD12          --单端(ADC0_SE12--PTB2)
    405           *      |__AD13          --单端(ADC0_SE13--PTB3)
    406           *      |__AD14          --单端(ADC0_SE14--PTC0)
    407           *      |__AD15          --单端(ADC0_SE15--PTC1)
    408           *      |__AD16          --单端(ADC0_SE16)
    409           *      |__AD17          --单端(ADC0_SE17-PTE24)
    410           *      |__AD18          --单端(ADC0_SE18--PTE25)
    411           *      |__AD19          --单端(ADC0_DM0)
    412           *      |__AD20          --单端(ADC0_DM1)
    413           *      |__AD23          --单端(DAC0)
    414           *      |__AD26          --温度传感器
    415           *      |__AD27          --Bandgap
    416           *      |__AD29          --差分(-VREFH)/单端(VREFH)
    417           *      |__AD30          --单端(VREFL)
    418           *      ADC1
    419           *      |__DAD0          --差分(ADC1_DP0和ADC1_DM0)/单端(ADC1_DP0)
    420           *      |__DAD1          --差分(ADC1_DP1和ADC1_DM1)/单端(ADC1_DP1)
    421           *      |__DAD2          --差分(PGA1_DP和PGA1_DM)/单端(PGA1_DP)
    422           *      |__DAD3          --差分(ADC1_DP3和ADC1_DM3)/单端(ADC1_DP3)
    423           *      |__AD4           --单端A(ADC1_SE4a--PTE0)/单端B(ADC1_SE4b--PTC8)
    424           *      |__AD5           --单端A(ADC1_SE5a--PTE1)/单端B(ADC1_SE5b--PTC9)
    425           *      |__AD6           --单端A(ADC1_SE6a--PTE2)/单端B(ADC1_SE6b--PTC10)
    426           *      |__AD7           --单端A(ADC1_SE7a--PTE3)/单端B(ADC1_SE7b--PTC11)
    427           *      |__AD8           --单端(ADC1_SE8--PTB0)
    428           *      |__AD9           --单端(ADC1_SE9--PTB1)
    429           *      |__AD10          --单端(ADC1_SE10--PTB4)
    430           *      |__AD11          --单端(ADC1_SE11--PTB5)
    431           *      |__AD12          --单端(ADC1_SE12--PTB6)
    432           *      |__AD13          --单端(ADC1_SE13--PTB7)
    433           *      |__AD14          --单端(ADC1_SE14--PTB10)
    434           *      |__AD15          --单端(ADC1_SE15--PTB11)
    435           *      |__AD16          --单端(ADC1_SE16)
    436           *      |__AD17          --单端(ADC1_SE17--PTA17)
    437           *      |__AD18          --单端(VREF)
    438           *      |__AD19          --单端(ADC1_DM0)
    439           *      |__AD20          --单端(ADC1_DM1)
    440           *      |__AD23          --单端(DAC1)
    441           *      |__AD26          --温度传感器
    442           *      |__AD27          --Bandgap
    443           *      |__AD29          --差分(-VREFH)/单端(VREFH)
    444           *      |__AD30          --单端(VREFL)
    445           *
    446           * 输出:
    447           *    0--配置错误
    448           *    1--配置成功
    449           *
    450           */

   \                                 In section .text, align 2, keep-with-next
    451          uint8 LPLD_ADC_Chn_Enable(ADC_Type *adcx, AdcChnEnum_Type chn)
    452          {
   \                     LPLD_ADC_Chn_Enable: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
    453            //判断复用引脚是a或b
    454            uint8 mux = (adcx->CFG2 & ADC_CFG2_MUXSEL_MASK)>>ADC_CFG2_MUXSEL_SHIFT;
   \   00000004   0x68D0             LDR      R0,[R2, #+12]
   \   00000006   0xF3C0 0x1300      UBFX     R3,R0,#+4,#+1
    455              
    456            if(chn > AD30)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x291F             CMP      R1,#+31
   \   0000000E   0xDB01             BLT.N    ??LPLD_ADC_Chn_Enable_0
    457              return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE0E2             B.N      ??LPLD_ADC_Chn_Enable_1
    458            
    459            //不同的通道对应不同的引脚，因此需要判断并配置
    460            if(adcx == ADC0)
   \                     ??LPLD_ADC_Chn_Enable_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable10_3  ;; 0x4003b000
   \   00000016   0x4282             CMP      R2,R0
   \   00000018   0xD179             BNE.N    ??LPLD_ADC_Chn_Enable_2
    461            {
    462              switch(chn)
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x0008             MOVS     R0,R1
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xD923             BLS.N    ??LPLD_ADC_Chn_Enable_3
   \   00000024   0x1F00             SUBS     R0,R0,#+4
   \   00000026   0xD022             BEQ.N    ??LPLD_ADC_Chn_Enable_4
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0xD027             BEQ.N    ??LPLD_ADC_Chn_Enable_5
   \   0000002C   0x1E40             SUBS     R0,R0,#+1
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD92B             BLS.N    ??LPLD_ADC_Chn_Enable_6
   \   00000032   0x1E80             SUBS     R0,R0,#+2
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD935             BLS.N    ??LPLD_ADC_Chn_Enable_7
   \   00000038   0x1E80             SUBS     R0,R0,#+2
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD93C             BLS.N    ??LPLD_ADC_Chn_Enable_8
   \   0000003E   0x1E80             SUBS     R0,R0,#+2
   \   00000040   0x2801             CMP      R0,#+1
   \   00000042   0xD943             BLS.N    ??LPLD_ADC_Chn_Enable_9
   \   00000044   0x1E80             SUBS     R0,R0,#+2
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD94A             BLS.N    ??LPLD_ADC_Chn_Enable_10
   \   0000004A   0x1E80             SUBS     R0,R0,#+2
   \   0000004C   0xD052             BEQ.N    ??LPLD_ADC_Chn_Enable_11
   \   0000004E   0x1E40             SUBS     R0,R0,#+1
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD950             BLS.N    ??LPLD_ADC_Chn_Enable_12
   \   00000054   0x1E80             SUBS     R0,R0,#+2
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD956             BLS.N    ??LPLD_ADC_Chn_Enable_13
   \   0000005A   0x1F00             SUBS     R0,R0,#+4
   \   0000005C   0xD054             BEQ.N    ??LPLD_ADC_Chn_Enable_13
   \   0000005E   0x1EC0             SUBS     R0,R0,#+3
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD951             BLS.N    ??LPLD_ADC_Chn_Enable_13
   \   00000064   0x1EC0             SUBS     R0,R0,#+3
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD94E             BLS.N    ??LPLD_ADC_Chn_Enable_13
   \   0000006A   0xE04E             B.N      ??LPLD_ADC_Chn_Enable_14
    463              {
    464                case DAD0:   //ADC0_DP0 -- PGA0_DP
    465                case DAD1:   //ADC0_DP1 -- PGA2_DP
    466                case DAD2:   //PGA0_DP
    467                case DAD3:   //ADC0_DP3 -- PGA1_DP
    468                  break;
   \                     ??LPLD_ADC_Chn_Enable_3: (+1)
   \   0000006C   0xE0B4             B.N      ??LPLD_ADC_Chn_Enable_15
    469                case AD4:   //ADC0_SE4b -- PTC2     
    470                  if(mux == 1)    //b
   \                     ??LPLD_ADC_Chn_Enable_4: (+1)
   \   0000006E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000070   0x2B01             CMP      R3,#+1
   \   00000072   0xD102             BNE.N    ??LPLD_ADC_Chn_Enable_16
    471                    PORTC->PCR[2] =  PORT_PCR_MUX(0);
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R4,??DataTable10_8  ;; 0x4004b008
   \   00000078   0x6020             STR      R0,[R4, #+0]
    472                  break;
   \                     ??LPLD_ADC_Chn_Enable_16: (+1)
   \   0000007A   0xE0AD             B.N      ??LPLD_ADC_Chn_Enable_15
    473                case AD5:   //ADC0_SE5b -- PTD1     
    474                  if(mux == 1)    //b
   \                     ??LPLD_ADC_Chn_Enable_5: (+1)
   \   0000007C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000007E   0x2B01             CMP      R3,#+1
   \   00000080   0xD102             BNE.N    ??LPLD_ADC_Chn_Enable_17
    475                    PORTD->PCR[1] =  PORT_PCR_MUX(0);
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x....             LDR.N    R4,??DataTable10_9  ;; 0x4004c004
   \   00000086   0x6020             STR      R0,[R4, #+0]
    476                  break;
   \                     ??LPLD_ADC_Chn_Enable_17: (+1)
   \   00000088   0xE0A6             B.N      ??LPLD_ADC_Chn_Enable_15
    477                case AD6:   //ADC0_SE6b -- PTD5
    478                case AD7:   //ADC0_SE7b -- PTD6     
    479                  if(mux == 1)    //b
   \                     ??LPLD_ADC_Chn_Enable_6: (+1)
   \   0000008A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000008C   0x2B01             CMP      R3,#+1
   \   0000008E   0xD108             BNE.N    ??LPLD_ADC_Chn_Enable_18
    480                    PORTD->PCR[chn-1] =  PORT_PCR_MUX(0);
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000094   0x008C             LSLS     R4,R1,#+2
   \   00000096   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   0000009A   0xF514 0x2498      ADDS     R4,R4,#+311296
   \   0000009E   0xF844 0x0C04      STR      R0,[R4, #-4]
    481                  break;
   \                     ??LPLD_ADC_Chn_Enable_18: (+1)
   \   000000A2   0xE099             B.N      ??LPLD_ADC_Chn_Enable_15
    482                case AD8:  //ADC0_SE8 -- PTB0
    483                case AD9:  //ADC0_SE9 -- PTB1
    484                  PORTB->PCR[chn-8] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_7: (+1)
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A8   0x008C             LSLS     R4,R1,#+2
   \   000000AA   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000AE   0xF514 0x2494      ADDS     R4,R4,#+303104
   \   000000B2   0xF844 0x0C20      STR      R0,[R4, #-32]
    485                  break;
   \   000000B6   0xE08F             B.N      ??LPLD_ADC_Chn_Enable_15
    486                case AD10:  //ADC0_SE10 -- PTA7
    487                case AD11:  //ADC0_SE11 -- PTA8
    488                  PORTA->PCR[chn-3] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_8: (+1)
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BC   0x008C             LSLS     R4,R1,#+2
   \   000000BE   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000C2   0xF514 0x2492      ADDS     R4,R4,#+299008
   \   000000C6   0xF844 0x0C0C      STR      R0,[R4, #-12]
    489                  break;
   \   000000CA   0xE085             B.N      ??LPLD_ADC_Chn_Enable_15
    490                case AD12:  //ADC0_SE12 -- PTB2
    491                case AD13:  //ADC0_SE13 -- PTB3
    492                  PORTB->PCR[chn-10] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_9: (+1)
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D0   0x008C             LSLS     R4,R1,#+2
   \   000000D2   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000D6   0xF514 0x2494      ADDS     R4,R4,#+303104
   \   000000DA   0xF844 0x0C28      STR      R0,[R4, #-40]
    493                  break;
   \   000000DE   0xE07B             B.N      ??LPLD_ADC_Chn_Enable_15
    494                case AD14:  //ADC0_SE14 -- PTC0
    495                case AD15:  //ADC0_SE15 -- PTC1
    496                  PORTC->PCR[chn-14] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_10: (+1)
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E4   0x008C             LSLS     R4,R1,#+2
   \   000000E6   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000EA   0xF514 0x2496      ADDS     R4,R4,#+307200
   \   000000EE   0xF844 0x0C38      STR      R0,[R4, #-56]
    497                  break;
   \   000000F2   0xE071             B.N      ??LPLD_ADC_Chn_Enable_15
    498                case AD16:   //ADC0_SE16
    499                  break;
   \                     ??LPLD_ADC_Chn_Enable_11: (+1)
   \   000000F4   0xE070             B.N      ??LPLD_ADC_Chn_Enable_15
    500                case AD17:   //ADC0_SE17 -- PTE24
    501                case AD18:   //ADC0_SE18 -- PTE25
    502                  PORTE->PCR[chn+7] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_12: (+1)
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000FA   0x008C             LSLS     R4,R1,#+2
   \   000000FC   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   00000100   0xF514 0x249A      ADDS     R4,R4,#+315392
   \   00000104   0x61E0             STR      R0,[R4, #+28]
    503                  break;
   \   00000106   0xE067             B.N      ??LPLD_ADC_Chn_Enable_15
    504                case AD19:   //ADC0_DM0 -- PGA0_DM
    505                case AD20:   //ADC0_DM1 -- PGA2_DM
    506                case AD23:   //ADC0_SE23 -- DAC0_OUT
    507                case AD26:   //Temperature Sensor (S.E)
    508                case AD27:   //Bandgap (S.E)
    509                case AD29:   //VREFH (S.E)
    510                case AD30:   //VREFL
    511                  break;
   \                     ??LPLD_ADC_Chn_Enable_13: (+1)
   \   00000108   0xE066             B.N      ??LPLD_ADC_Chn_Enable_15
    512                default:
    513                  return 0;  
   \                     ??LPLD_ADC_Chn_Enable_14: (+1)
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0xE065             B.N      ??LPLD_ADC_Chn_Enable_1
    514              }
    515            }
    516            else if(adcx == ADC1)
   \                     ??LPLD_ADC_Chn_Enable_2: (+1)
   \   0000010E   0x....             LDR.N    R0,??DataTable10_5  ;; 0x400bb000
   \   00000110   0x4282             CMP      R2,R0
   \   00000112   0xD15F             BNE.N    ??LPLD_ADC_Chn_Enable_19
    517            {
    518              switch(chn)
   \   00000114   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000116   0x0008             MOVS     R0,R1
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0x2803             CMP      R0,#+3
   \   0000011C   0xD91B             BLS.N    ??LPLD_ADC_Chn_Enable_20
   \   0000011E   0x1F00             SUBS     R0,R0,#+4
   \   00000120   0x2803             CMP      R0,#+3
   \   00000122   0xD919             BLS.N    ??LPLD_ADC_Chn_Enable_21
   \   00000124   0x1F00             SUBS     R0,R0,#+4
   \   00000126   0x2801             CMP      R0,#+1
   \   00000128   0xD92C             BLS.N    ??LPLD_ADC_Chn_Enable_22
   \   0000012A   0x1E80             SUBS     R0,R0,#+2
   \   0000012C   0x2803             CMP      R0,#+3
   \   0000012E   0xD933             BLS.N    ??LPLD_ADC_Chn_Enable_23
   \   00000130   0x1F00             SUBS     R0,R0,#+4
   \   00000132   0x2801             CMP      R0,#+1
   \   00000134   0xD93A             BLS.N    ??LPLD_ADC_Chn_Enable_24
   \   00000136   0x1E80             SUBS     R0,R0,#+2
   \   00000138   0xD042             BEQ.N    ??LPLD_ADC_Chn_Enable_25
   \   0000013A   0x1E40             SUBS     R0,R0,#+1
   \   0000013C   0xD041             BEQ.N    ??LPLD_ADC_Chn_Enable_26
   \   0000013E   0x1E40             SUBS     R0,R0,#+1
   \   00000140   0x2802             CMP      R0,#+2
   \   00000142   0xD944             BLS.N    ??LPLD_ADC_Chn_Enable_27
   \   00000144   0x1F40             SUBS     R0,R0,#+5
   \   00000146   0xD042             BEQ.N    ??LPLD_ADC_Chn_Enable_27
   \   00000148   0x1EC0             SUBS     R0,R0,#+3
   \   0000014A   0x2801             CMP      R0,#+1
   \   0000014C   0xD93F             BLS.N    ??LPLD_ADC_Chn_Enable_27
   \   0000014E   0x1EC0             SUBS     R0,R0,#+3
   \   00000150   0x2801             CMP      R0,#+1
   \   00000152   0xD93C             BLS.N    ??LPLD_ADC_Chn_Enable_27
   \   00000154   0xE03C             B.N      ??LPLD_ADC_Chn_Enable_28
    519              {
    520                case DAD0:   //ADC1_DP0 -- PGA1_DP
    521                case DAD1:   //ADC1_DP1 -- PGA3_DP
    522                case DAD2:   //PGA1_DP 
    523                case DAD3:   //ADC1_DP3 -- PGA0_DP
    524                  break;
   \                     ??LPLD_ADC_Chn_Enable_20: (+1)
   \   00000156   0xE03F             B.N      ??LPLD_ADC_Chn_Enable_15
    525                case AD4:   //ADC1_SE4a -- PTE0     //ADC1_SE4b -- PTC8
    526                case AD5:   //ADC1_SE5a -- PTE1     //ADC1_SE5b -- PTC9
    527                case AD6:   //ADC1_SE6a -- PTE2     //ADC1_SE6b -- PTC10
    528                case AD7:   //ADC1_SE7a -- PTE3     //ADC1_SE7b -- PTC11
    529                  if(mux == 0)    //a
   \                     ??LPLD_ADC_Chn_Enable_21: (+1)
   \   00000158   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000015A   0x2B00             CMP      R3,#+0
   \   0000015C   0xD109             BNE.N    ??LPLD_ADC_Chn_Enable_29
    530                    PORTE->PCR[chn-4] =  PORT_PCR_MUX(0);
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000162   0x008C             LSLS     R4,R1,#+2
   \   00000164   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   00000168   0xF514 0x249A      ADDS     R4,R4,#+315392
   \   0000016C   0xF844 0x0C10      STR      R0,[R4, #-16]
   \   00000170   0xE007             B.N      ??LPLD_ADC_Chn_Enable_30
    531                  else            //b
    532                    PORTC->PCR[chn+4] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_29: (+1)
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000176   0x008C             LSLS     R4,R1,#+2
   \   00000178   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   0000017C   0xF514 0x2496      ADDS     R4,R4,#+307200
   \   00000180   0x6120             STR      R0,[R4, #+16]
    533                  break;
   \                     ??LPLD_ADC_Chn_Enable_30: (+1)
   \   00000182   0xE029             B.N      ??LPLD_ADC_Chn_Enable_15
    534                case AD8:  //ADC1_SE8 -- PTB0
    535                case AD9:  //ADC1_SE9 -- PTB1
    536                  PORTB->PCR[chn-8] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_22: (+1)
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000188   0x008C             LSLS     R4,R1,#+2
   \   0000018A   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   0000018E   0xF514 0x2494      ADDS     R4,R4,#+303104
   \   00000192   0xF844 0x0C20      STR      R0,[R4, #-32]
    537                  break;
   \   00000196   0xE01F             B.N      ??LPLD_ADC_Chn_Enable_15
    538                case AD10:  //ADC1_SE10 -- PTB4
    539                case AD11:  //ADC1_SE11 -- PTB5
    540                case AD12:  //ADC1_SE12 -- PTB6
    541                case AD13:  //ADC1_SE13 -- PTB7
    542                  PORTB->PCR[chn-6] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_23: (+1)
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000019C   0x008C             LSLS     R4,R1,#+2
   \   0000019E   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000001A2   0xF514 0x2494      ADDS     R4,R4,#+303104
   \   000001A6   0xF844 0x0C18      STR      R0,[R4, #-24]
    543                  break;
   \   000001AA   0xE015             B.N      ??LPLD_ADC_Chn_Enable_15
    544                case AD14:  //ADC1_SE14 -- PTB10
    545                case AD15:  //ADC1_SE15 -- PTB11
    546                  PORTB->PCR[chn-4] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_24: (+1)
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001B0   0x008C             LSLS     R4,R1,#+2
   \   000001B2   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000001B6   0xF514 0x2494      ADDS     R4,R4,#+303104
   \   000001BA   0xF844 0x0C10      STR      R0,[R4, #-16]
    547                  break;
   \   000001BE   0xE00B             B.N      ??LPLD_ADC_Chn_Enable_15
    548                case AD16:   //ADC1_SE16
    549                  break;
   \                     ??LPLD_ADC_Chn_Enable_25: (+1)
   \   000001C0   0xE00A             B.N      ??LPLD_ADC_Chn_Enable_15
    550                case AD17:  //ADC1_SE17 -- PTA17
    551                  PORTA->PCR[chn] =  PORT_PCR_MUX(0);
   \                     ??LPLD_ADC_Chn_Enable_26: (+1)
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0x....             LDR.N    R4,??DataTable10_10  ;; 0x40049000
   \   000001C6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001C8   0xF844 0x0021      STR      R0,[R4, R1, LSL #+2]
    552                  break;
   \   000001CC   0xE004             B.N      ??LPLD_ADC_Chn_Enable_15
    553                case AD18:   //VREF Output
    554                case AD19:   //ADC1_DM0 -- PGA1_DM
    555                case AD20:   //ADC1_DM1 -- PGA3_DM
    556                case AD23:   //DAC1_OUT 
    557                case AD26:   //Temperature Sensor (S.E)
    558                case AD27:   //Bandgap (S.E)
    559                case AD29:   //VREFH (S.E)
    560                case AD30:   //VREFL
    561                  break;
   \                     ??LPLD_ADC_Chn_Enable_27: (+1)
   \   000001CE   0xE003             B.N      ??LPLD_ADC_Chn_Enable_15
    562                default:
    563                  return 0;  
   \                     ??LPLD_ADC_Chn_Enable_28: (+1)
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0xE002             B.N      ??LPLD_ADC_Chn_Enable_1
    564              }
    565            }
    566            else
    567            {
    568              return 0;
   \                     ??LPLD_ADC_Chn_Enable_19: (+1)
   \   000001D4   0x2000             MOVS     R0,#+0
   \   000001D6   0xE000             B.N      ??LPLD_ADC_Chn_Enable_1
    569            }
    570            
    571            return 1;
   \                     ??LPLD_ADC_Chn_Enable_15: (+1)
   \   000001D8   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_Chn_Enable_1: (+1)
   \   000001DA   0xBC10             POP      {R4}
   \   000001DC   0x4770             BX       LR               ;; return
    572          }
    573          
    574          /*
    575           * ADC_Cal
    576           * ADC模块校准函数，内部调用
    577           * 
    578           * 参数:
    579           *    adcx--ADC模块号
    580           *      |__ADC0         -ADC0模块
    581           *      |__ADC1         -ADC1模块
    582           * 输出:
    583           *    0--配置错误
    584           *    1--配置成功
    585           */

   \                                 In section .text, align 2, keep-with-next
    586          static uint8 LPLD_ADC_Cal(ADC_Type *adcx)
    587          {
   \                     LPLD_ADC_Cal: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    588            uint16 cal_var;
    589              
    590            //为自动校准配置参数
    591            //为提高校准精度，需配置为：
    592            //32次硬件平均、ADCK不超过4MHz
    593            //参考高=Vdda、正常功耗模式
    594            //可忽略的配置：
    595            //输入通道、转换模式连续功能、比较功能、精度、差分单端
    596            //设置ADCCFG1寄存器
    597            adcx->CFG1  = 0 &(~ADC_CFG1_ADLPC_MASK)          // 正常功耗配置
    598                            | ADC_CFG1_ADIV(ADIV_8)          // ADC输入时钟分频为8
    599                            | ADC_CFG1_ADLSMP_MASK           // 设置长时间采样模式
    600                            | ADC_CFG1_ADICLK(ADICLK_BUS_2); // ADC输入时钟源为 BusClk/2
   \   00000002   0x2071             MOVS     R0,#+113
   \   00000004   0x6088             STR      R0,[R1, #+8]
    601          
    602            //设置ADCCFG2寄存器
    603            adcx->CFG2 = 0 & (~ADC_CFG2_ADACKEN_MASK)
    604                           | ADC_CFG2_ADHSC_MASK         // 高速转换
    605                           | ADC_CFG2_ADLSTS(LSAMTIME_20EX); // 长采样时间时钟周期选择 额外20个时钟周期，共24个ADCK周期
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x60C8             STR      R0,[R1, #+12]
    606                                                         // 总采样周期见K60技术文档 page:840
    607            //用于设定阈值
    608            adcx->CV1  = 0x1234u ; 
   \   0000000A   0xF241 0x2034      MOVW     R0,#+4660
   \   0000000E   0x6188             STR      R0,[R1, #+24]
    609            adcx->CV2  = 0x5678u ;
   \   00000010   0xF245 0x6078      MOVW     R0,#+22136
   \   00000014   0x61C8             STR      R0,[R1, #+28]
    610            
    611            adcx->SC2 = 0 & (~ADC_SC2_ADTRG_MASK)        //使能软件触发作为校准
    612                          | ADC_SC2_REFSEL(REFSEL_EXT);  //选择外部参考源VREFH和VREFL
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6208             STR      R0,[R1, #+32]
    613              
    614            adcx->SC3 &= ( ~ADC_SC3_ADCO_MASK & ~ADC_SC3_AVGS_MASK );  //设置单次转换，清除平均标志
   \   0000001A   0x6A48             LDR      R0,[R1, #+36]
   \   0000001C   0xF030 0x000B      BICS     R0,R0,#0xB
   \   00000020   0x6248             STR      R0,[R1, #+36]
    615            adcx->SC3 |= ( ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(HW_32AVG) );//打开平均标志，设置到最大采样平准
   \   00000022   0x6A48             LDR      R0,[R1, #+36]
   \   00000024   0xF050 0x0007      ORRS     R0,R0,#0x7
   \   00000028   0x6248             STR      R0,[R1, #+36]
    616            
    617            adcx->SC3 |= ADC_SC3_CAL_MASK ;                            //开始校准
   \   0000002A   0x6A48             LDR      R0,[R1, #+36]
   \   0000002C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000030   0x6248             STR      R0,[R1, #+36]
    618            
    619            while((adcx->SC1[0] & ADC_SC1_COCO_MASK)== 0x00 );         //等待校准完成
   \                     ??LPLD_ADC_Cal_0: (+1)
   \   00000032   0x6808             LDR      R0,[R1, #+0]
   \   00000034   0x0600             LSLS     R0,R0,#+24
   \   00000036   0xD5FC             BPL.N    ??LPLD_ADC_Cal_0
    620            	
    621            if ((adcx->SC3& ADC_SC3_CALF_MASK) == ADC_SC3_CALF_MASK )
   \   00000038   0x6A48             LDR      R0,[R1, #+36]
   \   0000003A   0x0640             LSLS     R0,R0,#+25
   \   0000003C   0xD501             BPL.N    ??LPLD_ADC_Cal_1
    622            {  
    623             return 0;    //检查到校准错误，返回错误
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE030             B.N      ??LPLD_ADC_Cal_2
    624            }
    625            // Calculate plus-side calibration
    626            cal_var  = 0x00;
   \                     ??LPLD_ADC_Cal_1: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x0002             MOVS     R2,R0
    627            cal_var  = adcx->CLP0;       
   \   00000046   0x6CC8             LDR      R0,[R1, #+76]
   \   00000048   0x0002             MOVS     R2,R0
    628            cal_var += adcx->CLP1;      
   \   0000004A   0x6C88             LDR      R0,[R1, #+72]
   \   0000004C   0x1882             ADDS     R2,R0,R2
    629            cal_var += adcx->CLP2;      
   \   0000004E   0x6C48             LDR      R0,[R1, #+68]
   \   00000050   0x1882             ADDS     R2,R0,R2
    630            cal_var += adcx->CLP3;      
   \   00000052   0x6C08             LDR      R0,[R1, #+64]
   \   00000054   0x1882             ADDS     R2,R0,R2
    631            cal_var += adcx->CLP4;      
   \   00000056   0x6BC8             LDR      R0,[R1, #+60]
   \   00000058   0x1882             ADDS     R2,R0,R2
    632            cal_var += adcx->CLPS;      
   \   0000005A   0x6B88             LDR      R0,[R1, #+56]
   \   0000005C   0x1882             ADDS     R2,R0,R2
    633            cal_var  = cal_var/2;
   \   0000005E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0xFB92 0xF2F0      SDIV     R2,R2,R0
    634            cal_var |= 0x8000; // Set MSB
   \   00000066   0xF452 0x4200      ORRS     R2,R2,#0x8000
    635            
    636            adcx->PG = ADC_PG_PG(cal_var);
   \   0000006A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006C   0x62CA             STR      R2,[R1, #+44]
    637          
    638            // Calculate minus-side calibration
    639            cal_var = 0x00;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x0002             MOVS     R2,R0
    640            cal_var =  adcx->CLM0; 
   \   00000072   0x6EC8             LDR      R0,[R1, #+108]
   \   00000074   0x0002             MOVS     R2,R0
    641            cal_var += adcx->CLM1;
   \   00000076   0x6E88             LDR      R0,[R1, #+104]
   \   00000078   0x1882             ADDS     R2,R0,R2
    642            cal_var += adcx->CLM2;
   \   0000007A   0x6E48             LDR      R0,[R1, #+100]
   \   0000007C   0x1882             ADDS     R2,R0,R2
    643            cal_var += adcx->CLM3;
   \   0000007E   0x6E08             LDR      R0,[R1, #+96]
   \   00000080   0x1882             ADDS     R2,R0,R2
    644            cal_var += adcx->CLM4;
   \   00000082   0x6DC8             LDR      R0,[R1, #+92]
   \   00000084   0x1882             ADDS     R2,R0,R2
    645            cal_var += adcx->CLMS;
   \   00000086   0x6D88             LDR      R0,[R1, #+88]
   \   00000088   0x1882             ADDS     R2,R0,R2
    646            cal_var = cal_var/2;
   \   0000008A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0xFB92 0xF2F0      SDIV     R2,R2,R0
    647            cal_var |= 0x8000; // Set MSB
   \   00000092   0xF452 0x4200      ORRS     R2,R2,#0x8000
    648          
    649            adcx->MG   = ADC_MG_MG(cal_var); 
   \   00000096   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000098   0x630A             STR      R2,[R1, #+48]
    650            adcx->SC3 &= ~ADC_SC3_CAL_MASK ; //清除校验标志
   \   0000009A   0x6A48             LDR      R0,[R1, #+36]
   \   0000009C   0xF030 0x0080      BICS     R0,R0,#0x80
   \   000000A0   0x6248             STR      R0,[R1, #+36]
    651            
    652            return 1;
   \   000000A2   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_Cal_2: (+1)
   \   000000A4   0x4770             BX       LR               ;; return
    653          }
    654          
    655          /*
    656           * ADC0--ADC1中断处理函数
    657           * 与启动文件startup_K60.s中的中断向量表关联
    658           * 用户无需修改，程序自动进入对应通道中断函数
    659           */
    660          

   \                                 In section .text, align 2, keep-with-next
    661          void ADC0_IRQHandler(void)
    662          {
   \                     ADC0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    663          #if (UCOS_II > 0u)
    664            OS_CPU_SR  cpu_sr = 0u;
    665            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    666            OSIntEnter();
    667            OS_EXIT_CRITICAL();
    668          #endif
    669            
    670            //调用用户自定义中断服务
    671            ADC_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable10_7
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    672            
    673          #if (UCOS_II > 0u)
    674            OSIntExit();          //告知系统此时即将离开中断服务子函数
    675          #endif
    676          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    677          void ADC1_IRQHandler(void)
    678          {
   \                     ADC1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    679          #if (UCOS_II > 0u)
    680            OS_CPU_SR  cpu_sr = 0u;
    681            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    682            OSIntEnter();
    683            OS_EXIT_CRITICAL();
    684          #endif
    685            
    686            //调用用户自定义中断服务
    687            ADC_ISR[1]();  
   \   00000002   0x....             LDR.N    R0,??DataTable10_7
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
    688            
    689          #if (UCOS_II > 0u)
    690            OSIntExit();          //告知系统此时即将离开中断服务子函数
    691          #endif
    692          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x400BB000         DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     ADC_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x4004C004         DC32     0x4004c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 0B0H, 0D9H, 0B6H, 0C8H, 0D4H
   \              0x5C 0xB0    
   \              0xD9 0xB6    
   \              0xC8 0xD4    
   \   00000008   0xC6 0xCD          DC8 0C6H, 0CDH, 0ACH, 0B2H, 0BDH, 0C5H, 0CCH, 5CH
   \              0xAC 0xB2    
   \              0xBD 0xC5    
   \              0xCC 0x5C    
   \   00000010   0xB1 0xC8          DC8 0B1H, 0C8H, 0C8H, 0FCH, 0B4H, 0FAH, 0C2H, 0EBH
   \              0xC8 0xFC    
   \              0xB4 0xFA    
   \              0xC2 0xEB    
   \   00000018   0x5C 0x4C          DC8 5CH, 4CH, 50H, 4CH, 44H, 5FH, 4FH, 53H
   \              0x50 0x4C    
   \              0x44 0x5F    
   \              0x4F 0x53    
   \   00000020   0x4B 0x69          DC8 4BH, 69H, 6EH, 65H, 74H, 69H, 73H, 5FH
   \              0x6E 0x65    
   \              0x74 0x69    
   \              0x73 0x5F    
   \   00000028   0x56 0x33          DC8 56H, 33H, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \   00000030   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 48H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x48    
   \   00000038   0x57 0x5F          DC8 57H, 5FH, 41H, 44H, 43H, 2EH, 63H, 0
   \              0x41 0x44    
   \              0x43 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC0_IRQHandler
         8   -- Indirect call
       8   ADC1_IRQHandler
         8   -- Indirect call
       0   LPLD_ADC_Cal
       4   LPLD_ADC_Chn_Enable
      16   LPLD_ADC_Deinit
      32   LPLD_ADC_DisableIrq
        32   -> NVIC_DisableIRQ
      24   LPLD_ADC_EnableConversion
        24   -> assert_failed
      32   LPLD_ADC_EnableIrq
        32   -> NVIC_EnableIRQ
       0   LPLD_ADC_Get
      16   LPLD_ADC_GetResult
        16   -> assert_failed
       0   LPLD_ADC_GetSC1nCOCO
      56   LPLD_ADC_Init
        56   -> LPLD_ADC_Cal
        56   -> assert_failed
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      64  ?_0
      10  ADC0_IRQHandler
      10  ADC1_IRQHandler
       8  ADC_ISR
     166  LPLD_ADC_Cal
     478  LPLD_ADC_Chn_Enable
      82  LPLD_ADC_Deinit
      52  LPLD_ADC_DisableIrq
     106  LPLD_ADC_EnableConversion
      52  LPLD_ADC_EnableIrq
      40  LPLD_ADC_Get
      34  LPLD_ADC_GetResult
      26  LPLD_ADC_GetSC1nCOCO
     426  LPLD_ADC_Init
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ

 
     8 bytes in section .bss
    64 bytes in section .rodata
 1 570 bytes in section .text
 
 1 570 bytes of CODE  memory
    64 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: none
