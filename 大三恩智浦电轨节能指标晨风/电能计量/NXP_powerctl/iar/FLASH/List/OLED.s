///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       14/Aug/2016  11:03:51
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\app\ITAC\OLED.c
//    Command line =  
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\app\ITAC\OLED.c
//        -D LPLD_K60 -lCN
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\
//        -lB
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\
//        -o
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\Obj\
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
//        (x86)\IAR Systems\Embedded Workbench
//        7.0\arm\INC\c\DLib_Config_Normal.h" -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\BSP\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\ITAC\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\app\CTL\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\CPU\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\common\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\HW\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\LPLD\DEV\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\uCOS-II\Ports\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\uCOS-II\Source\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\FatFs\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\FatFs\option\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\common\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\driver\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\descriptor\
//        -I
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\..\..\..\lib\USB\class\
//        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
//    List file    =  
//        C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\iar\FLASH\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN LPLD_GPIO_Output_b
        EXTERN __aeabi_cdcmple
        EXTERN __aeabi_cdrcmple
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_i2d
        EXTERN __aeabi_memcpy4

        PUBLIC Dly_ms
        PUBLIC Draw_BMP
        PUBLIC Draw_Landzo
        PUBLIC Draw_LibLogo
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LANDZO_LOGO
        PUBLIC LIBLOGO60x58
        PUBLIC OLEDIO_init
        PUBLIC OLED_CLS
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Fill
        PUBLIC OLED_Init
        PUBLIC OLED_P14x16Str
        PUBLIC OLED_P6x8Char
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P8x16Char
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print
        PUBLIC OLED_PrintFloat
        PUBLIC OLED_PrintInt16
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Rectangle
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC lanzhou96x64
        PUBLIC mushroom
        PUBLIC sky1
        PUBLIC sky2
        PUBLIC sky3

// C:\百度云同步盘\比赛代码\LPLD_OSKinetis_V3\project\NXP_powerctl\app\ITAC\OLED.c
//    1 #include "common.h"
//    2 #include "include.h"
//    3 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//    4 void OLEDIO_init()
//    5 {
OLEDIO_init:
        PUSH     {LR}
        SUB      SP,SP,#+28
//    6   GPIO_InitTypeDef OLEDIO_inittype;
//    7   
//    8   OLEDIO_inittype.GPIO_PTx = PTE;
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        STR      R0,[SP, #+4]
//    9   OLEDIO_inittype.GPIO_Pins = GPIO_Pin24 | GPIO_Pin25 | GPIO_Pin26| GPIO_Pin27 | GPIO_Pin28;
        MOVS     R0,#+520093696
        STR      R0,[SP, #+8]
//   10   OLEDIO_inittype.GPIO_PinControl = INPUT_PULL_DIS;
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
//   11   OLEDIO_inittype.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        STRB     R0,[SP, #+16]
//   12   OLEDIO_inittype.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        STRB     R0,[SP, #+17]
//   13   OLEDIO_inittype.GPIO_Isr = NULL;
        MOVS     R0,#+0
        STR      R0,[SP, #+20]
//   14   
//   15   LPLD_GPIO_Init(OLEDIO_inittype);
        ADD      R1,SP,#+4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   16  
//   17 }
        ADD      SP,SP,#+28
        POP      {PC}             ;; return
//   18 
//   19 
//   20 /*4线SPI使用说明：
//   21 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   22 VCC 供内部逻辑电压 1.8~6V
//   23 GND 地
//   24 
//   25 BS0 低电平
//   26 BS1 低电平
//   27 BS2 低电平
//   28 
//   29 CS  片选管脚
//   30 DC  命令数据选择管脚
//   31 RES 模块复位管脚
//   32 D0（SCLK） ，时钟脚，由MCU控制
//   33 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   34 
//   35 D2 悬空
//   36 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   37 RD  低电平 ，也可悬空，但最好设为低电平
//   38 RW  低电平 ，也可悬空，但最好设为低电平
//   39 RD  低电平 ，也可悬空，但最好设为低电平
//   40 */
//   41 
//   42 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   43 uint8 mushroom[] = 
mushroom:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 96, 112
        DC8 48, 56, 56, 24, 28, 12, 12, 12, 12, 4, 4, 4, 4, 12, 12, 12, 8, 24
        DC8 56, 48, 112, 96, 192, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 112
        DC8 28, 6, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 7, 15, 14, 24, 48, 112, 224, 192
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224
        DC8 48, 24, 14, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 1, 1, 3, 3, 3, 2, 6, 4, 12, 24, 240, 192, 240, 252, 254, 15
        DC8 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 128, 192, 192, 224, 224, 224, 224, 240, 240, 112
        DC8 112, 120, 60, 60, 60, 28, 30, 14, 30, 56, 248, 248, 248, 126, 126
        DC8 158, 22, 38, 238, 254, 254, 254, 255, 127, 255, 29, 113, 192, 128
        DC8 0, 0, 0, 0, 0, 224, 248, 252, 14, 15, 14, 14, 14, 12, 12, 12, 12
        DC8 14, 14, 14, 6, 6, 118, 255, 255, 255, 115, 3, 3, 3, 1, 1, 1, 64
        DC8 192, 128, 128, 128, 192, 128, 96, 0, 0, 30, 31, 31, 31, 14, 3, 7
        DC8 14, 30, 62, 127, 207, 143, 7, 7, 3, 1, 0, 63, 0, 0, 0, 1, 1, 3, 3
        DC8 2, 6, 255, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 3, 254, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 7, 31, 120, 224, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 128, 192, 96, 56, 31, 7, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 12, 24, 24, 48, 32, 96, 96
        DC8 64, 192, 192, 192, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
        DC8 128, 128, 192, 192, 192, 64, 64, 96, 96, 32, 32, 48, 16, 24, 8, 12
        DC8 4, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   44 {
//   45   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
//   46   0xC0,0xE0,0x60,0x70,0x30,0x38,0x38,0x18,0x1C,0x0C,0x0C,0x0C,0x0C,0x04,0x04,0x04,
//   47   0x04,0x0C,0x0C,0x0C,0x08,0x18,0x38,0x30,0x70,0x60,0xC0,0xC0,0x80,0x00,0x00,0x00,
//   48   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   49   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x70,0x1C,0x06,
//   50   0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   51   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,
//   52   0x0F,0x0E,0x18,0x30,0x70,0xE0,0xC0,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//   53   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0x30,0x18,0x0E,0x03,0x01,0x00,
//   54   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   55   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   56   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x03,0x03,0x02,0x06,
//   57   0x04,0x0C,0x18,0xF0,0xC0,0xF0,0xFC,0xFE,0x0F,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
//   58   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   59   0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xE0,0xE0,0xE0,0xE0,0xF0,0xF0,0x70,0x70,
//   60   0x78,0x3C,0x3C,0x3C,0x1C,0x1E,0x0E,0x1E,0x38,0xF8,0xF8,0xF8,0x7E,0x7E,0x9E,0x16,
//   61   0x26,0xEE,0xFE,0xFE,0xFE,0xFF,0x7F,0xFF,0x1D,0x71,0xC0,0x80,0x00,0x00,0x00,0x00,
//   62   0x00,0xE0,0xF8,0xFC,0x0E,0x0F,0x0E,0x0E,0x0E,0x0C,0x0C,0x0C,0x0C,0x0E,0x0E,0x0E,
//   63   0x06,0x06,0x76,0xFF,0xFF,0xFF,0x73,0x03,0x03,0x03,0x01,0x01,0x01,0x40,0xC0,0x80,
//   64   0x80,0x80,0xC0,0x80,0x60,0x00,0x00,0x1E,0x1F,0x1F,0x1F,0x0E,0x03,0x07,0x0E,0x1E,
//   65   0x3E,0x7F,0xCF,0x8F,0x07,0x07,0x03,0x01,0x00,0x3F,0x00,0x00,0x00,0x01,0x01,0x03,
//   66   0x03,0x02,0x06,0xFF,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   67   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   68   0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   69   0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   70   0x00,0x00,0x00,0x00,0x00,0x07,0x1F,0x78,0xE0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//   71   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   72   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   73   0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x38,0x1F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
//   74   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x18,
//   75   0x18,0x30,0x20,0x60,0x60,0x40,0xC0,0xC0,0xC0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//   76   0x80,0x80,0x80,0x80,0x80,0xC0,0xC0,0xC0,0x40,0x40,0x60,0x60,0x20,0x20,0x30,0x10,
//   77   0x18,0x08,0x0C,0x04,0x06,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//   78 };
//   79 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   80 uint8 sky1[] =
sky1:
        DATA
        DC8 64, 64, 66, 66, 66, 66, 66, 254, 66, 66, 66, 66, 66, 64, 64, 0, 128
        DC8 128, 64, 32, 16, 12, 3, 0, 3, 12, 16, 32, 64, 128, 128, 0
//   81 {
//   82   0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x40,0x40,0x00,
//   83   0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00/*"?",0*/
//   84 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   85 uint8 sky2[] =
sky2:
        DATA
        DC8 0, 254, 34, 90, 134, 0, 32, 34, 34, 34, 226, 34, 34, 34, 32, 0, 0
        DC8 255, 4, 8, 7, 16, 12, 3, 64, 128, 127, 0, 1, 6, 24, 0
//   86 {
//   87   0x00,0xFE,0x22,0x5A,0x86,0x00,0x20,0x22,0x22,0x22,0xE2,0x22,0x22,0x22,0x20,0x00,
//   88   0x00,0xFF,0x04,0x08,0x07,0x10,0x0C,0x03,0x40,0x80,0x7F,0x00,0x01,0x06,0x18,0x00/*"?",1*/
//   89 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   90 uint8 sky3[] =
sky3:
        DATA
        DC8 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 " "

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_1:
        DATA
        DC8 "Error!"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "-"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "+"
//   91 {
//   92   0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   93   0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00/*"!",2*/
//   94 };
//   95 
//   96 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   97 const uint8 F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   98 {
//   99   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//  100   { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//  101   { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//  102   { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//  103   { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//  104   { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//  105   { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//  106   { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//  107   { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//  108   { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//  109   { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//  110   { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//  111   { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//  112   { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//  113   { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//  114   { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//  115   { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//  116   { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//  117   { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//  118   { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//  119   { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//  120   { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//  121   { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//  122   { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  123   { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  124   { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  125   { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  126   { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  127   { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  128   { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  129   { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  130   { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  131   { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  132   { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  133   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  134   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  135   { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  136   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  137   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  138   { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  139   { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  140   { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  141   { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  142   { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  143   { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  144   { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  145   { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  146   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  147   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  148   { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  149   { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  150   { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  151   { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  152   { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  153   { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  154   { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  155   { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  156   { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  157   { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  158   { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  159   { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  160   { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  161   { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  162   { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  163   { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  164   { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  165   { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  166   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  167   { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  168   { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  169   { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  170   { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  171   { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  172   { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  173   { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  174   { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  175   { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  176   { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  177   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  178   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  179   { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  180   { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  181   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  182   { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  183   { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  184   { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  185   { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  186   { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  187   { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  188   { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  189   { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  190   { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  191 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  192 const uint8 F14x16_Idx[] =
F14x16_Idx:
        DATA
        DC8 "\260\262\273\325\316\337\272\376\300\266\326\346\265\347\327\323\316\252\304\372\267\376\316\361"
        DC8 0, 0, 0
//  193 {
//  194   "安徽芜湖蓝宙电子为您服务"
//  195 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  196 const uint8 F14x16[] = {
F14x16:
        DATA
        DC8 92, 68, 68, 68, 196, 117, 70, 68, 68, 196, 68, 68, 92, 0, 32, 32
        DC8 34, 19, 18, 10, 4, 4, 10, 9, 16, 32, 0, 0, 136, 196, 51, 150, 212
        DC8 183, 148, 86, 16, 239, 8, 248, 8, 0, 0, 63, 32, 20, 38, 61, 22, 36
        DC8 32, 25, 6, 25, 32, 0, 4, 36, 36, 36, 47, 36, 228, 36, 47, 36, 36
        DC8 36, 4, 0, 33, 33, 17, 17, 9, 7, 1, 31, 33, 33, 33, 33, 49, 0, 18
        DC8 36, 128, 8, 200, 127, 200, 8, 254, 34, 34, 254, 0, 0, 24, 6, 1, 0
        DC8 15, 4, 39, 24, 7, 33, 33, 63, 0, 0, 2, 226, 2, 7, 242, 130, 66, 50
        DC8 34, 103, 162, 34, 2, 0, 32, 32, 62, 34, 35, 62, 34, 62, 34, 34, 62
        DC8 33, 32, 0, 28, 196, 68, 68, 68, 69, 246, 68, 68, 68, 68, 196, 28, 0
        DC8 0, 63, 18, 18, 18, 18, 31, 18, 18, 18, 18, 63, 0, 0, 0, 248, 72, 72
        DC8 72, 72, 255, 72, 72, 72, 72, 248, 0, 0, 0, 7, 2, 2, 2, 2, 31, 34
        DC8 34, 34, 34, 35, 56, 0, 64, 65, 65, 65, 65, 65, 225, 81, 73, 69, 67
        DC8 65, 64, 0, 0, 0, 0, 0, 32, 32, 63, 0, 0, 0, 0, 0, 0, 0, 16, 16, 18
        DC8 20, 208, 63, 16, 144, 16, 16, 16, 240, 0, 0, 32, 16, 8, 6, 1, 0, 0
        DC8 0, 35, 32, 16, 15, 0, 0, 16, 8, 252, 3, 136, 100, 7, 4, 244, 4, 36
        DC8 204, 0, 0, 32, 24, 1, 28, 32, 32, 35, 45, 33, 48, 0, 4, 24, 0, 0
        DC8 254, 34, 34, 254, 0, 254, 66, 194, 82, 82, 222, 0, 0, 32, 31, 1, 33
        DC8 63, 0, 63, 16, 11, 4, 10, 17, 32, 0, 64, 72, 68, 38, 43, 146, 18
        DC8 18, 42, 38, 66, 64, 64, 0, 0, 33, 17, 9, 5, 3, 1, 1, 33, 33, 31, 0
        DC8 0, 0
//  197   /*
//  198   0x0C,0xCC,0xCC,0xDE,0xDE,0xCC,0xCC,0xCC,0xDE,0xDE,0xCC,0xCC,0x0C,0x00,
//  199   0xC6,0xC6,0x66,0x36,0x1E,0x0F,0x07,0x7E,0xFE,0xC6,0xC6,0xC6,0xE6,0xE0,
//  200   */
//  201   0x5C,0x44,0x44,0x44,0xC4,0x75,0x46,0x44,0x44,0xC4,0x44,0x44,0x5C,0x00,0x20,0x20,
//  202   0x22,0x13,0x12,0x0A,0x04,0x04,0x0A,0x09,0x10,0x20,0x00,0x00,/*安*/
//  203   
//  204   
//  205   0x88,0xC4,0x33,0x96,0xD4,0xB7,0x94,0x56,0x10,0xEF,0x08,0xF8,0x08,0x00,0x00,0x3F,
//  206   0x20,0x14,0x26,0x3D,0x16,0x24,0x20,0x19,0x06,0x19,0x20,0x00,/*徽*/
//  207   
//  208   0x04,0x24,0x24,0x24,0x2F,0x24,0xE4,0x24,0x2F,0x24,0x24,0x24,0x04,0x00,0x21,0x21,
//  209   0x11,0x11,0x09,0x07,0x01,0x1F,0x21,0x21,0x21,0x21,0x31,0x00,/*"芜",0*/
//  210   
//  211   0x12,0x24,0x80,0x08,0xC8,0x7F,0xC8,0x08,0xFE,0x22,0x22,0xFE,0x00,0x00,0x18,0x06,
//  212   0x01,0x00,0x0F,0x04,0x27,0x18,0x07,0x21,0x21,0x3F,0x00,0x00,/*"湖",0*/
//  213   
//  214   
//  215   0x02,0xE2,0x02,0x07,0xF2,0x82,0x42,0x32,0x22,0x67,0xA2,0x22,0x02,0x00,0x20,0x20,
//  216   0x3E,0x22,0x23,0x3E,0x22,0x3E,0x22,0x22,0x3E,0x21,0x20,0x00,/*"蓝",0*/
//  217   
//  218   
//  219   0x1C,0xC4,0x44,0x44,0x44,0x45,0xF6,0x44,0x44,0x44,0x44,0xC4,0x1C,0x00,0x00,0x3F,
//  220   0x12,0x12,0x12,0x12,0x1F,0x12,0x12,0x12,0x12,0x3F,0x00,0x00,/*"宙",0*/
//  221   
//  222   
//  223   0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,0x48,0x48,0x48,0xF8,0x00,0x00,0x00,0x07,
//  224   0x02,0x02,0x02,0x02,0x1F,0x22,0x22,0x22,0x22,0x23,0x38,0x00,/*"电",0*/
//  225   
//  226   0x40,0x41,0x41,0x41,0x41,0x41,0xE1,0x51,0x49,0x45,0x43,0x41,0x40,0x00,0x00,0x00,
//  227   0x00,0x00,0x20,0x20,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"子",0*/
//  228   
//  229   
//  230   0x10,0x10,0x12,0x14,0xD0,0x3F,0x10,0x90,0x10,0x10,0x10,0xF0,0x00,0x00,0x20,0x10,
//  231   0x08,0x06,0x01,0x00,0x00,0x00,0x23,0x20,0x10,0x0F,0x00,0x00,/*"为",0*/
//  232   
//  233   0x10,0x08,0xFC,0x03,0x88,0x64,0x07,0x04,0xF4,0x04,0x24,0xCC,0x00,0x00,0x20,0x18,
//  234   0x01,0x1C,0x20,0x20,0x23,0x2D,0x21,0x30,0x00,0x04,0x18,0x00,/*"您",0*/
//  235   
//  236   
//  237   
//  238   0x00,0xFE,0x22,0x22,0xFE,0x00,0xFE,0x42,0xC2,0x52,0x52,0xDE,0x00,0x00,0x20,0x1F,
//  239   0x01,0x21,0x3F,0x00,0x3F,0x10,0x0B,0x04,0x0A,0x11,0x20,0x00,/*"服",0*/
//  240   
//  241   0x40,0x48,0x44,0x26,0x2B,0x92,0x12,0x12,0x2A,0x26,0x42,0x40,0x40,0x00,0x00,0x21,
//  242   0x11,0x09,0x05,0x03,0x01,0x01,0x21,0x21,0x1F,0x00,0x00,0x00,/*"务",0*/
//  243   
//  244 };
//  245 
//  246 //======================================================
//  247 // 128X64I液晶底层驱动[8X16]字体库
//  248 // 设计者: powerint
//  249 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  250 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  251 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  252 const uint8 F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  253 {
//  254   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  255   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  256   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  257   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  258   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  259   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  260   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  261   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  262   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  263   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  264   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  265   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  266   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  267   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  268   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  269   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  270   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  271   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  272   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  273   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  274   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  275   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  276   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  277   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  278   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  279   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  280   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  281   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  282   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  283   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  284   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  285   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  286   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  287   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  288   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  289   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  290   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  291   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  292   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  293   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  294   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  295   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  296   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  297   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  298   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  299   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  300   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  301   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  302   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  303   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  304   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  305   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  306   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  307   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  308   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  309   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  310   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  311   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  312   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  313   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  314   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  315   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  316   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  317   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  318   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  319   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  320   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  321   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  322   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  323   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  324   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  325   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  326   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  327   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  328   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  329   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  330   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  331   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  332   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  333   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  334   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  335   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  336   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  337   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  338   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  339   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//uint85
//  340   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  341   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  342   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  343   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  344   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  345   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  346   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  347   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  348   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  349   
//  350 };
//  351 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  352 uint8 lanzhou96x64[768] = {
lanzhou96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 96, 32, 32, 32
        DC8 160, 160, 160, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 96, 96, 96, 96, 224, 112, 112, 96, 96, 240, 112, 96, 96, 96
        DC8 96, 96, 96, 0, 224, 224, 96, 96, 96, 96, 96, 112, 112, 112, 96, 96
        DC8 96, 96, 96, 96, 224, 224, 224, 128, 128, 128, 128, 240, 240, 128
        DC8 128, 128, 128, 128, 128, 128, 0, 0, 48, 48, 48, 48, 48, 48, 176
        DC8 240, 112, 48, 224, 248, 124, 30, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 1, 3, 135, 143, 207, 255, 254, 254, 252, 252, 240, 224, 128, 0, 0
        DC8 0, 0, 0, 0, 0, 63, 0, 255, 0, 0, 8, 14, 31, 58, 98, 194, 2, 2, 2, 0
        DC8 0, 3, 3, 248, 248, 248, 24, 24, 24, 252, 252, 24, 24, 24, 248, 248
        DC8 248, 3, 3, 255, 255, 49, 49, 49, 255, 255, 49, 49, 49, 49, 49, 255
        DC8 255, 0, 24, 24, 24, 24, 24, 30, 63, 255, 248, 24, 24, 255, 255, 0
        DC8 192, 128, 128, 128, 128, 224, 224, 224, 240, 248, 248, 252, 126
        DC8 127, 63, 63, 31, 15, 7, 7, 7, 15, 15, 15, 31, 31, 0, 0, 128, 176
        DC8 176, 191, 183, 179, 179, 179, 191, 191, 179, 179, 191, 191, 179
        DC8 179, 179, 183, 191, 176, 176, 128, 128, 191, 191, 191, 177, 177
        DC8 177, 191, 191, 177, 177, 177, 191, 191, 191, 128, 128, 135, 135
        DC8 134, 134, 134, 191, 191, 182, 182, 182, 182, 182, 183, 183, 176
        DC8 176, 184, 184, 128, 136, 152, 184, 191, 191, 128, 128, 31, 63, 112
        DC8 239, 223, 159, 127, 255, 255, 255, 255, 255, 239, 227, 192, 128, 0
        DC8 128, 0, 128, 192, 192, 64, 0, 224, 248, 30, 0, 0, 0, 0, 241, 241, 1
        DC8 1, 1, 1, 1, 1, 1, 1, 129, 65, 33, 17, 17, 17, 33, 65, 129, 1, 1
        DC8 241, 241, 97, 225, 129, 1, 1, 1, 1, 1, 241, 241, 1, 241, 241, 49
        DC8 49, 49, 97, 193, 129, 1, 1, 49, 49, 49, 49, 49, 49, 49, 49, 241
        DC8 241, 113, 1, 241, 241, 49, 49, 49, 49, 241, 241, 241, 0, 0, 0, 0, 3
        DC8 3, 7, 14, 28, 28, 25, 27, 27, 27, 27, 27, 27, 27, 9, 13, 4, 6, 3, 3
        DC8 1, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 255, 8, 8
        DC8 8, 8, 8, 8, 8, 255, 255, 0, 255, 255, 0, 1, 7, 30, 120, 224, 128, 0
        DC8 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 129, 255, 126, 0, 128, 192
        DC8 224, 240, 56, 30, 7, 3, 1, 0, 0, 255, 255, 0, 0, 0, 0, 255, 255
        DC8 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 12, 12, 12, 12, 12, 12, 0, 15
        DC8 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 15, 15, 0, 0, 0, 0, 0, 1, 7, 6
        DC8 15, 15, 0, 15, 15, 12, 12, 12, 6, 3, 1, 0, 0, 14, 15, 15, 13, 12
        DC8 12, 12, 12, 12, 12, 12, 0, 15, 15, 12, 12, 12, 12, 15, 15, 15, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0
//  353   /*
//  354   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  355   0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  356   0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  357   0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  358   0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  359   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  360   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  361   0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  362   0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  363   0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  364   0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  365   0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  366   0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  367   0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  368   0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  369   0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  370   0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  371   0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  372   0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  373   0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  374   0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  375   0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  376   0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  377   0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  378   0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  379   0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  380   0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  381   0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  382   0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  383   0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  384   0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  385   0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  386   0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  387   0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  388   0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  389   0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  390   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  391   0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  392   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  393   0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  394   0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  395   0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  396   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  397   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  398   0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  399   0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  400   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  401   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, */
//  402   
//  403   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  404   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  405   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  406   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  407   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  408   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  409   0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x60,0x20,0x20,0x20,0xA0,0xA0,
//  410   0xA0,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  411   0x00,0x00,0x60,0x60,0x60,0x60,0xE0,0x70,0x70,0x60,0x60,0xF0,0x70,0x60,0x60,0x60,
//  412   0x60,0x60,0x60,0x00,0xE0,0xE0,0x60,0x60,0x60,0x60,0x60,0x70,0x70,0x70,0x60,0x60,
//  413   0x60,0x60,0x60,0x60,0xE0,0xE0,0xE0,0x80,0x80,0x80,0x80,0xF0,0xF0,0x80,0x80,0x80,
//  414   0x80,0x80,0x80,0x80,0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0xB0,0xF0,0x70,0x30,
//  415   0xE0,0xF8,0x7C,0x1E,0x07,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
//  416   0x01,0x03,0x87,0x8F,0xCF,0xFF,0xFE,0xFE,0xFC,0xFC,0xF0,0xE0,0x80,0x00,0x00,0x00,
//  417   0x00,0x00,0x00,0x00,0x3F,0x00,0xFF,0x00,0x00,0x08,0x0E,0x1F,0x3A,0x62,0xC2,0x02,
//  418   0x02,0x02,0x00,0x00,0x03,0x03,0xF8,0xF8,0xF8,0x18,0x18,0x18,0xFC,0xFC,0x18,0x18,
//  419   0x18,0xF8,0xF8,0xF8,0x03,0x03,0xFF,0xFF,0x31,0x31,0x31,0xFF,0xFF,0x31,0x31,0x31,
//  420   0x31,0x31,0xFF,0xFF,0x00,0x18,0x18,0x18,0x18,0x18,0x1E,0x3F,0xFF,0xF8,0x18,0x18,
//  421   0xFF,0xFF,0x00,0xC0,0x80,0x80,0x80,0x80,0xE0,0xE0,0xE0,0xF0,0xF8,0xF8,0xFC,0x7E,
//  422   0x7F,0x3F,0x3F,0x1F,0x0F,0x07,0x07,0x07,0x0F,0x0F,0x0F,0x1F,0x1F,0x00,0x00,0x80,
//  423   0xB0,0xB0,0xBF,0xB7,0xB3,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xB3,
//  424   0xB7,0xBF,0xB0,0xB0,0x80,0x80,0xBF,0xBF,0xBF,0xB1,0xB1,0xB1,0xBF,0xBF,0xB1,0xB1,
//  425   0xB1,0xBF,0xBF,0xBF,0x80,0x80,0x87,0x87,0x86,0x86,0x86,0xBF,0xBF,0xB6,0xB6,0xB6,
//  426   0xB6,0xB6,0xB7,0xB7,0xB0,0xB0,0xB8,0xB8,0x80,0x88,0x98,0xB8,0xBF,0xBF,0x80,0x80,
//  427   0x1F,0x3F,0x70,0xEF,0xDF,0x9F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xE3,0xC0,0x80,
//  428   0x00,0x80,0x00,0x80,0xC0,0xC0,0x40,0x00,0xE0,0xF8,0x1E,0x00,0x00,0x00,0x00,0xF1,
//  429   0xF1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0x41,0x21,0x11,0x11,0x11,0x21,
//  430   0x41,0x81,0x01,0x01,0xF1,0xF1,0x61,0xE1,0x81,0x01,0x01,0x01,0x01,0x01,0xF1,0xF1,
//  431   0x01,0xF1,0xF1,0x31,0x31,0x31,0x61,0xC1,0x81,0x01,0x01,0x31,0x31,0x31,0x31,0x31,
//  432   0x31,0x31,0x31,0xF1,0xF1,0x71,0x01,0xF1,0xF1,0x31,0x31,0x31,0x31,0xF1,0xF1,0xF1,
//  433   0x00,0x00,0x00,0x00,0x03,0x03,0x07,0x0E,0x1C,0x1C,0x19,0x1B,0x1B,0x1B,0x1B,0x1B,
//  434   0x1B,0x1B,0x09,0x0D,0x04,0x06,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  435   0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x08,0x08,0x08,0x08,0x08,0x08,
//  436   0x08,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x01,0x07,0x1E,0x78,0xE0,0x80,0x00,0xFF,0xFF,
//  437   0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x81,0xFF,0x7E,0x00,0x80,0xC0,0xE0,0xF0,
//  438   0x38,0x1E,0x07,0x03,0x01,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
//  439   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  440   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
//  441   0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//  442   0x00,0x0F,0x0F,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x06,0x0F,0x0F,
//  443   0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x06,0x03,0x01,0x00,0x00,0x0E,0x0F,0x0F,0x0D,0x0C,
//  444   0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x0C,0x0F,0x0F,0x0F,
//  445   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  446   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  447   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  448   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  449   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  450   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  451   
//  452 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  453 const uint8 LIBLOGO60x58[480] = {
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  454   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  455   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  456   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  457   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  458   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  459   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  460   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  461   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  462   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  463   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  464   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  465   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  466   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  467   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  468   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  469   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  470   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  471   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  472   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  473   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  474   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  475   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  476   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  477   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  478   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  479   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  480   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  481   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  482   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  483   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  484 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  485 uint8 LANDZO_LOGO[300] ={
LANDZO_LOGO:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 48, 16, 24, 8, 4, 20, 16
        DC8 26, 24, 24, 28, 28, 28, 28, 60, 60, 60, 60, 124, 124, 252, 252, 248
        DC8 248, 240, 240, 224, 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 192, 240, 248, 126, 31, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 143, 255, 255, 255, 255, 255
        DC8 255, 254, 252, 248, 224, 128, 0, 0, 0, 240, 255, 255, 255, 7, 0
        DC8 248, 248, 240, 240, 224, 224, 224, 192, 192, 192, 192, 192, 192
        DC8 192, 192, 192, 192, 192, 192, 192, 224, 224, 224, 240, 240, 248
        DC8 248, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 0, 0, 15, 255, 255, 255, 248, 192, 15, 127, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 63, 31, 15, 7, 3, 3, 1, 1
        DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 7, 3, 0
        DC8 0, 0, 0, 3, 15, 31, 127, 254, 252, 241, 231, 207, 159, 63, 127, 255
        DC8 255, 255, 255, 252, 240, 224, 224, 192, 128, 128, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 1, 3, 3, 7, 15, 15, 30, 30, 28, 57, 57, 59, 115, 115
        DC8 119, 103, 103, 103, 103, 103, 103, 39, 39, 54, 54, 22, 18, 10, 10
        DC8 4, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  486   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x30,0x10,0x18,0x08,
//  487   0x04,0x14,0x10,0x1A,0x18,0x18,0x1C,0x1C,0x1C,0x1C,0x3C,0x3C,0x3C,0x3C,0x7C,0x7C,
//  488   0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xE0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//  489   0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xF8,0x7E,0x1F,0x07,0x03,0x00,0x00,0x00,0x00,
//  490   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  491   0x00,0x00,0x00,0x01,0x01,0x03,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,
//  492   0xE0,0x80,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0x07,0x00,0xF8,0xF8,0xF0,0xF0,0xE0,
//  493   0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xE0,
//  494   0xE0,0xE0,0xF0,0xF0,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  495   0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xF8,0xC0,0x0F,0x7F,0xFF,
//  496   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x03,0x01,
//  497   0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  498   0x01,0x01,0x01,0x03,0x03,0x07,0x03,0x00,0x00,0x00,0x00,0x03,0x0F,0x1F,0x7F,0xFE,
//  499   0xFC,0xF1,0xE7,0xCF,0x9F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0xF0,0xE0,0xE0,0xC0,
//  500   0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  501   0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  502   0x00,0x00,0x01,0x03,0x03,0x07,0x0F,0x0F,0x1E,0x1E,0x1C,0x39,0x39,0x3B,0x73,0x73,
//  503   0x77,0x67,0x67,0x67,0x67,0x67,0x67,0x27,0x27,0x36,0x36,0x16,0x12,0x0A,0x0A,0x04,
//  504   0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//  505 };
//  506 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  507 void Dly_ms(uint16 ms)
//  508 {
//  509   uint16 ii,jj;
//  510   if (ms<1) ms=1;
Dly_ms:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??Dly_ms_0
        MOVS     R3,#+1
        MOVS     R0,R3
//  511   ms = ms*12 ;
??Dly_ms_0:
        MOVS     R3,#+12
        SMULBB   R0,R0,R3
//  512   for(ii=0;ii<ms;ii++)
        MOVS     R3,#+0
        MOVS     R1,R3
??Dly_ms_1:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R1,R0
        BCS.N    ??Dly_ms_2
//  513     for(jj=0;jj<1335;jj++);  //16MHz--1ms
        MOVS     R3,#+0
        MOVS     R2,R3
??Dly_ms_3:
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVW     R3,#+1335
        CMP      R2,R3
        BGE.N    ??Dly_ms_4
        ADDS     R2,R2,#+1
        B.N      ??Dly_ms_3
??Dly_ms_4:
        ADDS     R1,R1,#+1
        B.N      ??Dly_ms_1
//  514   //   for(jj=0;jj<4006;jj++);  //48MHz--1ms
//  515   //for(jj=0;jj<5341;jj++);    //64MHz--1ms
//  516 }
??Dly_ms_2:
        BX       LR               ;; return
//  517 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  518 void OLED_WrDat(uint8 data)
//  519 {
OLED_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  520   uint8 i=8;
        MOVS     R5,#+8
//  521   //LCD_CS=0;;
//  522   OLED_DC_SET;
        MOVS     R2,#+1
        MOVS     R1,#+27
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  523   OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  524   //asm("nop");
//  525   while(i--)
??OLED_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrDat_1
//  526   {
//  527     if(data&0x80)
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrDat_2
//  528     {
//  529       OLED_DI_SET;
        MOVS     R2,#+1
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrDat_3
//  530     }
//  531     else
//  532     {
//  533       OLED_DI_RESET;
??OLED_WrDat_2:
        MOVS     R2,#+0
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  534     }
//  535     OLED_DO_SET;
??OLED_WrDat_3:
        MOVS     R2,#+1
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  536     asm("nop");;
        nop
//  537     //asm("nop");
//  538     OLED_DO_RESET;;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  539     data<<=1;
        LSLS     R4,R4,#+1
        B.N      ??OLED_WrDat_0
//  540   }
//  541   //LCD_CS=1;
//  542 }
??OLED_WrDat_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  543 void OLED_WrCmd(uint8 cmd)
//  544 {
OLED_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  545   uint8 i=8;
        MOVS     R5,#+8
//  546   
//  547   //LCD_CS=0;;
//  548  OLED_DC_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+27
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  549   OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  550   //asm("nop");
//  551   while(i--)
??OLED_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrCmd_1
//  552   {
//  553     if(cmd&0x80)
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrCmd_2
//  554     {
//  555       OLED_DI_SET;
        MOVS     R2,#+1
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrCmd_3
//  556     }
//  557     else
//  558     {
//  559       OLED_DI_RESET;
??OLED_WrCmd_2:
        MOVS     R2,#+0
        MOVS     R1,#+25
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  560     }
//  561     OLED_DO_SET;
??OLED_WrCmd_3:
        MOVS     R2,#+1
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  562     asm("nop");
        nop
//  563     //asm("nop");
//  564     OLED_DO_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  565     cmd<<=1;
        LSLS     R4,R4,#+1
        B.N      ??OLED_WrCmd_0
//  566   }
//  567   
//  568 }
??OLED_WrCmd_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  569 void OLED_Set_Pos(uint8 x, uint8 y)
//  570 {
OLED_Set_Pos:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  571   OLED_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  572   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  573   OLED_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  574 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  575 void OLED_Fill(uint8 bmp_data)
//  576 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  577   uint8 y,x;
//  578   
//  579   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R5,R0
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_1
//  580   {
//  581     OLED_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  582     OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  583     OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  584     for(x=0;x<X_WIDTH;x++)
        MOVS     R0,#+0
        MOVS     R6,R0
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BGE.N    ??OLED_Fill_3
//  585       OLED_WrDat(bmp_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
        B.N      ??OLED_Fill_2
//  586   }
??OLED_Fill_3:
        ADDS     R5,R5,#+1
        B.N      ??OLED_Fill_0
//  587 }
??OLED_Fill_1:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  588 void OLED_CLS(void)
//  589 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  590   uint8 y,x;
//  591   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R4,R0
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_1
//  592   {
//  593     OLED_WrCmd(0xb0+y);
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  594     OLED_WrCmd(0x01);
        MOVS     R0,#+1
        BL       OLED_WrCmd
//  595     OLED_WrCmd(0x10);
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  596     for(x=0;x<X_WIDTH;x++)
        MOVS     R0,#+0
        MOVS     R5,R0
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BGE.N    ??OLED_CLS_3
//  597       OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
        B.N      ??OLED_CLS_2
//  598   }
??OLED_CLS_3:
        ADDS     R4,R4,#+1
        B.N      ??OLED_CLS_0
//  599 }
??OLED_CLS_1:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  600 void OLED_DLY_ms(uint16 ms)
//  601 {
//  602   uint16 a;
//  603   while(ms)
OLED_DLY_ms:
??OLED_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BEQ.N    ??OLED_DLY_ms_1
//  604   {
//  605     a=16000;
        MOV      R2,#+16000
        MOVS     R1,R2
//  606     while(a--);
??OLED_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??OLED_DLY_ms_2
//  607     ms--;
        SUBS     R0,R0,#+1
        B.N      ??OLED_DLY_ms_0
//  608   }
//  609   return;
??OLED_DLY_ms_1:
        BX       LR               ;; return
//  610 }
//  611 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  612 void OLED_Init(void)
//  613 {
OLED_Init:
        PUSH     {R7,LR}
//  614   OLEDIO_init();
        BL       OLEDIO_init
//  615   
//  616   OLED_DO_SET;
        MOVS     R2,#+1
        MOVS     R1,#+24
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  617   //LCD_CS=1;	//预制SLK和SS为高电平
//  618   OLED_CS_RESET; ///使能信号端，拉低时正常使用
        MOVS     R2,#+0
        MOVS     R1,#+28
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  619   OLED_RST_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+26
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  620   OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  621   OLED_RST_SET;
        MOVS     R2,#+1
        MOVS     R1,#+26
        LDR.W    R0,??DataTable12_1  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  622   
//  623   OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  624   OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  625   OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  626   OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  627   OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  628   OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  629   OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  630   OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  631   OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  632   OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  633   OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  634   OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  635   OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  636   OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  637   OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  638   OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  639   OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  640   OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  641   OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  642   OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  643   OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  644   OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  645   OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  646   OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  647   OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  648   OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  649   OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  650   OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  651   OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  652   OLED_Set_Pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  653   
//  654 }
        POP      {R0,PC}          ;; return
//  655 //==============================================================
//  656 //函数名： void LCD_PutPixel(uint8 x,uint8 y)
//  657 //功能描述：绘制一个点（x,y）
//  658 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  659 //返回：无
//  660 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  661 void OLED_PutPixel(uint8 x,uint8 y)
//  662 {
OLED_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  663   uint8 data1;  //data1当前点的数据
//  664   
//  665   OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  666   data1 = 0x01<<(y%8);
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R0,R0,R2
        MOVS     R6,R0
//  667   OLED_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  668   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  669   OLED_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       OLED_WrCmd
//  670   OLED_WrDat(data1);
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  671 }
        POP      {R4-R6,PC}       ;; return
//  672 //==============================================================
//  673 //函数名： void LCD_Rectangle(uint8 x1,uint8 y1,
//  674 //                   uint8 x2,uint8 y2,uint8 color,uint8 gif)
//  675 //功能描述：绘制一个实心矩形
//  676 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  677 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  678 //返回：无
//  679 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  680 void OLED_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif)
//  681 {
OLED_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+32]
//  682   uint8 n;
//  683   
//  684   OLED_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  685   for(n=x1;n<=x2;n++)
        MOV      R9,R5
??OLED_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCC.N    ??OLED_Rectangle_1
//  686   {
//  687     OLED_WrDat(0x01<<(y1%8));
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  688     if(gif == 1) 	OLED_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_2
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  689   }
??OLED_Rectangle_2:
        ADDS     R9,R9,#+1
        B.N      ??OLED_Rectangle_0
//  690   OLED_Set_Pos(x1,y2>>3);
??OLED_Rectangle_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  691   for(n=x1;n<=x2;n++)
        MOV      R9,R5
??OLED_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCC.N    ??OLED_Rectangle_4
//  692   {
//  693     OLED_WrDat(0x01<<(y2%8));
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  694     if(gif == 1) 	OLED_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_5
        MOVS     R0,#+5
        BL       OLED_DLY_ms
//  695   }
??OLED_Rectangle_5:
        ADDS     R9,R9,#+1
        B.N      ??OLED_Rectangle_3
//  696   
//  697 }
??OLED_Rectangle_4:
        POP      {R0,R4-R9,PC}    ;; return
//  698 /**==============================================================
//  699 函 数 名: LED_P6x8Char
//  700 功能描述: 显示一个6x8标志ASCII字符串
//  701 输入数据:  uint8 ucIdxX       显示横坐标0~122
//  702 uint8 ucIdxY       页范围0~7
//  703 uint8 ucData       显示的字符串
//  704 输出数据: NONE
//  705 返 回 值: NONE
//  706 ==============================================================**/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  707 void OLED_P6x8Char(uint8 ucIdxX, uint8 ucIdxY, uint8 ucData)
//  708 {
OLED_P6x8Char:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOV      R8,R1
        MOVS     R5,R2
//  709   uint8 i, ucDataTmp;
//  710   
//  711   ucDataTmp = ucData-32;
        SUBS     R0,R5,#+32
        MOVS     R7,R0
//  712   if(ucIdxX > 122)
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+123
        BLT.N    ??OLED_P6x8Char_0
//  713   {
//  714     ucIdxX = 0;
        MOVS     R0,#+0
        MOVS     R4,R0
//  715     ucIdxY++;
        ADDS     R8,R8,#+1
//  716   }
//  717   
//  718   OLED_Set_Pos(ucIdxX, ucIdxY);
??OLED_P6x8Char_0:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  719   
//  720   for(i = 0; i < 6; i++)
        MOVS     R0,#+0
        MOVS     R6,R0
??OLED_P6x8Char_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+6
        BGE.N    ??OLED_P6x8Char_2
//  721   {
//  722     OLED_WrDat(F6x8[ucDataTmp][i]);
        LDR.W    R0,??DataTable12_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R6, R0]
        BL       OLED_WrDat
//  723   }
        ADDS     R6,R6,#+1
        B.N      ??OLED_P6x8Char_1
//  724 }
??OLED_P6x8Char_2:
        POP      {R4-R8,PC}       ;; return
//  725 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  726 void OLED_P8x16Char(uint8 x,uint8 y,uint8 ch)
//  727 {
OLED_P8x16Char:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOV      R9,R1
        MOVS     R5,R2
//  728   uint8 c=0,i=0,j=0;
        MOVS     R6,#+0
        MOVS     R7,#+0
        MOVS     R8,#+0
//  729   
//  730   
//  731   c =ch-32;
        SUBS     R0,R5,#+32
        MOVS     R6,R0
//  732   if(x>120){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Char_0
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R9,R9,#+1
//  733   OLED_Set_Pos(x,y);
??OLED_P8x16Char_0:
        MOV      R1,R9
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  734   for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P8x16Char_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??OLED_P8x16Char_2
//  735     OLED_WrDat(F8X16[c*16+i]);
        LDR.W    R0,??DataTable12_5
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R1,R6,#+4
        UXTAB    R1,R1,R7
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
        B.N      ??OLED_P8x16Char_1
//  736   OLED_Set_Pos(x,y+1);
??OLED_P8x16Char_2:
        ADDS     R1,R9,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  737   for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P8x16Char_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??OLED_P8x16Char_4
//  738     OLED_WrDat(F8X16[c*16+i+8]);
        LDR.W    R0,??DataTable12_5
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R1,R6,#+4
        UXTAB    R1,R1,R7
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
        B.N      ??OLED_P8x16Char_3
//  739   x+=8;
??OLED_P8x16Char_4:
        ADDS     R4,R4,#+8
//  740   j++;
        ADDS     R8,R8,#+1
//  741   
//  742 }
        POP      {R0,R4-R9,PC}    ;; return
//  743 
//  744 //==============================================================
//  745 //函数名：LCD_P6x8Str(uint8 x,uint8 y,uint8 *p)
//  746 //功能描述：写入一组标准ASCII字符串
//  747 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  748 //返回：无
//  749 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  750 void OLED_P6x8Str(uint8 x,uint8 y,uint8 ch[])
//  751 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  752   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
//  753   while (ch[j]!='\0')
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_1
//  754   {
//  755     c =ch[j]-32;
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  756     if(x>126){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_2
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  757     OLED_Set_Pos(x,y);
??OLED_P6x8Str_2:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  758     for(i=0;i<6;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P6x8Str_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BGE.N    ??OLED_P6x8Str_4
//  759       OLED_WrDat(F6x8[c][i]);
        LDR.W    R0,??DataTable12_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P6x8Str_3
//  760     x+=6;
??OLED_P6x8Str_4:
        ADDS     R4,R4,#+6
//  761     j++;
        ADDS     R9,R9,#+1
        B.N      ??OLED_P6x8Str_0
//  762   }
//  763 }
??OLED_P6x8Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  764 //==============================================================
//  765 //函数名：LCD_P8x16Str(uint8 x,uint8 y,uint8 *p)
//  766 //功能描述：写入一组标准ASCII字符串
//  767 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  768 //返回：无
//  769 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  770 void OLED_P8x16Str(uint8 x,uint8 y,uint8 ch[])
//  771 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  772   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
//  773   
//  774   while (ch[j]!='\0')
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_1
//  775   {
//  776     c =ch[j]-32;
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  777     if(x>120){x=0;y++;}
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_2
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  778     OLED_Set_Pos(x,y);
??OLED_P8x16Str_2:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  779     for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P8x16Str_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??OLED_P8x16Str_4
//  780       OLED_WrDat(F8X16[c*16+i]);
        LDR.W    R0,??DataTable12_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P8x16Str_3
//  781     OLED_Set_Pos(x,y+1);
??OLED_P8x16Str_4:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  782     for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??OLED_P8x16Str_6
//  783       OLED_WrDat(F8X16[c*16+i+8]);
        LDR.W    R0,??DataTable12_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        B.N      ??OLED_P8x16Str_5
//  784     x+=8;
??OLED_P8x16Str_6:
        ADDS     R4,R4,#+8
//  785     j++;
        ADDS     R9,R9,#+1
        B.N      ??OLED_P8x16Str_0
//  786   }
//  787 }
??OLED_P8x16Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  788 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  789 void OLED_P14x16Str(uint8 x,uint8 y,uint8 ch[])
//  790 {
OLED_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  791   uint8 wm=0,ii = 0;
        MOVS     R7,#+0
        MOVS     R8,#+0
//  792   uint16 adder=1;
        MOVS     R9,#+1
//  793   
//  794   while(ch[ii] != '\0')
??OLED_P14x16Str_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R6]
        CMP      R0,#+0
        BEQ.W    ??OLED_P14x16Str_1
//  795   {
//  796     wm = 0;
        MOVS     R0,#+0
        MOVS     R7,R0
//  797     adder = 1;
        MOVS     R0,#+1
        MOV      R9,R0
//  798     while(F14x16_Idx[wm] > 127)
??OLED_P14x16Str_2:
        LDR.W    R0,??DataTable12_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R0]
        CMP      R0,#+128
        BLT.N    ??OLED_P14x16Str_3
//  799     {
//  800       if(F14x16_Idx[wm] == ch[ii])
        LDR.W    R0,??DataTable12_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R0]
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R1,[R8, R6]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_4
//  801       {
//  802         if(F14x16_Idx[wm + 1] == ch[ii + 1])
        LDR.W    R0,??DataTable12_6
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R0
        LDRB     R0,[R0, #+1]
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        ADDS     R1,R8,R6
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_4
//  803         {
//  804           adder = wm * 14;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+14
        SMULBB   R0,R7,R0
        MOV      R9,R0
//  805           break;
        B.N      ??OLED_P14x16Str_3
//  806         }
//  807       }
//  808       wm += 2;
??OLED_P14x16Str_4:
        ADDS     R7,R7,#+2
        B.N      ??OLED_P14x16Str_2
//  809     }
//  810     if(x>118){x=0;y++;}
??OLED_P14x16Str_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+119
        BLT.N    ??OLED_P14x16Str_5
        MOVS     R0,#+0
        MOVS     R4,R0
        ADDS     R5,R5,#+1
//  811     OLED_Set_Pos(x , y);
??OLED_P14x16Str_5:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  812     if(adder != 1)// 显示汉字
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R9,#+1
        BEQ.N    ??OLED_P14x16Str_6
//  813     {
//  814       OLED_Set_Pos(x , y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  815       for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_7:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+14
        BGE.N    ??OLED_P14x16Str_8
//  816       {
//  817         OLED_WrDat(F14x16[adder]);
        LDR.W    R0,??DataTable12_7
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R0]
        BL       OLED_WrDat
//  818         adder += 1;
        ADDS     R9,R9,#+1
//  819       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_7
//  820       OLED_Set_Pos(x,y + 1);
??OLED_P14x16Str_8:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  821       for(wm = 0;wm < 14;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_9:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+14
        BGE.N    ??OLED_P14x16Str_10
//  822       {
//  823         OLED_WrDat(F14x16[adder]);
        LDR.W    R0,??DataTable12_7
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R0]
        BL       OLED_WrDat
//  824         adder += 1;
        ADDS     R9,R9,#+1
//  825       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_9
//  826     }
//  827     else			  //显示空白字符
//  828     {
//  829       ii += 1;
??OLED_P14x16Str_6:
        ADDS     R8,R8,#+1
//  830       OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  831       for(wm = 0;wm < 16;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_11:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+16
        BGE.N    ??OLED_P14x16Str_12
//  832       {
//  833         OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
//  834       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_11
//  835       OLED_Set_Pos(x,y + 1);
??OLED_P14x16Str_12:
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  836       for(wm = 0;wm < 16;wm++)
        MOVS     R0,#+0
        MOVS     R7,R0
??OLED_P14x16Str_13:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+16
        BGE.N    ??OLED_P14x16Str_10
//  837       {
//  838         OLED_WrDat(0);
        MOVS     R0,#+0
        BL       OLED_WrDat
//  839       }
        ADDS     R7,R7,#+1
        B.N      ??OLED_P14x16Str_13
//  840     }
//  841     x += 14;
??OLED_P14x16Str_10:
        ADDS     R4,R4,#+14
//  842     ii += 2;
        ADDS     R8,R8,#+2
        B.N      ??OLED_P14x16Str_0
//  843   }
//  844 }
??OLED_P14x16Str_1:
        POP      {R0,R4-R9,PC}    ;; return
//  845 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  846 void OLED_Print(uint8 x, uint8 y, uint8 ch[])
//  847 {
OLED_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  848   uint8 ch2[3];
//  849   uint8 ii=0;
        MOVS     R7,#+0
//  850   while(ch[ii] != '\0')
??OLED_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_1
//  851   {
//  852     if(ch[ii] > 127)
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BLT.N    ??OLED_Print_2
//  853     {
//  854       ch2[0] = ch[ii];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  855       ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  856       ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  857       OLED_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P14x16Str
//  858       x += 14;
        ADDS     R4,R4,#+14
//  859       ii += 2;
        ADDS     R7,R7,#+2
        B.N      ??OLED_Print_0
//  860     }
//  861     else
//  862     {
//  863       ch2[0] = ch[ii];
??OLED_Print_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  864       ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  865       OLED_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  866       x += 8;
        ADDS     R4,R4,#+8
//  867       ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_0
//  868     }
//  869   }
//  870 }
??OLED_Print_1:
        POP      {R0,R4-R7,PC}    ;; return
//  871 /*****************************************************************************
//  872 函 数 名: LED_PrintFloat
//  873 功能描述: 将一个Short型数转换为5位数字显示
//  874 输入参数: UCHAR8 ucIdxX ucIdxX的范围为0~120
//  875 UCHAR8 ucIdxY ucIdxY为页的范围0~7
//  876 SHORT16 sData  sData为需要转换的数
//  877 输出参数: none
//  878 返 回 值: none
//  879 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  880 void OLED_PrintFloat(uint8 ucIdxX, uint8 ucIdxY, float64 sData)
//  881 {
OLED_PrintFloat:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+36
        MOVS     R6,R0
        MOVS     R7,R1
        MOVS     R4,R2
        MOVS     R5,R3
//  882   float64  j, k,usData;
//  883   float64 f1,f2,f3;
//  884 //  if(sData < 0)
//  885 //  {
//  886 //    OLED_P8x16Str(ucIdxX,ucIdxY,"-");
//  887 //    usData = (float64)(-sData);
//  888 //  }
//  889 //  else
//  890 //  {
//  891 //    OLED_P8x16Str(ucIdxX,ucIdxY,"+");
//  892     usData = (float64)sData;
        MOV      R8,R4
        MOV      R9,R5
//  893 //  }
//  894   if(usData < 100000.0 && usData > -100000.0)
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_8  ;; 0x40f86a00
        BL       __aeabi_cdcmple
        BCS.W    ??OLED_PrintFloat_0
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#-1
        LDR.W    R3,??DataTable12_9  ;; 0xc0f869ff
        BL       __aeabi_cdrcmple
        BHI.W    ??OLED_PrintFloat_0
//  895   {
//  896 //    l  = (uint16)(usData / 10000) % 10;
//  897 //    m  = (uint16)(usData / 1000) % 10;
//  898 //    i  = (uint16)(usData / 100) % 10;
//  899     j  = (uint16)(usData / 10) % 10;
        MOV      R0,R8
        MOV      R1,R9
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_10  ;; 0x40240000
        BL       __aeabi_ddiv
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+16]
//  900     k  = (uint16) usData % 10;
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+24]
//  901     f1 = (uint16)(usData * 10) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_10  ;; 0x40240000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+8]
//  902     f2 = (uint16)(usData * 100) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_11  ;; 0x40590000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        STRD     R0,R1,[SP, #+0]
//  903     f3 = (uint16)(usData * 1000) % 10;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_12  ;; 0x408f4000
        MOV      R0,R8
        MOV      R1,R9
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        BL       __aeabi_i2d
        MOV      R10,R0
        MOV      R11,R1
//  904 //    f4 = (uint32)(usData * 10000) % 10;
//  905 //    f5 = (uint32)(usData * 100000) % 10;
//  906     //    f6 = (uint32)(usData * 1000000) % 10;
//  907     
//  908     //万位
//  909 //    if ((uint8)l != 0)
//  910 //    {
//  911 //      OLED_P8x16Char(ucIdxX+8,  ucIdxY, (uint8)l+48);
//  912 //    }
//  913 //    else
//  914 //    {
//  915 //      OLED_P8x16Str(ucIdxX+8,  ucIdxY, " ");
//  916 //    }
//  917 //    
//  918 //    //千位
//  919 //    if ( (uint8)m != 0 || (uint8)l != 0)
//  920 //    {
//  921 //      OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8)m+48);
//  922 //    }
//  923 //    else
//  924 //    {
//  925 //      OLED_P6x8Str(ucIdxX+16,  ucIdxY, " ");
//  926 //    }
//  927 //    
//  928 //    
//  929 //    //百位
//  930 //    if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0)
//  931 //    {
//  932 //      OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)i+48);
//  933 //    }
//  934 //    else
//  935 //    {
//  936 //      OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
//  937 //    }
//  938     
//  939     //十位
//  940     if (/* (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0 || */(uint8)j != 0)
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_1
//  941     {
//  942       OLED_P8x16Char(ucIdxX+0, ucIdxY, (uint8)j+48);
        LDRD     R0,R1,[SP, #+16]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_2
//  943     }
//  944     else
//  945     {
//  946       OLED_P8x16Str(ucIdxX +0,  ucIdxY, " ");
??OLED_PrintFloat_1:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  947     }
//  948     
//  949     //个位
//  950     OLED_P8x16Char(ucIdxX+8, ucIdxY, (uint8)k+48);
??OLED_PrintFloat_2:
        LDRD     R0,R1,[SP, #+24]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
//  951     
//  952     //小数点
//  953     OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8) '.' );
        MOVS     R2,#+46
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
//  954     
//  955     
//  956     if ( /*(uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || */(uint8)f3 != 0 || (uint8)f2 != 0 || (uint8)f1 != 0 )
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_3
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_3
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_4
//  957     {
//  958       OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)f1+48);
??OLED_PrintFloat_3:
        LDRD     R0,R1,[SP, #+8]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_5
//  959     }
//  960     else
//  961     {
//  962       OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
??OLED_PrintFloat_4:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  963     }
//  964     if (/* (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || */(uint8)f3 != 0 || (uint8)f2 != 0)
??OLED_PrintFloat_5:
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BNE.N    ??OLED_PrintFloat_6
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_7
//  965     {
//  966       OLED_P8x16Char(ucIdxX+32, ucIdxY, (uint8)f2+48);
??OLED_PrintFloat_6:
        LDRD     R0,R1,[SP, #+0]
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_8
//  967     }
//  968     else
//  969     {
//  970       OLED_P8x16Str(ucIdxX+32,  ucIdxY, " ");
??OLED_PrintFloat_7:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  971     }
//  972     
//  973     if (/* (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0 || */(uint8)f3 != 0)
??OLED_PrintFloat_8:
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_PrintFloat_9
//  974     {
//  975       OLED_P8x16Char(ucIdxX+40, ucIdxY, (uint8)f3+48);
        MOV      R0,R10
        MOV      R1,R11
        BL       __aeabi_d2iz
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintFloat_10
//  976     }
//  977     else
//  978     {
//  979       OLED_P8x16Str(ucIdxX+40,  ucIdxY, " ");
??OLED_PrintFloat_9:
        ADR.N    R2,??DataTable11  ;; " "
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R6,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
        B.N      ??OLED_PrintFloat_10
//  980     }
//  981     
//  982     
//  983 //    
//  984 //    if ( (uint8)f6 != 0 || (uint8)f5 != 0 || (uint8)f4 != 0)
//  985 //    {
//  986 //      OLED_P8x16Char(ucIdxX+80, ucIdxY, (uint8)f4+48);
//  987 //    }
//  988 //    else
//  989 //    {
//  990 //      OLED_P8x16Str(ucIdxX+80,  ucIdxY, " ");
//  991 //    }
//  992 //    if ( (uint8)f6 != 0 || (uint8)f5 != 0 )
//  993 //    {
//  994 //      OLED_P8x16Char(ucIdxX+88, ucIdxY, (uint8)f5+48);
//  995 //    }
//  996 //    else
//  997 //    {
//  998 //      OLED_P8x16Str(ucIdxX+88,  ucIdxY, " ");
//  999 //    }
// 1000     //    if ( (uint8)f6 != 0 )
// 1001     //    {
// 1002     //      OLED_P8x16Char(ucIdxX+56, ucIdxY + 2, (uint8)f6+48);
// 1003     //    }
// 1004     //    else
// 1005     //    {
// 1006     //      OLED_P8x16Str(ucIdxX+56,  ucIdxY + 2, " ");
// 1007     //    }
// 1008   }
// 1009   else
// 1010   {
// 1011     OLED_P8x16Str( ucIdxX, ucIdxY,"Error!");
??OLED_PrintFloat_0:
        LDR.N    R2,??DataTable12_13
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1012   }
// 1013   return;
??OLED_PrintFloat_10:
        ADD      SP,SP,#+36
        POP      {R4-R11,PC}      ;; return
// 1014 }
// 1015 //==============================================================
// 1016 //函数名： void Draw_BMP(uint8 x,uint8 y)
// 1017 //功能描述：显示BMP图片128×64
// 1018 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1019 //返回：无
// 1020 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1021 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[])
// 1022 {
Draw_BMP:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+40]
// 1023   uint16 ii=0;
        MOVS     R9,#+0
// 1024   uint8 x,y;
// 1025   
// 1026   if(y1%8==0) y=y1/8;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R1,R7,R0
        MLS      R1,R1,R0,R7
        CMP      R1,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R7,R0
        MOV      R11,R0
        B.N      ??Draw_BMP_1
// 1027   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R7,R0
        ADDS     R0,R0,#+1
        MOV      R11,R0
// 1028   for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R11,R5
??Draw_BMP_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        CMP      R7,R11
        BCC.N    ??Draw_BMP_3
// 1029   {
// 1030     OLED_Set_Pos(x0,y);
        MOV      R1,R11
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
// 1031     for(x=x0;x<x1;x++)
        MOV      R10,R4
??Draw_BMP_4:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R10,R6
        BCS.N    ??Draw_BMP_5
// 1032     {
// 1033       OLED_WrDat(bmp[ii++]);
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LDRB     R0,[R9, R8]
        BL       OLED_WrDat
        ADDS     R9,R9,#+1
// 1034     }
        ADDS     R10,R10,#+1
        B.N      ??Draw_BMP_4
// 1035   }
??Draw_BMP_5:
        ADDS     R11,R11,#+1
        B.N      ??Draw_BMP_2
// 1036 }
??Draw_BMP_3:
        POP      {R0,R4-R11,PC}   ;; return
// 1037 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1038 void Draw_LibLogo(void)
// 1039 {
Draw_LibLogo:
        PUSH     {R4-R6,LR}
// 1040   uint16 ii=0;
        MOVS     R4,#+0
// 1041   uint8 x,y;
// 1042   
// 1043   for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOVS     R6,R0
??Draw_LibLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LibLogo_1
// 1044   {
// 1045     OLED_Set_Pos(34,y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+34
        BL       OLED_Set_Pos
// 1046     for(x=34;x<94;x++)
        MOVS     R0,#+34
        MOVS     R5,R0
??Draw_LibLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+94
        BGE.N    ??Draw_LibLogo_3
// 1047     {
// 1048       OLED_WrDat(LIBLOGO60x58[ii++]);
        LDR.N    R0,??DataTable12_14
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1049     }
        ADDS     R5,R5,#+1
        B.N      ??Draw_LibLogo_2
// 1050   }
??Draw_LibLogo_3:
        ADDS     R6,R6,#+1
        B.N      ??Draw_LibLogo_0
// 1051 }
??Draw_LibLogo_1:
        POP      {R4-R6,PC}       ;; return
// 1052 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1053 void Draw_Landzo(void)
// 1054 {
Draw_Landzo:
        PUSH     {R4-R6,LR}
// 1055   uint16 ii=0;
        MOVS     R4,#+0
// 1056   uint8 x,y;
// 1057   
// 1058   for(y=2;y<8;y++)
        MOVS     R0,#+2
        MOVS     R6,R0
??Draw_Landzo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_Landzo_1
// 1059   {
// 1060     OLED_Set_Pos(40,y);
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+40
        BL       OLED_Set_Pos
// 1061     for(x=40;x<90;x++)
        MOVS     R0,#+40
        MOVS     R5,R0
??Draw_Landzo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+90
        BGE.N    ??Draw_Landzo_3
// 1062     {
// 1063       OLED_WrDat(LANDZO_LOGO[ii++]);
        LDR.N    R0,??DataTable12_15
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1064     }
        ADDS     R5,R5,#+1
        B.N      ??Draw_Landzo_2
// 1065   }
??Draw_Landzo_3:
        ADDS     R6,R6,#+1
        B.N      ??Draw_Landzo_0
// 1066 }
??Draw_Landzo_1:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC8      " ",0x0,0x0
// 1067 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1068 void OLED_PrintInt16(uint8 ucIdxX, uint8 ucIdxY, int16 sData)
// 1069 {
OLED_PrintInt16:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1070   uint8 i, j, k, l, m;
// 1071   uint16 usData;
// 1072 
// 1073   if(sData < 0)
        SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
        CMP      R6,#+0
        BPL.N    ??OLED_PrintInt16_0
// 1074   {
// 1075     OLED_P8x16Str(ucIdxX,ucIdxY,"-");
        ADR.N    R2,??DataTable12  ;; "-"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1076     usData = (int16)(-sData);
        SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
        RSBS     R0,R6,#+0
        MOV      R11,R0
        B.N      ??OLED_PrintInt16_1
// 1077   }
// 1078   else
// 1079   {
// 1080     OLED_P8x16Str(ucIdxX,ucIdxY,"+");
??OLED_PrintInt16_0:
        ADR.N    R2,??DataTable12_2  ;; "+"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1081     usData = (int16)sData;
        MOV      R11,R6
// 1082   }
// 1083 
// 1084     l  = (uint16)(usData / 10000) % 10;
??OLED_PrintInt16_1:
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R9,R0
// 1085     m  = (uint16)(usData / 1000) % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOV      R0,#+1000
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R10,R0
// 1086     i  = (uint16)(usData / 100) % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+100
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOVS     R7,R0
// 1087     j  = (uint16)(usData / 10) % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+10
        SDIV     R0,R11,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R8,R0
// 1088     k  = (uint16) usData % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        STRB     R0,[SP, #+0]
// 1089 
// 1090     
// 1091     //万位
// 1092     if ((uint8)l != 0)
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BEQ.N    ??OLED_PrintInt16_2
// 1093     {
// 1094       OLED_P8x16Char(ucIdxX+8,  ucIdxY, (uint8)l+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_3
// 1095     }
// 1096     else
// 1097     {
// 1098       OLED_P8x16Str(ucIdxX+8,  ucIdxY, " ");
??OLED_PrintInt16_2:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1099     }
// 1100     
// 1101     //千位
// 1102     if ( (uint8)m != 0 || (uint8)l != 0)
??OLED_PrintInt16_3:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??OLED_PrintInt16_4
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BEQ.N    ??OLED_PrintInt16_5
// 1103     {
// 1104       OLED_P8x16Char(ucIdxX+16, ucIdxY, (uint8)m+48);
??OLED_PrintInt16_4:
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_6
// 1105     }
// 1106     else
// 1107     {
// 1108       OLED_P6x8Str(ucIdxX+16,  ucIdxY, " ");
??OLED_PrintInt16_5:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
// 1109     }
// 1110     
// 1111     
// 1112     //百位
// 1113     if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0)
??OLED_PrintInt16_6:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??OLED_PrintInt16_7
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BNE.N    ??OLED_PrintInt16_7
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??OLED_PrintInt16_8
// 1114     {
// 1115       OLED_P8x16Char(ucIdxX+24, ucIdxY, (uint8)i+48);
??OLED_PrintInt16_7:
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_9
// 1116     }
// 1117     else
// 1118     {
// 1119       OLED_P8x16Str(ucIdxX+24,  ucIdxY, " ");
??OLED_PrintInt16_8:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1120     }
// 1121     
// 1122     //十位
// 1123     if ( (uint8)m != 0 || (uint8)l != 0 || (uint8)i != 0 || (uint8)j != 0)
??OLED_PrintInt16_9:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??OLED_PrintInt16_10
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BNE.N    ??OLED_PrintInt16_10
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BNE.N    ??OLED_PrintInt16_10
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+0
        BEQ.N    ??OLED_PrintInt16_11
// 1124     {
// 1125       OLED_P8x16Char(ucIdxX+32, ucIdxY, (uint8)j+48);
??OLED_PrintInt16_10:
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
        B.N      ??OLED_PrintInt16_12
// 1126     }
// 1127     else
// 1128     {
// 1129       OLED_P8x16Str(ucIdxX +32,  ucIdxY, " ");
??OLED_PrintInt16_11:
        ADR.N    R2,??DataTable12_3  ;; " "
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1130     }
// 1131     
// 1132     //个位
// 1133     OLED_P8x16Char(ucIdxX+40, ucIdxY, (uint8)k+48);
??OLED_PrintInt16_12:
        LDRB     R0,[SP, #+0]
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Char
// 1134 
// 1135 
// 1136   return;
        POP      {R0,R4-R11,PC}   ;; return
// 1137 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12:
        DC8      "-",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_1:
        DC32     0x400ff100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_2:
        DC8      "+",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_3:
        DC8      " ",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_4:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_5:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_6:
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_7:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_8:
        DC32     0x40f86a00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_9:
        DC32     0xc0f869ff

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_10:
        DC32     0x40240000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_11:
        DC32     0x40590000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_12:
        DC32     0x408f4000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_13:
        DC32     ?_1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_14:
        DC32     LIBLOGO60x58

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_15:
        DC32     LANDZO_LOGO

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 1138 
// 1139 //拟合曲线示波器
// 1140 /*
// 1141 void OLED_printosc(int16 data)  //data -160~160    line 0-64  line = 0.39375 * data +64
// 1142 {
// 1143   //attention it's a queue here!
// 1144   static int16 osc_line[128] = {0};
// 1145   
// 1146   //pointer of fifo
// 1147   static uint8 fifo = 0;
// 1148   
// 1149   uint8 i = 0,j = 0;
// 1150   osc_line[fifo] = (int16)(0.2 * data + 31);
// 1151   
// 1152   if ( osc_line[fifo] > 63 )
// 1153   {
// 1154     osc_line[fifo] = 63;
// 1155   }
// 1156   
// 1157   if ( osc_line[fifo] < 0 )
// 1158   {
// 1159     osc_line[fifo] = 0;
// 1160   }
// 1161   
// 1162   fifo++;
// 1163   
// 1164 
// 1165   if ( fifo >= 128 )
// 1166   {
// 1167     fifo = 0;
// 1168   }
// 1169   
// 1170   OLED_CLS();
// 1171   for ( i = 0;i < 8; i++ )
// 1172   {
// 1173     OLED_Set_Pos( 0, i );
// 1174     for ( j = 0 ; j < 128;j++ )
// 1175     {
// 1176       if ( osc_line[j] > 63 - 8*i || osc_line[j] <= 55 - 8 * (i))
// 1177       {
// 1178         OLED_WrDat(0x00);
// 1179       }
// 1180       else
// 1181       {
// 1182         OLED_WrDat(0x80 >>  ( osc_line[j] - ( 55 - 8 * i ) -1));
// 1183       }
// 1184     }
// 1185   }
// 1186 
// 1187 
// 1188 }
// 1189 */
// 
// 1 692 bytes in section .data
// 2 930 bytes in section .rodata
// 3 260 bytes in section .text
// 
// 3 260 bytes of CODE  memory
// 2 930 bytes of CONST memory
// 1 692 bytes of DATA  memory
//
//Errors: none
//Warnings: none
